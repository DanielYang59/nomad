window.nomadArtifacts = {
  "searchQuantities": {
    "upload_id": {
      "name": "upload_id",
      "description": "The persistent and globally unique identifier for the upload of the entry",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "upload_name": {
      "name": "upload_name",
      "description": "The user provided upload name",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "upload_create_time": {
      "name": "upload_create_time",
      "description": "The date and time when the upload was created in nomad",
      "type": {
        "type_kind": "custom",
        "type_data": "nomad.metainfo.data_type.Datetime"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "entry_id": {
      "name": "entry_id",
      "description": "A persistent and globally unique identifier for the entry",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "entry_name": {
      "name": "entry_name",
      "description": "A brief human readable name for the entry.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "entry_name.prefix": {
      "name": "entry_name",
      "description": "A brief human readable name for the entry.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "entry_type": {
      "name": "entry_type",
      "description": "The main schema definition. This is the name of the section used for data.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "calc_id": {
      "name": "calc_id",
      "description": "Legacy field name, use `entry_id` instead.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "entry_create_time": {
      "name": "entry_create_time",
      "description": "The date and time when the entry was created in nomad",
      "type": {
        "type_kind": "custom",
        "type_data": "nomad.metainfo.data_type.Datetime"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "parser_name": {
      "name": "parser_name",
      "description": "The NOMAD parser used for the last processing",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "mainfile": {
      "name": "mainfile",
      "description": "The path to the mainfile from the root directory of the uploaded files",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "mainfile.path": {
      "name": "mainfile",
      "description": "The path to the mainfile from the root directory of the uploaded files",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "mainfile_key": {
      "name": "mainfile_key",
      "description": "Key used to differentiate between different *child entries* of an entry.\nFor parent entries and entries that do not have any children, the value should\nbe empty.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "mainfile_key.path": {
      "name": "mainfile_key",
      "description": "Key used to differentiate between different *child entries* of an entry.\nFor parent entries and entries that do not have any children, the value should\nbe empty.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "text_search_contents": {
      "name": "text_search_contents",
      "description": "Contains text contents that should be considered when\ndoing free text queries for entries.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "*"
      ],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "files": {
      "name": "files",
      "description": "The paths to the files within the upload that belong to this entry.\nAll files within the same directory as the entry's mainfile are considered the\nauxiliary files that belong to the entry.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "0..*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "files.path": {
      "name": "files",
      "description": "The paths to the files within the upload that belong to this entry.\nAll files within the same directory as the entry's mainfile are considered the\nauxiliary files that belong to the entry.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "0..*"
      ],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "pid": {
      "name": "pid",
      "description": "The unique, sequentially enumerated, integer PID that was used in the legacy\nNOMAD CoE. It allows to resolve URLs of the old NOMAD CoE Repository.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "raw_id": {
      "name": "raw_id",
      "description": "The code specific identifier extracted from the entry's raw files by the parser,\nif supported.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "external_id": {
      "name": "external_id",
      "description": "A user provided external id. Usually the id for an entry in an external database\nwhere the data was imported from.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "published": {
      "name": "published",
      "description": "Indicates if the entry is published",
      "type": {
        "type_kind": "python",
        "type_data": "bool"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "publish_time": {
      "name": "publish_time",
      "description": "The date and time when the upload was published in nomad",
      "type": {
        "type_kind": "custom",
        "type_data": "nomad.metainfo.data_type.Datetime"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "with_embargo": {
      "name": "with_embargo",
      "description": "Indicated if this entry is under an embargo",
      "type": {
        "type_kind": "python",
        "type_data": "bool"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "processed": {
      "name": "processed",
      "description": "Indicates that the entry is successfully processed.",
      "type": {
        "type_kind": "python",
        "type_data": "bool"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "last_processing_time": {
      "name": "last_processing_time",
      "description": "The date and time of the last processing.",
      "type": {
        "type_kind": "custom",
        "type_data": "nomad.metainfo.data_type.Datetime"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "processing_errors": {
      "name": "processing_errors",
      "description": "Errors that occurred during processing",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "nomad_version": {
      "name": "nomad_version",
      "description": "The NOMAD version used for the last processing",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "nomad_commit": {
      "name": "nomad_commit",
      "description": "The NOMAD commit used for the last processing",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "comment": {
      "name": "comment",
      "description": "A user provided comment for this entry",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "references": {
      "name": "references",
      "description": "User provided references (URLs) for this entry",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "0..*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "external_db": {
      "name": "external_db",
      "description": "The repository or external database where the original data resides",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "AFLOW",
          "EELS Data Base",
          "Kyoto Phonopy Database",
          "Materials Project",
          "OQMD",
          "The Perovskite Database Project"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "origin": {
      "name": "origin",
      "description": "A short human readable description of the entries origin. Usually it is the\nhandle of an external database/repository or the name of the main author.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "main_author.name": {
      "name": "name",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "main_author.name.text": {
      "name": "name",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "main_author.user_id": {
      "name": "user_id",
      "description": "The unique, persistent keycloak UUID",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "main_author": {
      "name": "main_author",
      "description": "The main author of the entry",
      "type": {
        "type_kind": "User",
        "type_data": "User"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "authors.name": {
      "name": "name",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "authors.name.text": {
      "name": "name",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "authors": {
      "name": "authors",
      "description": "All authors (main author and co-authors)",
      "type": {
        "type_kind": "Author",
        "type_data": "Author"
      },
      "shape": [
        "0..*"
      ],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "writers.name": {
      "name": "name",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "writers.name.text": {
      "name": "name",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "writers.user_id": {
      "name": "user_id",
      "description": "The unique, persistent keycloak UUID",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "writers": {
      "name": "writers",
      "description": "All writers (main author, upload coauthors)",
      "type": {
        "type_kind": "User",
        "type_data": "User"
      },
      "shape": [
        "0..*"
      ],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "writer_groups": {
      "name": "writer_groups",
      "description": "Groups with write access (= coauthor groups).",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "0..*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "viewers.name": {
      "name": "name",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "viewers.name.text": {
      "name": "name",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "viewers.user_id": {
      "name": "user_id",
      "description": "The unique, persistent keycloak UUID",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "viewers": {
      "name": "viewers",
      "description": "All viewers (main author, upload coauthors, and reviewers)",
      "type": {
        "type_kind": "User",
        "type_data": "User"
      },
      "shape": [
        "0..*"
      ],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "viewer_groups": {
      "name": "viewer_groups",
      "description": "Groups with read access (= coauthor groups + reviewer groups).",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "0..*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "datasets.dataset_id": {
      "name": "dataset_id",
      "description": "The unique identifier for this dataset as a string. It should be\na randomly generated UUID, similar to other nomad ids.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "datasets.dataset_name": {
      "name": "dataset_name",
      "description": "The human-readable name of the dataset as string. The dataset name must be\nunique for the user.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "datasets.doi": {
      "name": "doi",
      "description": "The optional Document Object Identifier (DOI) associated with this dataset.\nNomad can register DOIs that link back to the respective representation of\nthe dataset in the nomad UI. This quantity holds the string representation of\nthis DOI. There is only one per dataset. The DOI is just the DOI name, not its\nfull URL, e.g. \"10.17172/nomad/2019.10.29-1\".",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "datasets.dataset_create_time": {
      "name": "dataset_create_time",
      "description": "The date when the dataset was first created.",
      "type": {
        "type_kind": "custom",
        "type_data": "nomad.metainfo.data_type.Datetime"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "datasets.dataset_modified_time": {
      "name": "dataset_modified_time",
      "description": "The date when the dataset was last modified. An owned dataset\ncan only be extended after a DOI was assigned. A foreign dataset cannot be changed\nonce a DOI was assigned.",
      "type": {
        "type_kind": "custom",
        "type_data": "nomad.metainfo.data_type.Datetime"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "datasets.dataset_type": {
      "name": "dataset_type",
      "description": "The type determined if a dataset is owned, i.e. was created by\nthe authors of the contained entries; or if a dataset is foreign,\ni.e. it was created by someone not necessarily related to the entries.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "foreign",
          "owned"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "datasets": {
      "name": "datasets",
      "description": "A list of user curated datasets this entry belongs to.",
      "type": {
        "type_kind": "reference",
        "type_data": "/packages/16/section_definitions/0"
      },
      "shape": [
        "0..*"
      ],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "domain": {
      "name": "domain",
      "description": "The material science domain",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "dft",
          "ems",
          "nexus"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "n_quantities": {
      "name": "n_quantities",
      "description": "Number of metainfo quantities parsed from the entry.",
      "type": {
        "type_kind": "python",
        "type_data": "int"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "quantities": {
      "name": "quantities",
      "description": "All quantities that are used by this entry.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "0..*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "quantities.path": {
      "name": "quantities",
      "description": "All quantities that are used by this entry.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "0..*"
      ],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "sections": {
      "name": "sections",
      "description": "All sections that are present in this entry. This field is deprecated and will be removed.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "optimade.elements": {
      "name": "elements",
      "description": "Names of the different elements present in the structure.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "Ac",
          "Ag",
          "Al",
          "Am",
          "Ar",
          "As",
          "At",
          "Au",
          "B",
          "Ba",
          "Be",
          "Bh",
          "Bi",
          "Bk",
          "Br",
          "C",
          "Ca",
          "Cd",
          "Ce",
          "Cf",
          "Cl",
          "Cm",
          "Cn",
          "Co",
          "Cr",
          "Cs",
          "Cu",
          "Db",
          "Ds",
          "Dy",
          "Er",
          "Es",
          "Eu",
          "F",
          "Fe",
          "Fl",
          "Fm",
          "Fr",
          "Ga",
          "Gd",
          "Ge",
          "H",
          "He",
          "Hf",
          "Hg",
          "Ho",
          "Hs",
          "I",
          "In",
          "Ir",
          "K",
          "Kr",
          "La",
          "Li",
          "Lr",
          "Lu",
          "Lv",
          "Mc",
          "Md",
          "Mg",
          "Mn",
          "Mo",
          "Mt",
          "N",
          "Na",
          "Nb",
          "Nd",
          "Ne",
          "Nh",
          "Ni",
          "No",
          "Np",
          "O",
          "Og",
          "Os",
          "P",
          "Pa",
          "Pb",
          "Pd",
          "Pm",
          "Po",
          "Pr",
          "Pt",
          "Pu",
          "Ra",
          "Rb",
          "Re",
          "Rf",
          "Rg",
          "Rh",
          "Rn",
          "Ru",
          "S",
          "Sb",
          "Sc",
          "Se",
          "Sg",
          "Si",
          "Sm",
          "Sn",
          "Sr",
          "Ta",
          "Tb",
          "Tc",
          "Te",
          "Th",
          "Ti",
          "Tl",
          "Tm",
          "Ts",
          "U",
          "V",
          "W",
          "X",
          "Xe",
          "Y",
          "Yb",
          "Zn",
          "Zr"
        ]
      },
      "shape": [
        "1..*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "optimade.nelements": {
      "name": "nelements",
      "description": "Number of different elements in the structure as an integer.",
      "type": {
        "type_kind": "python",
        "type_data": "int"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "optimade.elements_ratios": {
      "name": "elements_ratios",
      "description": "Relative proportions of different elements in the structure.",
      "type": {
        "type_kind": "python",
        "type_data": "float"
      },
      "shape": [
        "nelements"
      ],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "optimade.chemical_formula_descriptive": {
      "name": "chemical_formula_descriptive",
      "description": "The chemical formula for a structure as a string in a form chosen by the API\nimplementation.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "optimade.chemical_formula_reduced": {
      "name": "chemical_formula_reduced",
      "description": "The reduced chemical formula for a structure as a string with element symbols and\ninteger chemical proportion numbers. The proportion number MUST be omitted if it is 1.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "optimade.chemical_formula_hill": {
      "name": "chemical_formula_hill",
      "description": "The chemical formula for a structure in Hill form with element symbols followed by\ninteger chemical proportion numbers. The proportion number MUST be omitted if it is 1.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "optimade.chemical_formula_anonymous": {
      "name": "chemical_formula_anonymous",
      "description": "The anonymous formula is the chemical_formula_reduced, but where the elements are\ninstead first ordered by their chemical proportion number, and then, in order left to\nright, replaced by anonymous symbols A, B, C, ..., Z, Aa, Ba, ..., Za, Ab, Bb, ... and\nso on.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "optimade.nperiodic_dimensions": {
      "name": "nperiodic_dimensions",
      "description": "An integer specifying the number of periodic dimensions in the structure, equivalent\nto the number of non-zero entries in dimension_types.",
      "type": {
        "type_kind": "python",
        "type_data": "int"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "optimade.nsites": {
      "name": "nsites",
      "description": "An integer specifying the length of the cartesian_site_positions property.",
      "type": {
        "type_kind": "python",
        "type_data": "int"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "optimade.structure_features": {
      "name": "structure_features",
      "description": "A list of strings that flag which special features are used by the structure.\n\n- disorder: This flag MUST be present if any one entry in the species list has a\nchemical_symbols list that is longer than 1 element.\n- unknown_positions: This flag MUST be present if at least one component of the\ncartesian_site_positions list of lists has value null.\n- assemblies: This flag MUST be present if the assemblies list is present.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "assemblies",
          "disorder",
          "unknown_positions"
        ]
      },
      "shape": [
        "1..*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "section_defs.definition_qualified_name": {
      "name": "definition_qualified_name",
      "description": "The qualified name of the compatible section.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "section_defs.definition_id": {
      "name": "definition_id",
      "description": "The definition id of the compatible section.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "section_defs.used_directly": {
      "name": "used_directly",
      "description": "If the compatible section is directly used as base section.",
      "type": {
        "type_kind": "python",
        "type_data": "bool"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "entry_references.target_reference": {
      "name": "target_reference",
      "description": "The full url like reference of the the target.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "entry_references.target_entry_id": {
      "name": "target_entry_id",
      "description": "The id of the entry containing the target.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "entry_references.target_mainfile": {
      "name": "target_mainfile",
      "description": "The mainfile of the entry containing the target.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "entry_references.target_upload_id": {
      "name": "target_upload_id",
      "description": "The id of the upload containing the target.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "entry_references.target_name": {
      "name": "target_name",
      "description": "The name of the target quantity/section.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "entry_references.target_path": {
      "name": "target_path",
      "description": "The path of the target quantity/section in its archive.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "entry_references.source_name": {
      "name": "source_name",
      "description": "The name of the source (self) quantity/section in its archive.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "entry_references.source_path": {
      "name": "source_path",
      "description": "The path of the source (self) quantity/section in its archive.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "entry_references.source_quantity": {
      "name": "source_quantity",
      "description": "A reference to the quantity definition that defines the reference",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "search_quantities.id": {
      "name": "id",
      "description": "The full identifier for this quantity that contains the path in the schema +\nschema name.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "search_quantities.definition": {
      "name": "definition",
      "description": "A reference to the quantity definition.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "search_quantities.path_archive": {
      "name": "path_archive",
      "description": "Path of the value within the archive.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "search_quantities.bool_value": {
      "name": "bool_value",
      "description": "The value mapped as an ES boolean field.",
      "type": {
        "type_kind": "python",
        "type_data": "bool"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "search_quantities.str_value": {
      "name": "str_value",
      "description": "The value mapped as an ES text and keyword field.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "search_quantities.str_value.keyword": {
      "name": "str_value",
      "description": "The value mapped as an ES text and keyword field.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "search_quantities.int_value": {
      "name": "int_value",
      "description": "The value mapped as an ES long number field.",
      "type": {
        "type_kind": "python",
        "type_data": "int"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "search_quantities.float_value": {
      "name": "float_value",
      "description": "The value mapped as an ES double number field.",
      "type": {
        "type_kind": "python",
        "type_data": "float"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "search_quantities.datetime_value": {
      "name": "datetime_value",
      "description": "The value mapped as an ES date field.",
      "type": {
        "type_kind": "custom",
        "type_data": "nomad.metainfo.data_type.Datetime"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.material.material_id": {
      "name": "material_id",
      "description": "A fixed length, unique material identifier in the form of a hash\ndigest.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "results.material.material_name": {
      "name": "material_name",
      "description": "Meaningful names for this a material if any can be assigned.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.material.structural_type": {
      "name": "structural_type",
      "description": "Structural class determined from the atomic structure.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "1D",
          "2D",
          "atom",
          "bulk",
          "molecule / cluster",
          "not processed",
          "surface",
          "unavailable"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.material.dimensionality": {
      "name": "dimensionality",
      "description": "Dimensionality of the system. For atomistic systems this is\nautomatically evaluated by using the topology-scaling algorithm:\nhttps://doi.org/10.1103/PhysRevLett.118.106101.\n\n| Value | Description |\n| --------- | ----------------------- |\n| `'0D'` | Not connected periodically |\n| `'1D'` | Periodically connected in one dimension |\n| `'2D'` | Periodically connected in two dimensions |\n| `'3D'` | Periodically connected in three dimensions |",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "0D",
          "1D",
          "2D",
          "3D"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.material.building_block": {
      "name": "building_block",
      "description": "More exact classification for this system, i.e. the type of \"building\nblock\" it represents.\n\n| Value | Description |\n| --------- | ----------------------- |\n| `'surface'` | Structure built from a unit cell that repeats periodically in two directions and at least twice, but not infinitely in a third direction. |\n| `'2D material'` | Structure built from a unit cell that repeats periodically in two directions and only once in a third direction. |\n| `'molecule'` | Molecule defined in the force-field topology |\n| `'monomer'` | Monomer defined in the force-field topology |",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "2D material",
          "molecule",
          "monomer",
          "surface"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.material.functional_type": {
      "name": "functional_type",
      "description": "Classification based on the functional properties.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "0..*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.material.compound_type": {
      "name": "compound_type",
      "description": "Classification based on the chemical formula.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "0..*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.material.elements": {
      "name": "elements",
      "description": "Names of the different elements present in the structure.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "Ac",
          "Ag",
          "Al",
          "Am",
          "Ar",
          "As",
          "At",
          "Au",
          "B",
          "Ba",
          "Be",
          "Bh",
          "Bi",
          "Bk",
          "Br",
          "C",
          "Ca",
          "Cd",
          "Ce",
          "Cf",
          "Cl",
          "Cm",
          "Cn",
          "Co",
          "Cr",
          "Cs",
          "Cu",
          "Db",
          "Ds",
          "Dy",
          "Er",
          "Es",
          "Eu",
          "F",
          "Fe",
          "Fl",
          "Fm",
          "Fr",
          "Ga",
          "Gd",
          "Ge",
          "H",
          "He",
          "Hf",
          "Hg",
          "Ho",
          "Hs",
          "I",
          "In",
          "Ir",
          "K",
          "Kr",
          "La",
          "Li",
          "Lr",
          "Lu",
          "Lv",
          "Mc",
          "Md",
          "Mg",
          "Mn",
          "Mo",
          "Mt",
          "N",
          "Na",
          "Nb",
          "Nd",
          "Ne",
          "Nh",
          "Ni",
          "No",
          "Np",
          "O",
          "Og",
          "Os",
          "P",
          "Pa",
          "Pb",
          "Pd",
          "Pm",
          "Po",
          "Pr",
          "Pt",
          "Pu",
          "Ra",
          "Rb",
          "Re",
          "Rf",
          "Rg",
          "Rh",
          "Rn",
          "Ru",
          "S",
          "Sb",
          "Sc",
          "Se",
          "Sg",
          "Si",
          "Sm",
          "Sn",
          "Sr",
          "Ta",
          "Tb",
          "Tc",
          "Te",
          "Th",
          "Ti",
          "Tl",
          "Tm",
          "Ts",
          "U",
          "V",
          "W",
          "X",
          "Xe",
          "Y",
          "Yb",
          "Zn",
          "Zr"
        ]
      },
      "shape": [
        "0..*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.material.n_elements": {
      "name": "n_elements",
      "description": "Number of different elements in the structure as an integer.",
      "type": {
        "type_kind": "python",
        "type_data": "int"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.material.elements_exclusive": {
      "name": "elements_exclusive",
      "description": "String containing the chemical elements in alphabetical order and\nseparated by a single whitespace. This quantity can be used for\nexclusive element searches where you want to find entries/materials\nwith only certain given elements.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "results.material.chemical_formula_descriptive": {
      "name": "chemical_formula_descriptive",
      "description": "The chemical formula for a structure as a string in a form chosen by the API\nimplementation.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.material.chemical_formula_reduced": {
      "name": "chemical_formula_reduced",
      "description": "Alphabetically sorted chemical formula with reduced integer chemical\nproportion numbers. The proportion number is omitted if it is 1.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.material.chemical_formula_hill": {
      "name": "chemical_formula_hill",
      "description": "The chemical formula for a structure in Hill form with element\nsymbols followed by non-reduced integer chemical proportion numbers.\nThe proportion number is omitted if it is 1.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.material.chemical_formula_iupac": {
      "name": "chemical_formula_iupac",
      "description": "Formula where the elements are ordered using a formal list loosely\nbased on electronegativity as defined in the IUPAC nomenclature of\ninorganic chemistry (2005). Contains reduced integer chemical\nproportion numbers where the proportion number is omitted if it is\n1.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.material.chemical_formula_anonymous": {
      "name": "chemical_formula_anonymous",
      "description": "Formula with the elements ordered by their reduced integer chemical\nproportion number, and the chemical species replaced by\nalphabetically ordered letters. The proportion number is omitted if\nit is 1. E.g.  H2O becomes A2B and H2O2 becomes AB. The letters are\ndrawn from the english alphabet that may be extended by increasing\nthe number of letters, e.g. A, B, ..., Z, Aa, Ab and so on. This\ndefinition is in line with the similarly named OPTIMADE definition.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.material.chemical_formula_reduced_fragments": {
      "name": "chemical_formula_reduced_fragments",
      "description": "Alphabetically sorted chemical formula with reduced integer chemical\nproportion numbers. The proportion number is omitted if it is 1.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "*"
      ],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.material.elemental_composition.element": {
      "name": "element",
      "description": "The symbol of the element, e.g. 'Pb'.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "Ac",
          "Ag",
          "Al",
          "Am",
          "Ar",
          "As",
          "At",
          "Au",
          "B",
          "Ba",
          "Be",
          "Bh",
          "Bi",
          "Bk",
          "Br",
          "C",
          "Ca",
          "Cd",
          "Ce",
          "Cf",
          "Cl",
          "Cm",
          "Cn",
          "Co",
          "Cr",
          "Cs",
          "Cu",
          "Db",
          "Ds",
          "Dy",
          "Er",
          "Es",
          "Eu",
          "F",
          "Fe",
          "Fl",
          "Fm",
          "Fr",
          "Ga",
          "Gd",
          "Ge",
          "H",
          "He",
          "Hf",
          "Hg",
          "Ho",
          "Hs",
          "I",
          "In",
          "Ir",
          "K",
          "Kr",
          "La",
          "Li",
          "Lr",
          "Lu",
          "Lv",
          "Mc",
          "Md",
          "Mg",
          "Mn",
          "Mo",
          "Mt",
          "N",
          "Na",
          "Nb",
          "Nd",
          "Ne",
          "Nh",
          "Ni",
          "No",
          "Np",
          "O",
          "Og",
          "Os",
          "P",
          "Pa",
          "Pb",
          "Pd",
          "Pm",
          "Po",
          "Pr",
          "Pt",
          "Pu",
          "Ra",
          "Rb",
          "Re",
          "Rf",
          "Rg",
          "Rh",
          "Rn",
          "Ru",
          "S",
          "Sb",
          "Sc",
          "Se",
          "Sg",
          "Si",
          "Sm",
          "Sn",
          "Sr",
          "Ta",
          "Tb",
          "Tc",
          "Te",
          "Th",
          "Ti",
          "Tl",
          "Tm",
          "Ts",
          "U",
          "V",
          "W",
          "Xe",
          "Y",
          "Yb",
          "Zn",
          "Zr"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.material.elemental_composition.atomic_fraction": {
      "name": "atomic_fraction",
      "description": "The atomic fraction of the element in the system it is contained within.\nPer definition a positive value less than or equal to 1.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.material.elemental_composition.mass_fraction": {
      "name": "mass_fraction",
      "description": "The mass fraction of the element in the system it is contained within.\nPer definition a positive value less than or equal to 1.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.material.symmetry.bravais_lattice": {
      "name": "bravais_lattice",
      "description": "Identifier for the Bravais lattice in Pearson notation. The first lowercase letter\nidentifies the crystal family and can be one of the following: a (triclinic), b\n(monoclinic), o (orthorhombic), t (tetragonal), h (hexagonal) or c (cubic). The\nsecond uppercase letter identifies the centring and can be one of the following: P\n(primitive), S (face centred), I (body centred), R (rhombohedral centring) or F\n(all faces centred).",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "aP",
          "cF",
          "cI",
          "cP",
          "hP",
          "hR",
          "mP",
          "mS",
          "oF",
          "oI",
          "oP",
          "oS",
          "tI",
          "tP"
        ]
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.material.symmetry.crystal_system": {
      "name": "crystal_system",
      "description": "Name of the crystal system.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "cubic",
          "hexagonal",
          "monoclinic",
          "orthorhombic",
          "tetragonal",
          "triclinic",
          "trigonal"
        ]
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.material.symmetry.hall_number": {
      "name": "hall_number",
      "description": "The Hall number for this system.",
      "type": {
        "type_kind": "numpy",
        "type_data": "int32"
      },
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.material.symmetry.hall_symbol": {
      "name": "hall_symbol",
      "description": "The Hall symbol for this system.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.material.symmetry.point_group": {
      "name": "point_group",
      "description": "Symbol of the crystallographic point group in the Hermann-Mauguin notation.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.material.symmetry.space_group_number": {
      "name": "space_group_number",
      "description": "Specifies the International Union of Crystallography (IUC) number of the 3D space\ngroup of this system.",
      "type": {
        "type_kind": "numpy",
        "type_data": "int32"
      },
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.material.symmetry.space_group_symbol": {
      "name": "space_group_symbol",
      "description": "The International Union of Crystallography (IUC) short symbol of the 3D\nspace group of this system.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.material.symmetry.prototype_formula": {
      "name": "prototype_formula",
      "description": "The formula of the prototypical material for this structure.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "results.material.symmetry.prototype_aflow_id": {
      "name": "prototype_aflow_id",
      "description": "The identifier of this structure in the AFLOW encyclopedia of\ncrystallographic prototypes:\nhttp://www.aflowlib.org/prototype-encyclopedia/index.html",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.material.symmetry.structure_name": {
      "name": "structure_name",
      "description": "A common name for this structure, e.g. fcc, bcc.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "4-member ring",
          "Heusler",
          "bcc",
          "bct",
          "bct5",
          "clathrate",
          "cuprite",
          "diamond",
          "fcc",
          "fct",
          "half-Heusler",
          "hcp",
          "perovskite",
          "rock salt",
          "rutile",
          "simple cubic",
          "wurtzite",
          "zincblende"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.material.symmetry.strukturbericht_designation": {
      "name": "strukturbericht_designation",
      "description": "Classification of the material according to the historically grown\n'strukturbericht'.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.material.topology.system_id": {
      "name": "system_id",
      "description": "That path of this section within the metainfo that is used as a unique\nidentifier.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.label": {
      "name": "label",
      "description": "Descriptive label that identifies this structural part.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.material.topology.method": {
      "name": "method",
      "description": "The method used for identifying this system.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "matid",
          "parser",
          "porosity",
          "user"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.material.topology.description": {
      "name": "description",
      "description": "A short description about this part of the topology.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.material_id": {
      "name": "material_id",
      "description": "A fixed length, unique material identifier in the form of a hash\ndigest.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.material_name": {
      "name": "material_name",
      "description": "Meaningful names for this a material if any can be assigned.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.material.topology.structural_type": {
      "name": "structural_type",
      "description": "Structural class determined from the atomic structure.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "1D",
          "2D",
          "active orbitals",
          "atom",
          "bulk",
          "group",
          "molecule",
          "molecule / cluster",
          "monomer",
          "not processed",
          "surface",
          "unavailable"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.material.topology.dimensionality": {
      "name": "dimensionality",
      "description": "Dimensionality of the system. For atomistic systems this is\nautomatically evaluated by using the topology-scaling algorithm:\nhttps://doi.org/10.1103/PhysRevLett.118.106101.\n\n| Value | Description |\n| --------- | ----------------------- |\n| `'0D'` | Not connected periodically |\n| `'1D'` | Periodically connected in one dimension |\n| `'2D'` | Periodically connected in two dimensions |\n| `'3D'` | Periodically connected in three dimensions |",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "0D",
          "1D",
          "2D",
          "3D"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.material.topology.building_block": {
      "name": "building_block",
      "description": "More exact classification for this system, i.e. the type of \"building\nblock\" it represents.\n\n| Value | Description |\n| --------- | ----------------------- |\n| `'surface'` | Structure built from a unit cell that repeats periodically in two directions and at least twice, but not infinitely in a third direction. |\n| `'2D material'` | Structure built from a unit cell that repeats periodically in two directions and only once in a third direction. |\n| `'molecule'` | Molecule defined in the force-field topology |\n| `'monomer'` | Monomer defined in the force-field topology |",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "2D material",
          "molecule",
          "monomer",
          "surface"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.material.topology.functional_type": {
      "name": "functional_type",
      "description": "Classification based on the functional properties.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "0..*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.material.topology.compound_type": {
      "name": "compound_type",
      "description": "Classification based on the chemical formula.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "0..*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.material.topology.elements": {
      "name": "elements",
      "description": "Names of the different elements present in the structure.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "Ac",
          "Ag",
          "Al",
          "Am",
          "Ar",
          "As",
          "At",
          "Au",
          "B",
          "Ba",
          "Be",
          "Bh",
          "Bi",
          "Bk",
          "Br",
          "C",
          "Ca",
          "Cd",
          "Ce",
          "Cf",
          "Cl",
          "Cm",
          "Cn",
          "Co",
          "Cr",
          "Cs",
          "Cu",
          "Db",
          "Ds",
          "Dy",
          "Er",
          "Es",
          "Eu",
          "F",
          "Fe",
          "Fl",
          "Fm",
          "Fr",
          "Ga",
          "Gd",
          "Ge",
          "H",
          "He",
          "Hf",
          "Hg",
          "Ho",
          "Hs",
          "I",
          "In",
          "Ir",
          "K",
          "Kr",
          "La",
          "Li",
          "Lr",
          "Lu",
          "Lv",
          "Mc",
          "Md",
          "Mg",
          "Mn",
          "Mo",
          "Mt",
          "N",
          "Na",
          "Nb",
          "Nd",
          "Ne",
          "Nh",
          "Ni",
          "No",
          "Np",
          "O",
          "Og",
          "Os",
          "P",
          "Pa",
          "Pb",
          "Pd",
          "Pm",
          "Po",
          "Pr",
          "Pt",
          "Pu",
          "Ra",
          "Rb",
          "Re",
          "Rf",
          "Rg",
          "Rh",
          "Rn",
          "Ru",
          "S",
          "Sb",
          "Sc",
          "Se",
          "Sg",
          "Si",
          "Sm",
          "Sn",
          "Sr",
          "Ta",
          "Tb",
          "Tc",
          "Te",
          "Th",
          "Ti",
          "Tl",
          "Tm",
          "Ts",
          "U",
          "V",
          "W",
          "X",
          "Xe",
          "Y",
          "Yb",
          "Zn",
          "Zr"
        ]
      },
      "shape": [
        "0..*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.material.topology.n_elements": {
      "name": "n_elements",
      "description": "Number of different elements in the structure as an integer.",
      "type": {
        "type_kind": "python",
        "type_data": "int"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.elements_exclusive": {
      "name": "elements_exclusive",
      "description": "String containing the chemical elements in alphabetical order and\nseparated by a single whitespace. This quantity can be used for\nexclusive element searches where you want to find entries/materials\nwith only certain given elements.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.chemical_formula_descriptive": {
      "name": "chemical_formula_descriptive",
      "description": "The chemical formula for a structure as a string in a form chosen by the API\nimplementation.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.material.topology.chemical_formula_reduced": {
      "name": "chemical_formula_reduced",
      "description": "Alphabetically sorted chemical formula with reduced integer chemical\nproportion numbers. The proportion number is omitted if it is 1.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.material.topology.chemical_formula_hill": {
      "name": "chemical_formula_hill",
      "description": "The chemical formula for a structure in Hill form with element\nsymbols followed by non-reduced integer chemical proportion numbers.\nThe proportion number is omitted if it is 1.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.material.topology.chemical_formula_iupac": {
      "name": "chemical_formula_iupac",
      "description": "Formula where the elements are ordered using a formal list loosely\nbased on electronegativity as defined in the IUPAC nomenclature of\ninorganic chemistry (2005). Contains reduced integer chemical\nproportion numbers where the proportion number is omitted if it is\n1.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.material.topology.chemical_formula_anonymous": {
      "name": "chemical_formula_anonymous",
      "description": "Formula with the elements ordered by their reduced integer chemical\nproportion number, and the chemical species replaced by\nalphabetically ordered letters. The proportion number is omitted if\nit is 1. E.g.  H2O becomes A2B and H2O2 becomes AB. The letters are\ndrawn from the english alphabet that may be extended by increasing\nthe number of letters, e.g. A, B, ..., Z, Aa, Ab and so on. This\ndefinition is in line with the similarly named OPTIMADE definition.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.material.topology.chemical_formula_reduced_fragments": {
      "name": "chemical_formula_reduced_fragments",
      "description": "Alphabetically sorted chemical formula with reduced integer chemical\nproportion numbers. The proportion number is omitted if it is 1.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "*"
      ],
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.parent_system": {
      "name": "parent_system",
      "description": "Reference to the parent system.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.child_systems": {
      "name": "child_systems",
      "description": "References to the child systems.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.atomic_fraction": {
      "name": "atomic_fraction",
      "description": "The atomic fraction of this system in the full structure it is contained in.\nPer definition a positive value less than or equal to 1.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.mass_fraction": {
      "name": "mass_fraction",
      "description": "The mass fraction of this system in the full structure it is contained within.\nPer definition a positive value less than or equal to 1.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.n_atoms": {
      "name": "n_atoms",
      "description": "The total number of species (atoms, particles) in the system.",
      "type": {
        "type_kind": "python",
        "type_data": "int"
      },
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.sbu_type": {
      "name": "sbu_type",
      "description": "The topological representation of the metal secondary building units (sbus).\nThe shape of most metal sbus are well defined and form the basis of most\n popular MOFs. The most common example is the paddlewheel, rodlike mofs,\n irmofs, uio66",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.material.topology.largest_cavity_diameter": {
      "name": "largest_cavity_diameter",
      "description": "The largest cavity diameter is the largest sphere that can be inserted in a porous\nsystem without overlapping with any of the atoms in the system.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "meter",
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.pore_limiting_diameter": {
      "name": "pore_limiting_diameter",
      "description": "The pore limiting diameter is the largest sphere that can freely\ndiffuse through the porous network without overlapping with any of the\natoms in the system.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "meter",
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.largest_included_sphere_along_free_sphere_path": {
      "name": "largest_included_sphere_along_free_sphere_path",
      "description": "The largest included sphere along free sphere path is\nlargest sphere that can be inserted in the pore.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "meter",
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.accessible_surface_area": {
      "name": "accessible_surface_area",
      "description": "The surface area accessible is the area that is accessible to guest molecules\nin a porous system. It is generally considered to be the entire surface area\nthat can be spanned by a probe of a specific radius. In NOMAD, by default we use\na probe that has a radius of 1.86 Angstrom, which correspond to the\ncovalent radii of nitrogen gas. For biomolecular system, a radii of\n1.4 Angstrom can be used, which correspond to the covalent radii\nof water.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "meter ** 2",
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.accessible_volume": {
      "name": "accessible_volume",
      "description": "Volume of unoccupied space in a system that can be accessible to\nguest molecules, like solvents.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "meter ** 3",
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.void_fraction": {
      "name": "void_fraction",
      "description": "Ratio of the the volume of the unoccupied space in the system\nto the volume of the entire system. It is a good proxy to\ndetermine how porous a system is. Highly porous systems\noften have a larger void fraction, meanwhile compact or dense\nsystems have smaller void fractions.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.n_channels": {
      "name": "n_channels",
      "description": "Number of channels present in the porous system, which correspond to the number of\npores within the system.",
      "type": {
        "type_kind": "python",
        "type_data": "int"
      },
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.sbu_coordination_number": {
      "name": "sbu_coordination_number",
      "description": "The number of connecting point in the secondary building units(sbu), which corresponds to\nthe to the number of point of extension in the secondary building unit. Some common\nterminology include\n1 : monotopic\n2 : ditopic\n3 : tritopic\n4 : tetratopic\n5 : pentatopic",
      "type": {
        "type_kind": "python",
        "type_data": "int"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.elemental_composition.element": {
      "name": "element",
      "description": "The symbol of the element, e.g. 'Pb'.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "Ac",
          "Ag",
          "Al",
          "Am",
          "Ar",
          "As",
          "At",
          "Au",
          "B",
          "Ba",
          "Be",
          "Bh",
          "Bi",
          "Bk",
          "Br",
          "C",
          "Ca",
          "Cd",
          "Ce",
          "Cf",
          "Cl",
          "Cm",
          "Cn",
          "Co",
          "Cr",
          "Cs",
          "Cu",
          "Db",
          "Ds",
          "Dy",
          "Er",
          "Es",
          "Eu",
          "F",
          "Fe",
          "Fl",
          "Fm",
          "Fr",
          "Ga",
          "Gd",
          "Ge",
          "H",
          "He",
          "Hf",
          "Hg",
          "Ho",
          "Hs",
          "I",
          "In",
          "Ir",
          "K",
          "Kr",
          "La",
          "Li",
          "Lr",
          "Lu",
          "Lv",
          "Mc",
          "Md",
          "Mg",
          "Mn",
          "Mo",
          "Mt",
          "N",
          "Na",
          "Nb",
          "Nd",
          "Ne",
          "Nh",
          "Ni",
          "No",
          "Np",
          "O",
          "Og",
          "Os",
          "P",
          "Pa",
          "Pb",
          "Pd",
          "Pm",
          "Po",
          "Pr",
          "Pt",
          "Pu",
          "Ra",
          "Rb",
          "Re",
          "Rf",
          "Rg",
          "Rh",
          "Rn",
          "Ru",
          "S",
          "Sb",
          "Sc",
          "Se",
          "Sg",
          "Si",
          "Sm",
          "Sn",
          "Sr",
          "Ta",
          "Tb",
          "Tc",
          "Te",
          "Th",
          "Ti",
          "Tl",
          "Tm",
          "Ts",
          "U",
          "V",
          "W",
          "Xe",
          "Y",
          "Yb",
          "Zn",
          "Zr"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.material.topology.elemental_composition.atomic_fraction": {
      "name": "atomic_fraction",
      "description": "The atomic fraction of the element in the system it is contained within.\nPer definition a positive value less than or equal to 1.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.elemental_composition.mass_fraction": {
      "name": "mass_fraction",
      "description": "The mass fraction of the element in the system it is contained within.\nPer definition a positive value less than or equal to 1.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.system_relation.type": {
      "name": "type",
      "description": "The type of relation between a system and it's parent.\n\n| Value | Description |\n| --------- | ----------------------- |\n| `'root'` | System representing the entire structure, has no parent system. |\n| `'subsystem'` | A single logical entity extracted from the parent system. |\n| `'group'` | A logical group of subsystems within the parent, e.g. a group of molecules in MD. |\n| `'primitive_cell'` | The conventional cell from which the parent is constructed from. |\n| `'conventional_cell'` | The primitive cell from which the parent is constructed from. |",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "conventional_cell",
          "group",
          "primitive_cell",
          "root",
          "subsystem"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.material.topology.cell.a": {
      "name": "a",
      "description": "Length of the first basis vector.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "meter",
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.cell.b": {
      "name": "b",
      "description": "Length of the second basis vector.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "meter",
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.cell.c": {
      "name": "c",
      "description": "Length of the third basis vector.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "meter",
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.cell.alpha": {
      "name": "alpha",
      "description": "Angle between second and third basis vector.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "radian",
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.cell.beta": {
      "name": "beta",
      "description": "Angle between first and third basis vector.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "radian",
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.cell.gamma": {
      "name": "gamma",
      "description": "Angle between first and second basis vector.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "radian",
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.cell.volume": {
      "name": "volume",
      "description": "Volume of the cell.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "meter ** 3",
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.cell.atomic_density": {
      "name": "atomic_density",
      "description": "Atomic density of the material (atoms/volume).'",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "1 / meter ** 3",
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.cell.mass_density": {
      "name": "mass_density",
      "description": "Mass density of the material.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "kilogram / meter ** 3",
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.symmetry.bravais_lattice": {
      "name": "bravais_lattice",
      "description": "Identifier for the Bravais lattice in Pearson notation. The first lowercase letter\nidentifies the crystal family and can be one of the following: a (triclinic), b\n(monoclinic), o (orthorhombic), t (tetragonal), h (hexagonal) or c (cubic). The\nsecond uppercase letter identifies the centring and can be one of the following: P\n(primitive), S (face centred), I (body centred), R (rhombohedral centring) or F\n(all faces centred).",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "aP",
          "cF",
          "cI",
          "cP",
          "hP",
          "hR",
          "mP",
          "mS",
          "oF",
          "oI",
          "oP",
          "oS",
          "tI",
          "tP"
        ]
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.material.topology.symmetry.crystal_system": {
      "name": "crystal_system",
      "description": "Name of the crystal system.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "cubic",
          "hexagonal",
          "monoclinic",
          "orthorhombic",
          "tetragonal",
          "triclinic",
          "trigonal"
        ]
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.material.topology.symmetry.hall_number": {
      "name": "hall_number",
      "description": "The Hall number for this system.",
      "type": {
        "type_kind": "numpy",
        "type_data": "int32"
      },
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.symmetry.hall_symbol": {
      "name": "hall_symbol",
      "description": "The Hall symbol for this system.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.material.topology.symmetry.point_group": {
      "name": "point_group",
      "description": "Symbol of the crystallographic point group in the Hermann-Mauguin notation.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.material.topology.symmetry.space_group_number": {
      "name": "space_group_number",
      "description": "Specifies the International Union of Crystallography (IUC) number of the 3D space\ngroup of this system.",
      "type": {
        "type_kind": "numpy",
        "type_data": "int32"
      },
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.symmetry.space_group_symbol": {
      "name": "space_group_symbol",
      "description": "The International Union of Crystallography (IUC) short symbol of the 3D\nspace group of this system.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.material.topology.symmetry.strukturbericht_designation": {
      "name": "strukturbericht_designation",
      "description": "Classification of the material according to the historically grown\n'strukturbericht'.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.material.topology.symmetry.prototype_label_aflow": {
      "name": "prototype_label_aflow",
      "description": "AFLOW label of the prototype (see\nhttp://aflowlib.org/CrystalDatabase/prototype_index.html) identified on the basis\nof the space_group and normalized_wyckoff.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.material.topology.symmetry.prototype_name": {
      "name": "prototype_name",
      "description": "A common name for this prototypical structure, e.g. fcc, bcc.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "4-member ring",
          "Heusler",
          "bcc",
          "bct",
          "bct5",
          "clathrate",
          "cuprite",
          "diamond",
          "fcc",
          "fct",
          "half-Heusler",
          "hcp",
          "perovskite",
          "rock salt",
          "rutile",
          "simple cubic",
          "wurtzite",
          "zincblende"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.material.topology.active_orbitals.n_quantum_number": {
      "name": "n_quantum_number",
      "description": "Principal quantum number $n$.",
      "type": {
        "type_kind": "numpy",
        "type_data": "int32"
      },
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.active_orbitals.j_quantum_number": {
      "name": "j_quantum_number",
      "description": "Total angular momentum quantum number $j = |l-s| ... l+s$.\n**Necessary with strong L-S coupling or non-collinear spin systems.**",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "shape": [
        "1..2"
      ],
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.active_orbitals.mj_quantum_number": {
      "name": "mj_quantum_number",
      "description": "Azimuthal projection of the $j$ vector.\n**Necessary with strong L-S coupling or non-collinear spin systems.**",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "shape": [
        "*"
      ],
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.active_orbitals.degeneracy": {
      "name": "degeneracy",
      "description": "The number of states under the filling constraints applied to the orbital set.\nThis implicitly assumes that all orbitals in the set are degenerate.",
      "type": {
        "type_kind": "numpy",
        "type_data": "int32"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.active_orbitals.n_electrons_excited": {
      "name": "n_electrons_excited",
      "description": "The electron charge excited for modelling purposes.\nChoices that deviate from 0 or 1 typically leverage Janak composition.\nUnless the `initial` state is chosen, the model corresponds to a single electron being excited in physical reality.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.active_orbitals.occupation": {
      "name": "occupation",
      "description": "The total number of electrons within the state (as defined by degeneracy)\nafter exciting the model charge.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.active_orbitals.l_quantum_symbol": {
      "name": "l_quantum_symbol",
      "description": "Azimuthal $l$ in symbolic form.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.active_orbitals.ml_quantum_symbol": {
      "name": "ml_quantum_symbol",
      "description": "Magnetic quantum number $m_l$ in symbolic form.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "results.material.topology.active_orbitals.ms_quantum_symbol": {
      "name": "ms_quantum_symbol",
      "description": "Spin quantum number $m_s$ in symbolic form.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "results.method.method_id": {
      "name": "method_id",
      "description": "Identifier for the used method. Only available for a subset of entries\nfor which the methodology has been identified with precision.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "results.method.method_name": {
      "name": "method_name",
      "description": "Common name for the used method.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "BSE",
          "CoreHole",
          "DFT",
          "DMFT",
          "EELS",
          "GW",
          "NMR",
          "TB",
          "XPS",
          "XRD",
          "kMC",
          "quantum cms",
          "unavailable"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.method.workflow_name": {
      "name": "workflow_name",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.method.simulation.program_name": {
      "name": "program_name",
      "description": "The name of the used program.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.method.simulation.program_version": {
      "name": "program_version",
      "description": "The version of the used program.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.method.simulation.program_version_internal": {
      "name": "program_version_internal",
      "description": "The version tag used internally by the development team.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.method.simulation.dft.basis_set_type": {
      "name": "basis_set_type",
      "description": "The used basis set functions.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "(L)APW+lo",
          "gaussians",
          "not processed",
          "numeric AOs",
          "plane waves",
          "psinc functions",
          "real-space grid",
          "unavailable"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.method.simulation.dft.core_electron_treatment": {
      "name": "core_electron_treatment",
      "description": "How the core electrons are described.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "all electron frozen core",
          "full all electron",
          "pseudopotential",
          "unavailable"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.method.simulation.dft.spin_polarized": {
      "name": "spin_polarized",
      "description": "Whether the calculation is spin-polarized.",
      "type": {
        "type_kind": "python",
        "type_data": "bool"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "results.method.simulation.dft.scf_threshold_energy_change": {
      "name": "scf_threshold_energy_change",
      "description": "Specifies the threshold for the total energy change between two subsequent\nself-consistent field (SCF) iterations. The SCF is considered converged when the\ntotal-energy change between two SCF cycles is below the threshold (possibly in\ncombination with other criteria).",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "joule",
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.method.simulation.dft.van_der_Waals_method": {
      "name": "van_der_Waals_method",
      "description": "The used van der Waals method.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.method.simulation.dft.relativity_method": {
      "name": "relativity_method",
      "description": "Describes the relativistic treatment used for the calculation of the final energy\nand related quantities. If skipped or empty, no relativistic treatment is applied.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "pseudo_scalar_relativistic",
          "scalar_relativistic",
          "scalar_relativistic_atomic_ZORA"
        ]
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.method.simulation.dft.smearing_kind": {
      "name": "smearing_kind",
      "description": "Specifies the kind of smearing on the electron occupation used to calculate the\nfree energy (see energy_free)\n\nValid values are:\n\n| Smearing kind             | Description                       |\n\n| ------------------------- | --------------------------------- |\n\n| `\"empty\"`                 | No smearing is applied            |\n\n| `\"gaussian\"`              | Gaussian smearing                 |\n\n| `\"fermi\"`                 | Fermi smearing                    |\n\n| `\"marzari-vanderbilt\"`    | Marzari-Vanderbilt smearing       |\n\n| `\"methfessel-paxton\"`     | Methfessel-Paxton smearing        |\n\n| `\"tetrahedra\"`            | Interpolation of state energies and occupations\n(ignores smearing_width) |",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.method.simulation.dft.smearing_width": {
      "name": "smearing_width",
      "description": "Specifies the width of the smearing in energy for the electron occupation used to\ncalculate the free energy (see energy_free).\n\n*NOTE:* Not all methods specified in smearing_kind uses this value.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.method.simulation.dft.jacobs_ladder": {
      "name": "jacobs_ladder",
      "description": "Functional classification in line with Jacob's Ladder.\nFor more information, see https://doi.org/10.1063/1.1390175 (original paper);\nhttps://doi.org/10.1103/PhysRevLett.91.146401 (meta-GGA);\nand https://doi.org/10.1063/1.1904565 (hyper-GGA).",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "GGA",
          "LDA",
          "hybrid",
          "hyper-GGA",
          "meta-GGA",
          "not processed",
          "unavailable"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "results.method.simulation.dft.xc_functional_type": {
      "name": "xc_functional_type",
      "description": "Functional classification in line with Jacob's Ladder.\nFor more information, see https://doi.org/10.1063/1.1390175 (original paper);\nhttps://doi.org/10.1103/PhysRevLett.91.146401 (meta-GGA);\nand https://doi.org/10.1063/1.1904565 (hyper-GGA).",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "GGA",
          "LDA",
          "hybrid",
          "hyper-GGA",
          "meta-GGA",
          "not processed",
          "unavailable"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "results.method.simulation.dft.xc_functional_names": {
      "name": "xc_functional_names",
      "description": "The list of libXC functional names that where used in this entry.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.method.simulation.dft.exact_exchange_mixing_factor": {
      "name": "exact_exchange_mixing_factor",
      "description": "Amount of exact exchange mixed in with the XC functional (value range = [0,1]).",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.method.simulation.dft.hubbard_kanamori_model.u_effective": {
      "name": "u_effective",
      "description": "Value of the effective U parameter (u - j).",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "joule",
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.method.simulation.dft.hubbard_kanamori_model.u": {
      "name": "u",
      "description": "Value of the (intraorbital) Hubbard interaction",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "joule",
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.method.simulation.dft.hubbard_kanamori_model.j": {
      "name": "j",
      "description": "Value of the exchange interaction. In rotational invariant systems, j = jh.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "joule",
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.method.simulation.tb.type": {
      "name": "type",
      "description": "Tight-binding model type: Slater Koster fitting, DFTB approximation, xTB perturbation\ntheory, or Wannier projection.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "DFTB",
          "Slater-Koster",
          "Wannier",
          "not processed",
          "xTB"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.method.simulation.tb.localization_type": {
      "name": "localization_type",
      "description": "Localization type of the Wannier orbitals.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "maximally_localized",
          "single_shot"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.method.simulation.gw.type": {
      "name": "type",
      "description": "GW Hedin's self-consistency cycle:\n\n| Name      | Description                      | Reference             |\n\n| --------- | -------------------------------- | --------------------- |\n\n| `'G0W0'`  | single-shot                      | PRB 74, 035101 (2006) |\n\n| `'scGW'`  | self-consistent G and W               | PRB 75, 235102 (2007) |\n\n| `'scGW0'` | self-consistent G with fixed W0  | PRB 54, 8411 (1996)   |\n\n| `'scG0W'` | self-consistent W with fixed G0  | -                     |\n\n| `'ev-scGW0'`  | eigenvalues self-consistent G with fixed W0   | PRB 34, 5390 (1986)   |\n\n| `'ev-scGW'`  | eigenvalues self-consistent G and W   | PRB 74, 045102 (2006)   |\n\n| `'qp-scGW0'`  | quasiparticle self-consistent G with fixed W0 | PRL 99, 115109 (2007) |\n\n| `'qp-scGW'`  | quasiparticle self-consistent G and W | PRL 96, 226402 (2006) |",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "G0W0",
          "ev-scGW",
          "ev-scGW0",
          "qp-scGW",
          "qp-scGW0",
          "scG0W",
          "scGW",
          "scGW0"
        ]
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.method.simulation.gw.basis_set_type": {
      "name": "basis_set_type",
      "description": "The used basis set functions.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "(L)APW+lo",
          "gaussians",
          "not processed",
          "numeric AOs",
          "plane waves",
          "psinc functions",
          "real-space grid",
          "unavailable"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.method.simulation.gw.starting_point_type": {
      "name": "starting_point_type",
      "description": "The libXC based xc functional classification used in the starting point DFT simulation.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "GGA",
          "HF",
          "LDA",
          "hybrid",
          "hyper-GGA",
          "meta-GGA",
          "not processed",
          "unavailable"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "results.method.simulation.gw.starting_point_names": {
      "name": "starting_point_names",
      "description": "The list of libXC functional names that where used in this entry.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.method.simulation.bse.type": {
      "name": "type",
      "description": "Type of BSE hamiltonian solved:\n\n    H_BSE = H_diagonal + 2 * gx * Hx - gc * Hc\n\nwhere gx, gc specifies the type.\n\nOnline resources for the theory:\n- http://exciting.wikidot.com/carbon-excited-states-from-bse#toc1\n- https://www.vasp.at/wiki/index.php/Bethe-Salpeter-equations_calculations\n- https://docs.abinit.org/theory/bse/\n- https://www.yambo-code.eu/wiki/index.php/Bethe-Salpeter_kernel\n\n| Name | Description |\n\n| --------- | ----------------------- |\n\n| `'Singlet'` | gx = 1, gc = 1 |\n\n| `'Triplet'` | gx = 0, gc = 1 |\n\n| `'IP'` | Independent-particle approach |\n\n| `'RPA'` | Random Phase Approximation |",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "IP",
          "RPA",
          "Singlet",
          "Triplet"
        ]
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.method.simulation.bse.basis_set_type": {
      "name": "basis_set_type",
      "description": "The used basis set functions.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "(L)APW+lo",
          "gaussians",
          "not processed",
          "numeric AOs",
          "plane waves",
          "psinc functions",
          "real-space grid",
          "unavailable"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.method.simulation.bse.starting_point_type": {
      "name": "starting_point_type",
      "description": "The libXC based xc functional classification used in the starting point DFT simulation.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "GGA",
          "HF",
          "LDA",
          "hybrid",
          "hyper-GGA",
          "meta-GGA",
          "not processed",
          "unavailable"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "results.method.simulation.bse.starting_point_names": {
      "name": "starting_point_names",
      "description": "The list of libXC functional names that where used in this entry.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.method.simulation.bse.solver": {
      "name": "solver",
      "description": "Solver algotithm used to diagonalize the BSE Hamiltonian.\n\n| Name | Description | Reference |\n\n| --------- | ----------------------- | ----------- |\n\n| `'Full-diagonalization'` | Full diagonalization of the BSE Hamiltonian | - |\n\n| `'Lanczos-Haydock'` | Subspace iterative Lanczos-Haydock algorithm | https://doi.org/10.1103/PhysRevB.59.5441 |\n\n| `'GMRES'` | Generalized minimal residual method | https://doi.org/10.1137/0907058 |\n\n| `'SLEPc'` | Scalable Library for Eigenvalue Problem Computations | https://slepc.upv.es/ |\n\n| `'TDA'` | Tamm-Dancoff approximation | https://doi.org/10.1016/S0009-2614(99)01149-5 |",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "Full-diagonalization",
          "GMRES",
          "Lanczos-Haydock",
          "SLEPc",
          "TDA"
        ]
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.method.simulation.bse.gw_type": {
      "name": "gw_type",
      "description": "GW Hedin's self-consistency cycle:\n\n| Name      | Description                      | Reference             |\n\n| --------- | -------------------------------- | --------------------- |\n\n| `'G0W0'`  | single-shot                      | PRB 74, 035101 (2006) |\n\n| `'scGW'`  | self-consistent G and W               | PRB 75, 235102 (2007) |\n\n| `'scGW0'` | self-consistent G with fixed W0  | PRB 54, 8411 (1996)   |\n\n| `'scG0W'` | self-consistent W with fixed G0  | -                     |\n\n| `'ev-scGW0'`  | eigenvalues self-consistent G with fixed W0   | PRB 34, 5390 (1986)   |\n\n| `'ev-scGW'`  | eigenvalues self-consistent G and W   | PRB 74, 045102 (2006)   |\n\n| `'qp-scGW0'`  | quasiparticle self-consistent G with fixed W0 | PRL 99, 115109 (2007) |\n\n| `'qp-scGW'`  | quasiparticle self-consistent G and W | PRL 96, 226402 (2006) |",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "G0W0",
          "ev-scGW",
          "ev-scGW0",
          "qp-scGW",
          "qp-scGW0",
          "scG0W",
          "scGW",
          "scGW0"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.method.simulation.dmft.impurity_solver_type": {
      "name": "impurity_solver_type",
      "description": "Impurity solver method used in the DMFT loop:\n\n| Name              | Reference                            |\n\n| ----------------- | ------------------------------------ |\n\n| `'CT-INT'`        | Rubtsov et al., JEPT Lett 80 (2004)  |\n\n| `'CT-HYB'`        | Werner et al., PRL 97 (2006)         |\n\n| `'CT-AUX'`        | Gull et al., EPL 82 (2008)           |\n\n| `'ED'`            | Caffarrel et al, PRL 72 (1994)       |\n\n| `'NRG'`           | Bulla et al., RMP 80 (2008)          |\n\n| `'MPS'`           | Ganahl et al., PRB 90 (2014)         |\n\n| `'IPT'`           | Georges et al., PRB 45 (1992)        |\n\n| `'NCA'`           | Pruschke et al., PRB 47 (1993)       |\n\n| `'OCA'`           | Pruschke et al., PRB 47 (1993)       |\n\n| `'slave_bosons'`  | Kotliar et al., PRL 57 (1986)        |\n\n| `'hubbard_I'`     | -                                    |",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "CT-AUX",
          "CT-HYB",
          "CT-INT",
          "ED",
          "IPT",
          "MPS",
          "NCA",
          "NRG",
          "OCA",
          "hubbard_I",
          "slave_bosons"
        ]
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.method.simulation.dmft.inverse_temperature": {
      "name": "inverse_temperature",
      "description": "Inverse temperature = 1/(kB*T).",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "1 / joule",
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.method.simulation.dmft.magnetic_state": {
      "name": "magnetic_state",
      "description": "Magnetic state in which the DMFT calculation is done.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "antiferromagnetic",
          "ferromagnetic",
          "paramagnetic"
        ]
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.method.simulation.dmft.u": {
      "name": "u",
      "description": "Value of the (intraorbital) Hubbard interaction",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "joule",
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.method.simulation.dmft.jh": {
      "name": "jh",
      "description": "Value of the (interorbital) Hund's coupling.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "joule",
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.method.simulation.dmft.analytical_continuation": {
      "name": "analytical_continuation",
      "description": "Analytical continuation used to continuate the imaginary space Green's functions into\nthe real frequencies space.\n\n| Name           | Description         | Reference                        |\n\n| -------------- | ------------------- | -------------------------------- |\n\n| `'Pade'` | Pade's approximant  | https://www.sciencedirect.com/science/article/pii/0021999173901277?via%3Dihub |\n\n| `'MaxEnt'` | Maximum Entropy method | https://journals.aps.org/prb/abstract/10.1103/PhysRevB.41.2380 |\n\n| `'SVD'` | Singular value decomposition | https://journals.aps.org/prl/abstract/10.1103/PhysRevLett.75.517 |\n\n| `'Stochastic'` | Stochastic method | https://journals.aps.org/prb/abstract/10.1103/PhysRevB.57.10287 |",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "MaxEnt",
          "Pade",
          "SVD",
          "Stochastic"
        ]
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "results.method.simulation.precision.k_line_density": {
      "name": "k_line_density",
      "description": "Amount of sampled k-points per unit reciprocal length along each axis.\nContains the least precise density out of all axes.\nShould only be compared between calulations of similar dimensionality.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "meter",
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.method.simulation.precision.native_tier": {
      "name": "native_tier",
      "description": "The code-specific tag indicating the precision used\nfor the basis set and meshes of numerical routines.\n\nSupported codes (with hyperlinks to the relevant documentation):\n- [`VASP`](https://www.vasp.at/wiki/index.php/PREC)\n- `FHI-aims`\n- [`CASTEP`](http://www.tcm.phy.cam.ac.uk/castep/documentation/WebHelp/CASTEP.html#modules/castep/tskcastepsetelecquality.htm?Highlight=ultra-fine)",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "results.method.simulation.precision.basis_set": {
      "name": "basis_set",
      "description": "The type of basis set used by the program.\n\n| Value                          |                       Description |\n| ------------------------------ | --------------------------------- |\n| `'APW'`                        | Augmented plane waves             |\n| `'LAPW'`                       | Linearized augmented plane waves  |\n| `'APW+lo'`             | Augmented plane waves with local orbitals |\n| `'LAPW+lo'` | Linearized augmented plane waves with local orbitals |\n| `'(L)APW'`                     |     A combination of APW and LAPW |\n| `'(L)APW+lo'`  | A combination of APW and LAPW with local orbitals |\n| `'plane waves'`                | Plane waves                       |\n| `'gaussians + plane waves'`    | Basis set of the Quickstep algorithm (DOI: 10.1016/j.cpc.2004.12.014) |\n| `'real-space grid'`            | Real-space grid                   |\n| `'suppport functions'`         | Support functions                 |",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "(L)APW",
          "(L)APW+lo",
          "APW",
          "APW+lo",
          "LAPW",
          "LAPW+lo",
          "atom-centered orbitals",
          "gaussians + plane waves",
          "not processed",
          "plane waves",
          "real-space grid",
          "support functions",
          "unavailable"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.method.simulation.precision.planewave_cutoff": {
      "name": "planewave_cutoff",
      "description": "Spherical cutoff in reciprocal space for a plane-wave basis set. It is the energy\nof the highest plane-wave ($\\frac{\\hbar^2|k+G|^2}{2m_e}$) included in the basis\nset.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "joule",
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.method.simulation.precision.apw_cutoff": {
      "name": "apw_cutoff",
      "description": "The spherical cutoff parameter for the interstitial plane waves in the LAPW family.\nThis cutoff is unitless, referring to the product of the smallest muffin-tin radius\nand the length of the cutoff reciprocal vector ($r_{MT} * |K_{cut}|$).",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.method.measurement.xrd.diffraction_method_name": {
      "name": "diffraction_method_name",
      "description": "The diffraction method used to obtain the diffraction pattern.\n| X-Ray Diffraction Method                                   | Description                                                                                                                                                                                                 |\n|------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Powder X-Ray Diffraction (PXRD)**                        | The term \"powder\" refers more to the random orientation of small crystallites than to the physical form of the sample. Can be used with non-powder samples if they present random crystallite orientations. |\n| **Single Crystal X-Ray Diffraction (SCXRD)**               | Used for determining the atomic structure of a single crystal.                                                                                                                                              |\n| **High-Resolution X-Ray Diffraction (HRXRD)**              | A technique typically used for detailed characterization of epitaxial thin films using precise diffraction measurements.                                                                                    |\n| **Small-Angle X-Ray Scattering (SAXS)**                    | Used for studying nanostructures in the size range of 1-100 nm. Provides information on particle size, shape, and distribution.                                                                             |\n| **X-Ray Reflectivity (XRR)**                               | Used to study thin film layers, interfaces, and multilayers. Provides info on film thickness, density, and roughness.                                                                                       |\n| **Grazing Incidence X-Ray Diffraction (GIXRD)**            | Primarily used for the analysis of thin films with the incident beam at a fixed shallow angle.                                                                                                              |\n| **Reciprocal Space Mapping (RSM)**                         | High-resolution XRD method to measure diffracted intensity in a 2-dimensional region of reciprocal space. Provides information about the real-structure (lattice mismatch, domain structure, stress and defects) in single-crystalline and epitaxial samples.|",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "Grazing Incidence X-Ray Diffraction (GIXRD)",
          "High-Resolution X-Ray Diffraction (HRXRD)",
          "Powder X-Ray Diffraction (PXRD)",
          "Reciprocal Space Mapping (RSM)",
          "Single Crystal X-Ray Diffraction (SCXRD)",
          "Small-Angle X-Ray Scattering (SAXS)",
          "X-Ray Reflectivity (XRR)",
          "unavailable"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.properties.n_calculations": {
      "name": "n_calculations",
      "description": "The number of performed single configuration calculations.'",
      "type": {
        "type_kind": "python",
        "type_data": "int"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.available_properties": {
      "name": "available_properties",
      "description": "Subset of the property names that are present in this entry.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "0..*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.structural.radial_distribution_function.type": {
      "name": "type",
      "description": "Describes if the observable is calculated at the molecular or atomic level.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "atomic",
          "molecular"
        ]
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.properties.structural.radial_distribution_function.label": {
      "name": "label",
      "description": "Describes the atoms or molecule types involved in determining the property.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.properties.structural.radial_distribution_function.provenance.label": {
      "name": "label",
      "description": "Class or type of the provenance.\nCan be used to add further description to the provenance.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.structural.radial_distribution_function.provenance.molecular_dynamics.time_step": {
      "name": "time_step",
      "description": "The timestep at which the numerical integration is performed.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "second",
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.structural.radial_distribution_function.provenance.molecular_dynamics.ensemble_type": {
      "name": "ensemble_type",
      "description": "The type of thermodynamic ensemble that was simulated.\n\nAllowed values are:\n\n| Thermodynamic Ensemble          | Description                               |\n\n| ---------------------- | ----------------------------------------- |\n\n| `\"NVE\"`           | Constant number of particles, volume, and energy |\n\n| `\"NVT\"`           | Constant number of particles, volume, and temperature |\n\n| `\"NPT\"`           | Constant number of particles, pressure, and temperature |\n\n| `\"NPH\"`           | Constant number of particles, pressure, and enthalpy |",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "NPH",
          "NPT",
          "NVE",
          "NVT"
        ]
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.structural.radius_of_gyration.kind": {
      "name": "kind",
      "description": "Kind of the quantity.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.properties.structural.radius_of_gyration.label": {
      "name": "label",
      "description": "Describes the atoms or molecule types involved in determining the property.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.properties.structural.radius_of_gyration.provenance.label": {
      "name": "label",
      "description": "Class or type of the provenance.\nCan be used to add further description to the provenance.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.structural.radius_of_gyration.provenance.molecular_dynamics.time_step": {
      "name": "time_step",
      "description": "The timestep at which the numerical integration is performed.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "second",
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.structural.radius_of_gyration.provenance.molecular_dynamics.ensemble_type": {
      "name": "ensemble_type",
      "description": "The type of thermodynamic ensemble that was simulated.\n\nAllowed values are:\n\n| Thermodynamic Ensemble          | Description                               |\n\n| ---------------------- | ----------------------------------------- |\n\n| `\"NVE\"`           | Constant number of particles, volume, and energy |\n\n| `\"NVT\"`           | Constant number of particles, volume, and temperature |\n\n| `\"NPT\"`           | Constant number of particles, pressure, and temperature |\n\n| `\"NPH\"`           | Constant number of particles, pressure, and enthalpy |",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "NPH",
          "NPT",
          "NVE",
          "NVT"
        ]
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.structural.diffraction_pattern.incident_beam_wavelength": {
      "name": "incident_beam_wavelength",
      "description": "The wavelength of the incident beam.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "meter",
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.dynamical.mean_squared_displacement.type": {
      "name": "type",
      "description": "Describes if the observable is calculated at the molecular or atomic level.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "atomic",
          "molecular"
        ]
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.properties.dynamical.mean_squared_displacement.label": {
      "name": "label",
      "description": "Describes the atoms or molecule types involved in determining the property.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.properties.dynamical.mean_squared_displacement.provenance.label": {
      "name": "label",
      "description": "Class or type of the provenance.\nCan be used to add further description to the provenance.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.dynamical.mean_squared_displacement.provenance.molecular_dynamics.time_step": {
      "name": "time_step",
      "description": "The timestep at which the numerical integration is performed.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "second",
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.dynamical.mean_squared_displacement.provenance.molecular_dynamics.ensemble_type": {
      "name": "ensemble_type",
      "description": "The type of thermodynamic ensemble that was simulated.\n\nAllowed values are:\n\n| Thermodynamic Ensemble          | Description                               |\n\n| ---------------------- | ----------------------------------------- |\n\n| `\"NVE\"`           | Constant number of particles, volume, and energy |\n\n| `\"NVT\"`           | Constant number of particles, volume, and temperature |\n\n| `\"NPT\"`           | Constant number of particles, pressure, and temperature |\n\n| `\"NPH\"`           | Constant number of particles, pressure, and enthalpy |",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "NPH",
          "NPT",
          "NVE",
          "NVT"
        ]
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.structures.structure_original.nperiodic_dimensions": {
      "name": "nperiodic_dimensions",
      "description": "An integer specifying the number of periodic dimensions in the\nstructure, equivalent to the number of non-zero entries in\ndimension_types.",
      "type": {
        "type_kind": "python",
        "type_data": "int"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.structures.structure_original.n_sites": {
      "name": "n_sites",
      "description": "An integer specifying the length of the cartesian_site_positions property.",
      "type": {
        "type_kind": "python",
        "type_data": "int"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.structures.structure_original.cell_volume": {
      "name": "cell_volume",
      "description": "Volume of the cell.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "meter ** 3",
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.structures.structure_original.lattice_parameters.a": {
      "name": "a",
      "description": "Length of the first basis vector.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "meter",
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.structures.structure_original.lattice_parameters.b": {
      "name": "b",
      "description": "Length of the second basis vector.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "meter",
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.structures.structure_original.lattice_parameters.c": {
      "name": "c",
      "description": "Length of the third basis vector.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "meter",
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.structures.structure_original.lattice_parameters.alpha": {
      "name": "alpha",
      "description": "Angle between second and third basis vector.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "radian",
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.structures.structure_original.lattice_parameters.beta": {
      "name": "beta",
      "description": "Angle between first and third basis vector.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "radian",
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.structures.structure_original.lattice_parameters.gamma": {
      "name": "gamma",
      "description": "Angle between first and second basis vector.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "radian",
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.structures.structure_conventional.nperiodic_dimensions": {
      "name": "nperiodic_dimensions",
      "description": "An integer specifying the number of periodic dimensions in the\nstructure, equivalent to the number of non-zero entries in\ndimension_types.",
      "type": {
        "type_kind": "python",
        "type_data": "int"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.structures.structure_conventional.n_sites": {
      "name": "n_sites",
      "description": "An integer specifying the length of the cartesian_site_positions property.",
      "type": {
        "type_kind": "python",
        "type_data": "int"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.structures.structure_conventional.cell_volume": {
      "name": "cell_volume",
      "description": "Volume of the cell.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "meter ** 3",
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.structures.structure_conventional.lattice_parameters.a": {
      "name": "a",
      "description": "Length of the first basis vector.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "meter",
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.structures.structure_conventional.lattice_parameters.b": {
      "name": "b",
      "description": "Length of the second basis vector.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "meter",
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.structures.structure_conventional.lattice_parameters.c": {
      "name": "c",
      "description": "Length of the third basis vector.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "meter",
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.structures.structure_conventional.lattice_parameters.alpha": {
      "name": "alpha",
      "description": "Angle between second and third basis vector.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "radian",
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.structures.structure_conventional.lattice_parameters.beta": {
      "name": "beta",
      "description": "Angle between first and third basis vector.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "radian",
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.structures.structure_conventional.lattice_parameters.gamma": {
      "name": "gamma",
      "description": "Angle between first and second basis vector.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "radian",
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.structures.structure_primitive.nperiodic_dimensions": {
      "name": "nperiodic_dimensions",
      "description": "An integer specifying the number of periodic dimensions in the\nstructure, equivalent to the number of non-zero entries in\ndimension_types.",
      "type": {
        "type_kind": "python",
        "type_data": "int"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.structures.structure_primitive.n_sites": {
      "name": "n_sites",
      "description": "An integer specifying the length of the cartesian_site_positions property.",
      "type": {
        "type_kind": "python",
        "type_data": "int"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.structures.structure_primitive.cell_volume": {
      "name": "cell_volume",
      "description": "Volume of the cell.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "meter ** 3",
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.structures.structure_primitive.lattice_parameters.a": {
      "name": "a",
      "description": "Length of the first basis vector.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "meter",
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.structures.structure_primitive.lattice_parameters.b": {
      "name": "b",
      "description": "Length of the second basis vector.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "meter",
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.structures.structure_primitive.lattice_parameters.c": {
      "name": "c",
      "description": "Length of the third basis vector.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "meter",
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.structures.structure_primitive.lattice_parameters.alpha": {
      "name": "alpha",
      "description": "Angle between second and third basis vector.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "radian",
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.structures.structure_primitive.lattice_parameters.beta": {
      "name": "beta",
      "description": "Angle between first and third basis vector.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "radian",
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.structures.structure_primitive.lattice_parameters.gamma": {
      "name": "gamma",
      "description": "Angle between first and second basis vector.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "radian",
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.electronic.band_gap.index": {
      "name": "index",
      "description": "The spin channel index.",
      "type": {
        "type_kind": "numpy",
        "type_data": "int32"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.electronic.band_gap.value": {
      "name": "value",
      "description": "The actual value of the band gap. Value of zero indicates a vanishing band gap and\nis distinct from sources lacking any band gap measurement or calculation.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "joule",
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.electronic.band_gap.type": {
      "name": "type",
      "description": "Band gap type.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "direct",
          "indirect"
        ]
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.electronic.band_gap.provenance.label": {
      "name": "label",
      "description": "Class or type of the provenance.\nCan be used to add further description to the provenance.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.electronic.dos_electronic.spin_polarized": {
      "name": "spin_polarized",
      "description": "Whether the DOS is spin-polarized, i.e. is contains channels for both\nspin values.",
      "type": {
        "type_kind": "python",
        "type_data": "bool"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.electronic.dos_electronic.band_gap.index": {
      "name": "index",
      "description": "The spin channel index.",
      "type": {
        "type_kind": "numpy",
        "type_data": "int32"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.electronic.dos_electronic.band_gap.value": {
      "name": "value",
      "description": "The actual value of the band gap. Value of zero indicates a vanishing band gap and\nis distinct from sources lacking any band gap measurement or calculation.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "joule",
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.electronic.dos_electronic.band_gap.type": {
      "name": "type",
      "description": "Band gap type.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "direct",
          "indirect"
        ]
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.electronic.dos_electronic.band_gap.provenance.label": {
      "name": "label",
      "description": "Class or type of the provenance.\nCan be used to add further description to the provenance.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.electronic.dos_electronic_new.spin_polarized": {
      "name": "spin_polarized",
      "description": "Whether the DOS is spin-polarized, i.e. is contains channels for both\nspin values.",
      "type": {
        "type_kind": "python",
        "type_data": "bool"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.electronic.dos_electronic_new.has_projected": {
      "name": "has_projected",
      "description": "Whether the DOS has information about projections (species-, atom-, and/or orbital-\nprojected).",
      "type": {
        "type_kind": "python",
        "type_data": "bool"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.electronic.dos_electronic_new.data.band_gap.index": {
      "name": "index",
      "description": "The spin channel index.",
      "type": {
        "type_kind": "numpy",
        "type_data": "int32"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.electronic.dos_electronic_new.data.band_gap.value": {
      "name": "value",
      "description": "The actual value of the band gap. Value of zero indicates a vanishing band gap and\nis distinct from sources lacking any band gap measurement or calculation.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "joule",
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.electronic.dos_electronic_new.data.band_gap.type": {
      "name": "type",
      "description": "Band gap type.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "direct",
          "indirect"
        ]
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.electronic.dos_electronic_new.data.band_gap.provenance.label": {
      "name": "label",
      "description": "Class or type of the provenance.\nCan be used to add further description to the provenance.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.electronic.band_structure_electronic.spin_polarized": {
      "name": "spin_polarized",
      "description": "Whether the band structure is spin-polarized, i.e. is contains channels\nfor both spin values.",
      "type": {
        "type_kind": "python",
        "type_data": "bool"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.electronic.band_structure_electronic.band_gap.index": {
      "name": "index",
      "description": "The spin channel index.",
      "type": {
        "type_kind": "numpy",
        "type_data": "int32"
      },
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.electronic.band_structure_electronic.band_gap.value": {
      "name": "value",
      "description": "The actual value of the band gap. Value of zero indicates a vanishing band gap and\nis distinct from sources lacking any band gap measurement or calculation.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "joule",
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.electronic.band_structure_electronic.band_gap.type": {
      "name": "type",
      "description": "Band gap type.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "direct",
          "indirect"
        ]
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.electronic.band_structure_electronic.band_gap.provenance.label": {
      "name": "label",
      "description": "Class or type of the provenance.\nCan be used to add further description to the provenance.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.magnetic.spin_spin_coupling.source": {
      "name": "source",
      "description": "Identifier for the source of the data: 'experiment' or 'simulation'.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "experiment",
          "simulation"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.properties.magnetic.magnetic_susceptibility.source": {
      "name": "source",
      "description": "Identifier for the source of the data: 'experiment' or 'simulation'.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "experiment",
          "simulation"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.properties.optoelectronic.solar_cell.efficiency": {
      "name": "efficiency",
      "description": "Power conversion effciency of a solar cell in percentage %.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.optoelectronic.solar_cell.fill_factor": {
      "name": "fill_factor",
      "description": "Fill factor of a solar cell in absolute values (from 0 to 1).",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.optoelectronic.solar_cell.open_circuit_voltage": {
      "name": "open_circuit_voltage",
      "description": "Open circuit voltage of a solar cell.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "volt",
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.optoelectronic.solar_cell.short_circuit_current_density": {
      "name": "short_circuit_current_density",
      "description": "Short circuit current density of a solar cell.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "ampere / meter ** 2",
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.optoelectronic.solar_cell.illumination_intensity": {
      "name": "illumination_intensity",
      "description": "The light intensity during the IV measurement.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "watt / meter ** 2",
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.optoelectronic.solar_cell.device_area": {
      "name": "device_area",
      "description": "The total area of the cell during IV and stability measurements under illumination.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "meter ** 2",
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.optoelectronic.solar_cell.device_architecture": {
      "name": "device_architecture",
      "description": "Device architecture of the solar cell. Examples are:\n`pn-Heterojunction`, `pin`, `nip`, ...",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.properties.optoelectronic.solar_cell.device_stack": {
      "name": "device_stack",
      "description": "Layers of the entire device.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "0..*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.properties.optoelectronic.solar_cell.absorber": {
      "name": "absorber",
      "description": "Absorber layers used in the solar cell.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "0..*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.properties.optoelectronic.solar_cell.absorber_fabrication": {
      "name": "absorber_fabrication",
      "description": "Technique describing the fabrication of the absorber layer. Examples are:\n`Spin-coating`, `Evaporation`, `Doctor blading`, ...",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "0..*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.properties.optoelectronic.solar_cell.electron_transport_layer": {
      "name": "electron_transport_layer",
      "description": "Electron selective contact layers used in the solar cell.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "0..*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.properties.optoelectronic.solar_cell.hole_transport_layer": {
      "name": "hole_transport_layer",
      "description": "Hole selective contact layers used in the solar cell.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "0..*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.properties.optoelectronic.solar_cell.substrate": {
      "name": "substrate",
      "description": "Substrate layers used in the solar cell.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "0..*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.properties.optoelectronic.solar_cell.back_contact": {
      "name": "back_contact",
      "description": "Back contact layers used in the solar cell.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "0..*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.properties.catalytic.reaction.name": {
      "name": "name",
      "description": "Name of the catalytic test reaction.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.properties.catalytic.reaction.type": {
      "name": "type",
      "description": "Classification of the catalytic test reaction such as Oxidation, Hydrogenation,\nIsomerization, Coupling...",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.properties.catalytic.reaction.reactants.name": {
      "name": "name",
      "description": "IUPAC name of the reagent.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.properties.catalytic.reaction.reactants.gas_concentration_in": {
      "name": "gas_concentration_in",
      "description": "Volumetric concentration (fraction) of the reagent in the feed gas.\nShould be a value between 0 and 1.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "shape": [
        "*"
      ],
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.catalytic.reaction.reactants.gas_concentration_out": {
      "name": "gas_concentration_out",
      "description": "Volumetric concentration (fraction) of the reagent after the reactor.\nShould be a value between 0 and 1.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "shape": [
        "*"
      ],
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.catalytic.reaction.reactants.conversion": {
      "name": "conversion",
      "description": "Conversion of the reactant, in %.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "shape": [
        "*"
      ],
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.catalytic.reaction.products.name": {
      "name": "name",
      "description": "Name of the product, preferably the IUPAC name.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.properties.catalytic.reaction.products.gas_concentration_in": {
      "name": "gas_concentration_in",
      "description": "Volumetric concentration (fraction) of the reagent in the feed gas.\nShould be a value between 0 and 1.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "shape": [
        "*"
      ],
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.catalytic.reaction.products.gas_concentration_out": {
      "name": "gas_concentration_out",
      "description": "Volumetric concentration (fraction) of the reagent after the reactor.\nShould be a value between 0 and 1.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "shape": [
        "*"
      ],
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.catalytic.reaction.products.selectivity": {
      "name": "selectivity",
      "description": "Selectivity of the product, in %.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "shape": [
        "*"
      ],
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.catalytic.reaction.products.space_time_yield": {
      "name": "space_time_yield",
      "description": "Space-time-yield of the product, in mass product per mass catalyst per time.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "1 / second",
      "shape": [
        "*"
      ],
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.catalytic.reaction.rates.name": {
      "name": "name",
      "description": "IUPAC name of the reagent whose rate is captured.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.properties.catalytic.reaction.rates.reaction_rate": {
      "name": "reaction_rate",
      "description": "The rate of the number of reactant or product molecules converted/produced,\nper mass of total catalyst, per time.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "mole / gram / second",
      "shape": [
        "*"
      ],
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.catalytic.reaction.rates.specific_mass_rate": {
      "name": "specific_mass_rate",
      "description": "The specific rate of the reactant, per mass of active catalyst component\n(e.g. metal).",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "mole / gram / second",
      "shape": [
        "*"
      ],
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.catalytic.reaction.rates.specific_surface_area_rate": {
      "name": "specific_surface_area_rate",
      "description": "The specific rate of the reactant, per surface area of active catalyst.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "mole / meter ** 2 / second",
      "shape": [
        "*"
      ],
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.catalytic.reaction.rates.turnover_frequency": {
      "name": "turnover_frequency",
      "description": "The turnover frequency, calculated from mol of reactant or product per\nnumber of sites over time.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "1 / second",
      "shape": [
        "*"
      ],
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.catalytic.reaction.reaction_conditions.temperature": {
      "name": "temperature",
      "description": "The reaction temperature(s) in the catalytic reactor during a chemical reaction.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "kelvin",
      "shape": [
        "*"
      ],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.catalytic.reaction.reaction_conditions.pressure": {
      "name": "pressure",
      "description": "The pressure during the catalytic test reaction.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "pascal",
      "shape": [
        "*"
      ],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.catalytic.reaction.reaction_conditions.weight_hourly_space_velocity": {
      "name": "weight_hourly_space_velocity",
      "description": "The weight hourly space velocity in 1/time (gas flow per catalyst mass).",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "milliliter / gram / second",
      "shape": [
        "*"
      ],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.catalytic.reaction.reaction_conditions.gas_hourly_space_velocity": {
      "name": "gas_hourly_space_velocity",
      "description": "The gas hourly space velocity in 1/time (gas flow per catalyst volume).",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "1 / second",
      "shape": [
        "*"
      ],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.catalytic.reaction.reaction_conditions.flow_rate": {
      "name": "flow_rate",
      "description": "The volumetric gas flow in volume per time.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "meter ** 3 / second",
      "shape": [
        "*"
      ],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.catalytic.reaction.reaction_conditions.time_on_stream": {
      "name": "time_on_stream",
      "description": "The time on stream of the catalyst in the catalytic reaction.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "second",
      "shape": [
        "*"
      ],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.catalytic.reaction.reaction_mechanism.initial_states": {
      "name": "initial_states",
      "description": "The names of reactants of the reaction or elementary step.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.properties.catalytic.reaction.reaction_mechanism.final_states": {
      "name": "final_states",
      "description": "The names of products of the reaction or elementary step.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.properties.catalytic.reaction.reaction_mechanism.reaction_enthalpy": {
      "name": "reaction_enthalpy",
      "description": "The reaction enthalpy of the reaction or reaction step.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "joule",
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.catalytic.reaction.reaction_mechanism.activation_energy": {
      "name": "activation_energy",
      "description": "The (apparent) activation energy of the catalyzed reaction or reaction step.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "joule",
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.catalytic.catalyst.catalyst_name": {
      "name": "catalyst_name",
      "description": "Custom name of catalyst.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.properties.catalytic.catalyst.preparation_method": {
      "name": "preparation_method",
      "description": "The main preparation method of the catalyst sample.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.properties.catalytic.catalyst.catalyst_type": {
      "name": "catalyst_type",
      "description": "The type of catalyst, wether metal or oxide, model, bulk, supported, ect.\nMultiple values can apply.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.properties.catalytic.catalyst.characterization_methods": {
      "name": "characterization_methods",
      "description": "A list of methods used to characterize the catalyst sample.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "results.properties.catalytic.catalyst.surface_area": {
      "name": "surface_area",
      "description": "The surface area per catalyst mass.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "meter ** 2 / gram",
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.mechanical.energy_volume_curve.type": {
      "name": "type",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "birch_euler",
          "birch_lagrange",
          "birch_murnaghan",
          "mie_gruneisen",
          "murnaghan",
          "pack_evans_james",
          "pourier_tarantola",
          "raw",
          "tait",
          "vinet"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.properties.mechanical.bulk_modulus.type": {
      "name": "type",
      "description": "Describes the methodology for obtaining the value.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "birch_euler",
          "birch_lagrange",
          "birch_murnaghan",
          "mie_gruneisen",
          "murnaghan",
          "pack_evans_james",
          "pourier_tarantola",
          "reuss_average",
          "tait",
          "vinet",
          "voigt_average",
          "voigt_reuss_hill_average"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.properties.mechanical.bulk_modulus.value": {
      "name": "value",
      "description": "Bulk modulus value.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "pascal",
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.mechanical.shear_modulus.type": {
      "name": "type",
      "description": "Describes the methodology for obtaining the value.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "reuss_average",
          "voigt_average",
          "voigt_reuss_hill_average"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.properties.mechanical.shear_modulus.value": {
      "name": "value",
      "description": "Shear modulus value.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "pascal",
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.thermodynamic.trajectory.available_properties": {
      "name": "available_properties",
      "description": "Subset of the property names that are present in this trajectory.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "energy_potential",
          "pressure",
          "temperature",
          "volume"
        ]
      },
      "shape": [
        "0..*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.thermodynamic.trajectory.provenance.label": {
      "name": "label",
      "description": "Class or type of the provenance.\nCan be used to add further description to the provenance.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.thermodynamic.trajectory.provenance.molecular_dynamics.time_step": {
      "name": "time_step",
      "description": "The timestep at which the numerical integration is performed.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "second",
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.thermodynamic.trajectory.provenance.molecular_dynamics.ensemble_type": {
      "name": "ensemble_type",
      "description": "The type of thermodynamic ensemble that was simulated.\n\nAllowed values are:\n\n| Thermodynamic Ensemble          | Description                               |\n\n| ---------------------- | ----------------------------------------- |\n\n| `\"NVE\"`           | Constant number of particles, volume, and energy |\n\n| `\"NVT\"`           | Constant number of particles, volume, and temperature |\n\n| `\"NPT\"`           | Constant number of particles, pressure, and temperature |\n\n| `\"NPH\"`           | Constant number of particles, pressure, and enthalpy |",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "NPH",
          "NPT",
          "NVE",
          "NVT"
        ]
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.spectroscopic.spectra.type": {
      "name": "type",
      "description": "Identifier for the methodology done to obtain the spectra data: EELS, XAS, XPS, etc.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "EELS",
          "EXAFS",
          "RXIS",
          "XANES",
          "XAS",
          "XES",
          "XPS",
          "unavailable"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.properties.spectroscopic.spectra.label": {
      "name": "label",
      "description": "Identifier for the source of the spectra data, either 'computation' or 'experiment'.",
      "type": {
        "type_kind": "enum",
        "type_data": [
          "computation",
          "experiment"
        ]
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.properties.spectroscopic.spectra.provenance.label": {
      "name": "label",
      "description": "Class or type of the provenance.\nCan be used to add further description to the provenance.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.spectroscopic.spectra.provenance.eels.detector_type": {
      "name": "detector_type",
      "description": "Detector type.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": false,
      "repeats": true,
      "suggestion": true
    },
    "results.properties.spectroscopic.spectra.provenance.eels.resolution": {
      "name": "resolution",
      "description": "Energy resolution of the detector.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "joule",
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.spectroscopic.spectra.provenance.eels.max_energy": {
      "name": "max_energy",
      "description": "Maximum energy of the detector.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "joule",
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.spectroscopic.spectra.provenance.eels.min_energy": {
      "name": "min_energy",
      "description": "Minimum energy of the detector.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "joule",
      "aggregatable": false,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.spectroscopic.spectra.provenance.electronic_structure.label": {
      "name": "label",
      "description": "Class or type of the provenance.\nCan be used to add further description to the provenance.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [],
      "aggregatable": true,
      "dynamic": false,
      "repeats": true
    },
    "results.properties.geometry_optimization.convergence_tolerance_energy_difference": {
      "name": "convergence_tolerance_energy_difference",
      "description": "The input energy difference tolerance criterion.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "joule",
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.geometry_optimization.convergence_tolerance_force_maximum": {
      "name": "convergence_tolerance_force_maximum",
      "description": "The input maximum net force tolerance criterion.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "newton",
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.geometry_optimization.final_force_maximum": {
      "name": "final_force_maximum",
      "description": "The maximum net force in the last optimization step.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "newton",
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.geometry_optimization.final_energy_difference": {
      "name": "final_energy_difference",
      "description": "The difference in the energy_total between the last two steps during\noptimization.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "joule",
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.properties.geometry_optimization.final_displacement_maximum": {
      "name": "final_displacement_maximum",
      "description": "The maximum displacement in the last optimization step with respect to previous.",
      "type": {
        "type_kind": "numpy",
        "type_data": "float64"
      },
      "unit": "meter",
      "shape": [],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.eln.sections": {
      "name": "sections",
      "description": "The type of sections used in entries to search for. By default these are the names\nof the used section definitions.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "results.eln.tags": {
      "name": "tags",
      "description": "Short tags that are useful to quickly search based on various\nuser defined criteria.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "results.eln.names": {
      "name": "names",
      "description": "Short human readable and descriptive names that appear in\nELN entries.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "*"
      ],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.eln.descriptions": {
      "name": "descriptions",
      "description": "'Human descriptions that appear in ELN entries.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "*"
      ],
      "aggregatable": false,
      "dynamic": false,
      "repeats": false
    },
    "results.eln.instruments": {
      "name": "instruments",
      "description": "The name or type of instrument used in an activity, e.g. process or\nmeasurement.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "results.eln.methods": {
      "name": "methods",
      "description": "The name or the applied method in an activity, e.g. process or measurement",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false
    },
    "results.eln.lab_ids": {
      "name": "lab_ids",
      "description": "The laboratory specific id for any item, e.g. sample, chemical, instrument.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "shape": [
        "*"
      ],
      "aggregatable": true,
      "dynamic": false,
      "repeats": false,
      "suggestion": true
    },
    "data.name#simulationworkflowschema.general.SimulationWorkflow": {
      "name": "name",
      "description": "A name of the task. Will be used as a label for the input or output in workflow representations.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": true,
      "repeats": false,
      "schema": "simulationworkflowschema.general.SimulationWorkflow"
    },
    "data.inputs.name#simulationworkflowschema.general.SimulationWorkflow": {
      "name": "name",
      "description": "Name of the link. Will be used as a label for the input or output in workflow representations.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": true,
      "repeats": true,
      "schema": "simulationworkflowschema.general.SimulationWorkflow"
    },
    "data.outputs.name#simulationworkflowschema.general.SimulationWorkflow": {
      "name": "name",
      "description": "Name of the link. Will be used as a label for the input or output in workflow representations.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": true,
      "repeats": true,
      "schema": "simulationworkflowschema.general.SimulationWorkflow"
    },
    "data.tasks.name#simulationworkflowschema.general.SimulationWorkflow": {
      "name": "name",
      "description": "A name of the task. Will be used as a label for the input or output in workflow representations.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": true,
      "repeats": true,
      "schema": "simulationworkflowschema.general.SimulationWorkflow"
    },
    "data.tasks.inputs.name#simulationworkflowschema.general.SimulationWorkflow": {
      "name": "name",
      "description": "Name of the link. Will be used as a label for the input or output in workflow representations.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": true,
      "repeats": true,
      "schema": "simulationworkflowschema.general.SimulationWorkflow"
    },
    "data.tasks.outputs.name#simulationworkflowschema.general.SimulationWorkflow": {
      "name": "name",
      "description": "Name of the link. Will be used as a label for the input or output in workflow representations.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": true,
      "repeats": true,
      "schema": "simulationworkflowschema.general.SimulationWorkflow"
    },
    "data.results.n_calculations#simulationworkflowschema.general.SimulationWorkflow": {
      "name": "n_calculations",
      "description": "Number of calculations in workflow.",
      "type": {
        "type_kind": "python",
        "type_data": "int"
      },
      "shape": [],
      "aggregatable": false,
      "dynamic": true,
      "repeats": false,
      "schema": "simulationworkflowschema.general.SimulationWorkflow"
    },
    "data.name#simulationworkflowschema.general.ParallelSimulation": {
      "name": "name",
      "description": "A name of the task. Will be used as a label for the input or output in workflow representations.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": true,
      "repeats": false,
      "schema": "simulationworkflowschema.general.ParallelSimulation"
    },
    "data.inputs.name#simulationworkflowschema.general.ParallelSimulation": {
      "name": "name",
      "description": "Name of the link. Will be used as a label for the input or output in workflow representations.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": true,
      "repeats": true,
      "schema": "simulationworkflowschema.general.ParallelSimulation"
    },
    "data.outputs.name#simulationworkflowschema.general.ParallelSimulation": {
      "name": "name",
      "description": "Name of the link. Will be used as a label for the input or output in workflow representations.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": true,
      "repeats": true,
      "schema": "simulationworkflowschema.general.ParallelSimulation"
    },
    "data.tasks.name#simulationworkflowschema.general.ParallelSimulation": {
      "name": "name",
      "description": "A name of the task. Will be used as a label for the input or output in workflow representations.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": true,
      "repeats": true,
      "schema": "simulationworkflowschema.general.ParallelSimulation"
    },
    "data.tasks.inputs.name#simulationworkflowschema.general.ParallelSimulation": {
      "name": "name",
      "description": "Name of the link. Will be used as a label for the input or output in workflow representations.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": true,
      "repeats": true,
      "schema": "simulationworkflowschema.general.ParallelSimulation"
    },
    "data.tasks.outputs.name#simulationworkflowschema.general.ParallelSimulation": {
      "name": "name",
      "description": "Name of the link. Will be used as a label for the input or output in workflow representations.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": true,
      "repeats": true,
      "schema": "simulationworkflowschema.general.ParallelSimulation"
    },
    "data.results.n_calculations#simulationworkflowschema.general.ParallelSimulation": {
      "name": "n_calculations",
      "description": "Number of calculations in workflow.",
      "type": {
        "type_kind": "python",
        "type_data": "int"
      },
      "shape": [],
      "aggregatable": false,
      "dynamic": true,
      "repeats": false,
      "schema": "simulationworkflowschema.general.ParallelSimulation"
    },
    "data.name#simulationworkflowschema.general.SerialSimulation": {
      "name": "name",
      "description": "A name of the task. Will be used as a label for the input or output in workflow representations.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": true,
      "repeats": false,
      "schema": "simulationworkflowschema.general.SerialSimulation"
    },
    "data.inputs.name#simulationworkflowschema.general.SerialSimulation": {
      "name": "name",
      "description": "Name of the link. Will be used as a label for the input or output in workflow representations.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": true,
      "repeats": true,
      "schema": "simulationworkflowschema.general.SerialSimulation"
    },
    "data.outputs.name#simulationworkflowschema.general.SerialSimulation": {
      "name": "name",
      "description": "Name of the link. Will be used as a label for the input or output in workflow representations.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": true,
      "repeats": true,
      "schema": "simulationworkflowschema.general.SerialSimulation"
    },
    "data.tasks.name#simulationworkflowschema.general.SerialSimulation": {
      "name": "name",
      "description": "A name of the task. Will be used as a label for the input or output in workflow representations.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": true,
      "repeats": true,
      "schema": "simulationworkflowschema.general.SerialSimulation"
    },
    "data.tasks.inputs.name#simulationworkflowschema.general.SerialSimulation": {
      "name": "name",
      "description": "Name of the link. Will be used as a label for the input or output in workflow representations.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": true,
      "repeats": true,
      "schema": "simulationworkflowschema.general.SerialSimulation"
    },
    "data.tasks.outputs.name#simulationworkflowschema.general.SerialSimulation": {
      "name": "name",
      "description": "Name of the link. Will be used as a label for the input or output in workflow representations.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": true,
      "repeats": true,
      "schema": "simulationworkflowschema.general.SerialSimulation"
    },
    "data.results.n_calculations#simulationworkflowschema.general.SerialSimulation": {
      "name": "n_calculations",
      "description": "Number of calculations in workflow.",
      "type": {
        "type_kind": "python",
        "type_data": "int"
      },
      "shape": [],
      "aggregatable": false,
      "dynamic": true,
      "repeats": false,
      "schema": "simulationworkflowschema.general.SerialSimulation"
    },
    "data.name#simulationworkflowschema.general.BeyondDFT": {
      "name": "name",
      "description": "A name of the task. Will be used as a label for the input or output in workflow representations.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": true,
      "repeats": false,
      "schema": "simulationworkflowschema.general.BeyondDFT"
    },
    "data.inputs.name#simulationworkflowschema.general.BeyondDFT": {
      "name": "name",
      "description": "Name of the link. Will be used as a label for the input or output in workflow representations.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": true,
      "repeats": true,
      "schema": "simulationworkflowschema.general.BeyondDFT"
    },
    "data.outputs.name#simulationworkflowschema.general.BeyondDFT": {
      "name": "name",
      "description": "Name of the link. Will be used as a label for the input or output in workflow representations.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": true,
      "repeats": true,
      "schema": "simulationworkflowschema.general.BeyondDFT"
    },
    "data.tasks.name#simulationworkflowschema.general.BeyondDFT": {
      "name": "name",
      "description": "A name of the task. Will be used as a label for the input or output in workflow representations.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": true,
      "repeats": true,
      "schema": "simulationworkflowschema.general.BeyondDFT"
    },
    "data.tasks.inputs.name#simulationworkflowschema.general.BeyondDFT": {
      "name": "name",
      "description": "Name of the link. Will be used as a label for the input or output in workflow representations.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": true,
      "repeats": true,
      "schema": "simulationworkflowschema.general.BeyondDFT"
    },
    "data.tasks.outputs.name#simulationworkflowschema.general.BeyondDFT": {
      "name": "name",
      "description": "Name of the link. Will be used as a label for the input or output in workflow representations.",
      "type": {
        "type_kind": "python",
        "type_data": "str"
      },
      "aggregatable": true,
      "dynamic": true,
      "repeats": true,
      "schema": "simulationworkflowschema.general.BeyondDFT"
    },
    "data.results.n_calculations#simulationworkflowschema.general.BeyondDFT": {
      "name": "n_calculations",
      "description": "Number of calculations in workflow.",
      "type": {
        "type_kind": "python",
        "type_data": "int"
      },
      "shape": [],
      "aggregatable": false,
      "dynamic": true,
      "repeats": false,
      "schema": "simulationworkflowschema.general.BeyondDFT"
    },
    "results.material": {
      "name": "material",
      "description": "\n        Section containing information on the material composition and structure.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.material.elemental_composition": {
      "name": "elemental_composition",
      "description": "\n        Section containing information about the concentration of an element,\n        given by its atomic and mass fraction within the system or material.\n        ",
      "nested": true,
      "repeats": true
    },
    "results.material.symmetry": {
      "name": "symmetry",
      "description": "\n        Section containing information about the symmetry of the material. All\n        of these properties are derived by running a symmetry analysis on a\n        representative geometry from the original data. This original geometry\n        is stored in results.properties together with the primitive and\n        conventional structures.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.material.topology": {
      "name": "topology",
      "description": "\n        Describes a a structural part that has been identified within the entry.\n        May be related to other systems.\n        ",
      "nested": true,
      "repeats": true
    },
    "results.material.topology.atoms": {
      "name": "atoms",
      "description": "Describes the atomic structure of the physical system. This includes the atom positions, lattice vectors, etc.",
      "nested": false,
      "repeats": true
    },
    "results.material.topology.elemental_composition": {
      "name": "elemental_composition",
      "description": "\n        Section containing information about the concentration of an element,\n        given by its atomic and mass fraction within the system or material.\n        ",
      "nested": true,
      "repeats": true
    },
    "results.material.topology.system_relation": {
      "name": "system_relation",
      "description": "Contains information about the relation between two different systems.",
      "nested": false,
      "repeats": true
    },
    "results.material.topology.cell": {
      "name": "cell",
      "description": "\n        Properties of a unit cell.\n        ",
      "nested": false,
      "repeats": true
    },
    "results.material.topology.symmetry": {
      "name": "symmetry",
      "description": "\n        Section containing information about the symmetry properties of a\n        conventional cell related to a system.\n        ",
      "nested": false,
      "repeats": true
    },
    "results.material.topology.symmetry.wyckoff_sets": {
      "name": "wyckoff_sets",
      "description": "\n        Section for storing Wyckoff set information. Only available for\n        conventional cells that have undergone symmetry analysis.\n        ",
      "nested": false,
      "repeats": true
    },
    "results.material.topology.metal_coordination": {
      "name": "metal_coordination",
      "description": "Coordination number of an element, which represents the number of atoms directly bonded to the element.",
      "nested": false,
      "repeats": true
    },
    "results.material.topology.active_orbitals": {
      "name": "active_orbitals",
      "nested": false,
      "repeats": true
    },
    "results.method": {
      "name": "method",
      "description": "\n        Contains a summary of the methodology that has been used in this entry.\n        This methodology applies to all of the reported properties and\n        determines the result of a single energy evalution. The individual\n        properties may be further methodological details affect e.g. the\n        sampling.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.method.simulation": {
      "name": "simulation",
      "description": "\n        Contains method details for a simulation entry.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.method.simulation.dft": {
      "name": "dft",
      "description": "\n        Methodology for a DFT calculation.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.method.simulation.dft.hubbard_kanamori_model": {
      "name": "hubbard_kanamori_model",
      "description": "Setup of the Hubbard model used in DFT+U",
      "nested": true,
      "repeats": true
    },
    "results.method.simulation.tb": {
      "name": "tb",
      "description": "\n        Methodology for a Tight-Binding calculation.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.method.simulation.gw": {
      "name": "gw",
      "description": "\n        Methodology for a GW calculation.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.method.simulation.bse": {
      "name": "bse",
      "description": "\n        Methodology for a BSE calculation.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.method.simulation.dmft": {
      "name": "dmft",
      "description": "\n        Methodology for a DMFT calculation.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.method.simulation.quantum_cms": {
      "name": "quantum_cms",
      "nested": false,
      "repeats": false
    },
    "results.method.simulation.quantum_cms.quantum_circuit": {
      "name": "quantum_circuit",
      "nested": false
    },
    "results.method.simulation.precision": {
      "name": "precision",
      "description": "\n        Contains parameters for controlling or evaluating the convergence of the electronic structure.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.method.measurement": {
      "name": "measurement",
      "description": "\n        Contains method details for a measurement entry.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.method.measurement.xrd": {
      "name": "xrd",
      "description": "\n        Methodology for an X-Ray Diffraction measurement.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.properties": {
      "name": "properties",
      "description": "\n        Contains the physical properties that have been calculated or used in\n        this entry.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.properties.structural": {
      "name": "structural",
      "description": "\n        Structural properties.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.properties.structural.radial_distribution_function": {
      "name": "radial_distribution_function",
      "description": "\n        Radial distribution function.\n        ",
      "nested": true,
      "repeats": true
    },
    "results.properties.structural.radial_distribution_function.provenance": {
      "name": "provenance",
      "description": "\n        Contains provenance information for properties derived from molecular\n        dynamics simulations.\n        ",
      "nested": false,
      "repeats": true
    },
    "results.properties.structural.radial_distribution_function.provenance.molecular_dynamics": {
      "name": "molecular_dynamics",
      "description": "\n        Methodology for molecular dynamics.\n        ",
      "nested": false,
      "repeats": true
    },
    "results.properties.structural.radius_of_gyration": {
      "name": "radius_of_gyration",
      "description": "\n        Contains Radius of Gyration values as a trajectory.\n        ",
      "nested": true,
      "repeats": true
    },
    "results.properties.structural.radius_of_gyration.provenance": {
      "name": "provenance",
      "description": "\n        Contains provenance information for properties derived from molecular\n        dynamics simulations.\n        ",
      "nested": false,
      "repeats": true
    },
    "results.properties.structural.radius_of_gyration.provenance.molecular_dynamics": {
      "name": "molecular_dynamics",
      "description": "\n        Methodology for molecular dynamics.\n        ",
      "nested": false,
      "repeats": true
    },
    "results.properties.structural.diffraction_pattern": {
      "name": "diffraction_pattern",
      "description": "\n        Diffraction pattern.\n        ",
      "nested": true,
      "repeats": true
    },
    "results.properties.dynamical": {
      "name": "dynamical",
      "description": "\n        Dynamical properties.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.properties.dynamical.mean_squared_displacement": {
      "name": "mean_squared_displacement",
      "description": "\n        Mean Squared Displacements.\n        ",
      "nested": true,
      "repeats": true
    },
    "results.properties.dynamical.mean_squared_displacement.provenance": {
      "name": "provenance",
      "description": "\n        Contains provenance information for properties derived from molecular\n        dynamics simulations.\n        ",
      "nested": false,
      "repeats": true
    },
    "results.properties.dynamical.mean_squared_displacement.provenance.molecular_dynamics": {
      "name": "molecular_dynamics",
      "description": "\n        Methodology for molecular dynamics.\n        ",
      "nested": false,
      "repeats": true
    },
    "results.properties.structures": {
      "name": "structures",
      "description": "\n        Contains full atomistic representations of the material in different\n        forms.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.properties.structures.structure_original": {
      "name": "structure_original",
      "description": "\n        Describes an atomistic structure.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.properties.structures.structure_original.species": {
      "name": "species",
      "description": "Used to describe the species of the sites of this structure. Species can be pure chemical elements, or virtual-crystal atoms representing a statistical occupation of a\ngiven site by multiple chemical elements.",
      "nested": false,
      "repeats": true
    },
    "results.properties.structures.structure_original.lattice_parameters": {
      "name": "lattice_parameters",
      "description": "\n        Lattice parameters of a cell.\n        ",
      "nested": false
    },
    "results.properties.structures.structure_original.wyckoff_sets": {
      "name": "wyckoff_sets",
      "description": "\n        Section for storing Wyckoff set information. Only available for\n        conventional cells that have undergone symmetry analysis.\n        ",
      "nested": false,
      "repeats": true
    },
    "results.properties.structures.structure_conventional": {
      "name": "structure_conventional",
      "description": "\n        Describes an atomistic structure.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.properties.structures.structure_conventional.species": {
      "name": "species",
      "description": "Used to describe the species of the sites of this structure. Species can be pure chemical elements, or virtual-crystal atoms representing a statistical occupation of a\ngiven site by multiple chemical elements.",
      "nested": false,
      "repeats": true
    },
    "results.properties.structures.structure_conventional.lattice_parameters": {
      "name": "lattice_parameters",
      "description": "\n        Lattice parameters of a cell.\n        ",
      "nested": false
    },
    "results.properties.structures.structure_conventional.wyckoff_sets": {
      "name": "wyckoff_sets",
      "description": "\n        Section for storing Wyckoff set information. Only available for\n        conventional cells that have undergone symmetry analysis.\n        ",
      "nested": false,
      "repeats": true
    },
    "results.properties.structures.structure_primitive": {
      "name": "structure_primitive",
      "description": "\n        Describes an atomistic structure.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.properties.structures.structure_primitive.species": {
      "name": "species",
      "description": "Used to describe the species of the sites of this structure. Species can be pure chemical elements, or virtual-crystal atoms representing a statistical occupation of a\ngiven site by multiple chemical elements.",
      "nested": false,
      "repeats": true
    },
    "results.properties.structures.structure_primitive.lattice_parameters": {
      "name": "lattice_parameters",
      "description": "\n        Lattice parameters of a cell.\n        ",
      "nested": false
    },
    "results.properties.structures.structure_primitive.wyckoff_sets": {
      "name": "wyckoff_sets",
      "description": "\n        Section for storing Wyckoff set information. Only available for\n        conventional cells that have undergone symmetry analysis.\n        ",
      "nested": false,
      "repeats": true
    },
    "results.properties.vibrational": {
      "name": "vibrational",
      "description": "\n        Vibrational properties.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.properties.vibrational.band_structure_phonon": {
      "name": "band_structure_phonon",
      "description": "\n        This section stores information on a vibrational band structure\n        evaluation along one-dimensional pathways in the reciprocal space.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.properties.vibrational.dos_phonon": {
      "name": "dos_phonon",
      "description": "\n        Contains the phonon density of states.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.properties.vibrational.heat_capacity_constant_volume": {
      "name": "heat_capacity_constant_volume",
      "description": "\n        Contains the values of the specific (per mass) and isochoric (constant\n        volume) heat capacity at different temperatures.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.properties.vibrational.energy_free_helmholtz": {
      "name": "energy_free_helmholtz",
      "description": "\n        Contains the values of the Helmholtz free energy per atom at constant\n        volume and at different temperatures.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.properties.electronic": {
      "name": "electronic",
      "description": "\n        Electronic properties.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.properties.electronic.band_gap": {
      "name": "band_gap",
      "nested": true,
      "repeats": true
    },
    "results.properties.electronic.band_gap.provenance": {
      "name": "provenance",
      "description": "\n    ",
      "nested": false,
      "repeats": true
    },
    "results.properties.electronic.dos_electronic": {
      "name": "dos_electronic",
      "description": "\n        Contains the total electronic density of states.\n\n        OLD VERSION: it will eventually be deprecated.\n        ",
      "nested": false,
      "repeats": true
    },
    "results.properties.electronic.dos_electronic.band_gap": {
      "name": "band_gap",
      "nested": true,
      "repeats": true
    },
    "results.properties.electronic.dos_electronic.band_gap.provenance": {
      "name": "provenance",
      "description": "\n        Contains semantically labelled provenance information.\n        To be stored under PropertySection.provenance or children.\n        ",
      "nested": false,
      "repeats": true
    },
    "results.properties.electronic.dos_electronic_new": {
      "name": "dos_electronic_new",
      "description": "\n        Contains the electronic Density of States (DOS). This section can be repeated to refer to\n        different methodologies (e.g., label = 'DFT', 'GW', 'TB', etc.), and it can be spin-polarized\n        or not. The sub-section data points to each (if present) spin channels.\n        ",
      "nested": false,
      "repeats": true
    },
    "results.properties.electronic.dos_electronic_new.data": {
      "name": "data",
      "description": "\n        Section containign the density of states data.\n\n        It includes the total DOS and the projected DOS values. We differentiate `species_projected` as the\n        projected DOS for same atomic species, `atom_projected` as the projected DOS for different\n        atoms in the cell, and `orbital_projected` as the projected DOS for the orbitals of each\n        atom.\n        ",
      "nested": false,
      "repeats": true
    },
    "results.properties.electronic.dos_electronic_new.data.band_gap": {
      "name": "band_gap",
      "nested": true,
      "repeats": true
    },
    "results.properties.electronic.dos_electronic_new.data.band_gap.provenance": {
      "name": "provenance",
      "description": "\n        Contains semantically labelled provenance information.\n        To be stored under PropertySection.provenance or children.\n        ",
      "nested": false,
      "repeats": true
    },
    "results.properties.electronic.band_structure_electronic": {
      "name": "band_structure_electronic",
      "description": "\n        This section stores information on a electonic band structure\n        evaluation along one-dimensional pathways in the reciprocal space.\n        ",
      "nested": false,
      "repeats": true
    },
    "results.properties.electronic.band_structure_electronic.band_gap": {
      "name": "band_gap",
      "nested": true,
      "repeats": true
    },
    "results.properties.electronic.band_structure_electronic.band_gap.provenance": {
      "name": "provenance",
      "description": "\n        Contains semantically labelled provenance information.\n        To be stored under PropertySection.provenance or children.\n        ",
      "nested": false,
      "repeats": true
    },
    "results.properties.electronic.greens_functions_electronic": {
      "name": "greens_functions_electronic",
      "description": "\n        Base class for Green's functions information.\n        ",
      "nested": false,
      "repeats": true
    },
    "results.properties.electronic.electric_field_gradient": {
      "name": "electric_field_gradient",
      "description": "\n        Base class for the electric field gradient information. This section is relevant\n        for NMR and describes the potential generated my the nuclei in the system.\n        ",
      "nested": false,
      "repeats": true
    },
    "results.properties.magnetic": {
      "name": "magnetic",
      "description": "\n        Magnetic properties.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.properties.magnetic.magnetic_shielding": {
      "name": "magnetic_shielding",
      "description": "\n        Base class for the atomic magnetic shielding information.\n        ",
      "nested": false,
      "repeats": true
    },
    "results.properties.magnetic.spin_spin_coupling": {
      "name": "spin_spin_coupling",
      "description": "\n        Base class for the spin-spin coupling information.\n        ",
      "nested": false,
      "repeats": true
    },
    "results.properties.magnetic.magnetic_susceptibility": {
      "name": "magnetic_susceptibility",
      "description": "\n        Base class for the magnetic susceptibility information.\n        ",
      "nested": false,
      "repeats": true
    },
    "results.properties.optoelectronic": {
      "name": "optoelectronic",
      "description": "\n        Optoelectronic properties.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.properties.optoelectronic.solar_cell": {
      "name": "solar_cell",
      "description": "\n        Properties of solar cells.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.properties.catalytic": {
      "name": "catalytic",
      "description": "\n        Properties relating to catalysis.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.properties.catalytic.reaction": {
      "name": "reaction",
      "description": "\n        A collection of specifications and properties of a full catalytic reaction.\n        This may include reaction conditions, results and mechanistic aspects of a reaction.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.properties.catalytic.reaction.reactants": {
      "name": "reactants",
      "description": "\n        A reactant in a catalytic test reaction. A reactant\n        is identified by having a conversion.\n        ",
      "nested": true,
      "repeats": true
    },
    "results.properties.catalytic.reaction.products": {
      "name": "products",
      "description": "\n        A product of a catalytic reaction. A product here is usually identified by having\n        a selectivity, or a gas_concentration_out but no/zero gas_concentration_in.\n        ",
      "nested": true,
      "repeats": true
    },
    "results.properties.catalytic.reaction.rates": {
      "name": "rates",
      "description": "\n        Section bundling multiple representations of catalytic reaction rates.\n        ",
      "nested": true,
      "repeats": true
    },
    "results.properties.catalytic.reaction.reaction_conditions": {
      "name": "reaction_conditions",
      "description": "\n        Conditions under which a catalytic test reaction was performed.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.properties.catalytic.reaction.reaction_mechanism": {
      "name": "reaction_mechanism",
      "description": "\n        Properties of single steps of a catalytic reaction mechanism.\n        ",
      "nested": false,
      "repeats": true
    },
    "results.properties.catalytic.catalyst": {
      "name": "catalyst",
      "description": "\n        Properties of a heterogeneous catalyst.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.properties.mechanical": {
      "name": "mechanical",
      "description": "\n        Mechanical properties.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.properties.mechanical.energy_volume_curve": {
      "name": "energy_volume_curve",
      "description": "\n        Energy volume curve.\n        ",
      "nested": false,
      "repeats": true
    },
    "results.properties.mechanical.bulk_modulus": {
      "name": "bulk_modulus",
      "description": "\n        Contains bulk modulus values calculated with different methodologies.\n        ",
      "nested": true,
      "repeats": true
    },
    "results.properties.mechanical.shear_modulus": {
      "name": "shear_modulus",
      "description": "\n        Contains shear modulus values calculated with different methodologies.\n        ",
      "nested": true,
      "repeats": true
    },
    "results.properties.thermodynamic": {
      "name": "thermodynamic",
      "description": "\n        Thermodynamic properties.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.properties.thermodynamic.trajectory": {
      "name": "trajectory",
      "description": "\n        Thermodynamic properties reported for an ensemble evolving in time.\n        ",
      "nested": true,
      "repeats": true
    },
    "results.properties.thermodynamic.trajectory.provenance": {
      "name": "provenance",
      "description": "\n        Contains provenance information for properties derived from molecular\n        dynamics simulations.\n        ",
      "nested": false,
      "repeats": true
    },
    "results.properties.thermodynamic.trajectory.provenance.molecular_dynamics": {
      "name": "molecular_dynamics",
      "description": "\n        Methodology for molecular dynamics.\n        ",
      "nested": false,
      "repeats": true
    },
    "results.properties.thermodynamic.trajectory.temperature": {
      "name": "temperature",
      "description": "\n        Contains temperature values evaluated at different times.\n        ",
      "nested": false,
      "repeats": true
    },
    "results.properties.thermodynamic.trajectory.pressure": {
      "name": "pressure",
      "description": "\n        Contains pressure values evaluated at different times.\n        ",
      "nested": false,
      "repeats": true
    },
    "results.properties.thermodynamic.trajectory.volume": {
      "name": "volume",
      "description": "\n        Contains volume values evaluated at different times.\n        ",
      "nested": false,
      "repeats": true
    },
    "results.properties.thermodynamic.trajectory.energy_potential": {
      "name": "energy_potential",
      "description": "\n        Contains energy values evaluated at different times.\n        ",
      "nested": false,
      "repeats": true
    },
    "results.properties.spectroscopic": {
      "name": "spectroscopic",
      "description": "\n        Spectroscopic properties.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.properties.spectroscopic.spectra": {
      "name": "spectra",
      "description": "\n        Base class for Spectra calculation information as obtained from an experiment or a computation.\n        ",
      "nested": true,
      "repeats": true
    },
    "results.properties.spectroscopic.spectra.provenance": {
      "name": "provenance",
      "description": "\n        Contains provenance information (mainly the methodology section) for spectra properties\n        derived from an experiment or a calculation.\n        ",
      "nested": false,
      "repeats": true
    },
    "results.properties.spectroscopic.spectra.provenance.eels": {
      "name": "eels",
      "description": "\n        Base class for the EELS methodology.\n        ",
      "nested": false,
      "repeats": true
    },
    "results.properties.spectroscopic.spectra.provenance.electronic_structure": {
      "name": "electronic_structure",
      "description": "\n    ",
      "nested": false,
      "repeats": true
    },
    "results.properties.geometry_optimization": {
      "name": "geometry_optimization",
      "description": "\n        Geometry optimization results and settings.\n        ",
      "nested": false,
      "repeats": false
    },
    "results.eln": {
      "name": "eln",
      "nested": false,
      "repeats": false
    }
  },
  "metainfo": {
    "m_def": "nomad.datamodel.Environment",
    "packages": [
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 0,
        "m_parent_sub_section": "packages",
        "name": "nomad.datamodel.metainfo.plot",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "Figure",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "label",
                "description": "Label shown in the plot selection.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "index",
                "description": "Index of figure in the plot selection.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "open",
                "description": "Determines whether the figure is initially open or closed.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "PlotlyFigureQuantity",
            "base_sections": [
              "/packages/29/section_definitions/6"
            ],
            "constraints": [
              "correct_dimensionality",
              "dimensions",
              "has_type"
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "name": "PlotlyFigure",
            "more": {
              "label_quantity": "label"
            },
            "base_sections": [
              "/packages/0/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.datamodel.metainfo.plot.PlotlyFigureQuantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "figure",
                "description": "Contains the JSON serialization for a plotly figure.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.JSON"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 3,
            "m_parent_sub_section": "section_definitions",
            "name": "PlotSection",
            "description": "The PlotSection base section serves as an additional functionality to your sections. This base section is designed to simplify the process of creating various types of\nplots, making it easy to use Plotly Express, Plotly Subplot, and the general Plotly graph objects.\n\nFeatures:\n- Plotly Express: Create simple and quick plots with a high-level, expressive API.\n- Plotly Subplot: Organize multiple plots into subplots for more complex visualizations.\n- General Plotly Graph Objects: Fine-tune your plots by working directly with Plotly's graph objects.\n\nUsage:\n- Inherit from this base section to leverage its plot functionality.\n- Customize your plots using the annotations plotly-express, plotly-subplots, or/and plotly-graph-object.\n\nExample Usage:\n```python\nclass CustomSection(PlotSection, ElnBaseSection, EntryData):\n    m_def = Section()\n    time = Quantity(type=float, shape=['*'], unit='s', a_eln=dict(component='NumberEditQuantity'))\n    substrate_temperature = Quantity(type=float, shape=['*'], unit='K', a_eln=dict(component='NumberEditQuantity'))\n    chamber_pressure = Quantity(type=float, shape=['*'], unit='Pa', a_eln=dict(component='NumberEditQuantity'))\n\n    def normalize(self, archive, logger):\n        super(CustomSection, self).normalize(archive, logger)\n\n        first_line = px.scatter(x=self.time, y=self.substrate_temperature)\n        second_line = px.scatter(x=self.time, y=self.chamber_pressure)\n        figure1 = make_subplots(rows=1, cols=2, shared_yaxes=True)\n        figure1.add_trace(first_line.data[0], row=1, col=1)\n        figure1.add_trace(second_line.data[0], row=1, col=2)\n        figure1.update_layout(height=400, width=716, title_text=\"Creating Subplots in Plotly\")\n        self.figures.append(PlotlyFigure(label='figure 1', figure=figure1.to_plotly_json()))\n\n        figure2 = px.scatter(x=self.substrate_temperature, y=self.chamber_pressure, color=self.chamber_pressure, title=\"Chamber as a function of Temperature\")\n        self.figures.append(PlotlyFigure(label='figure 2', index=1, figure=figure2.to_plotly_json()))\n\n        heatmap_data = [[None, None, None, 12, 13, 14, 15, 16],\n             [None, 1, None, 11, None, None, None, 17],\n             [None, 2, 6, 7, None, None, None, 18],\n             [None, 3, None, 8, None, None, None, 19],\n             [5, 4, 10, 9, None, None, None, 20],\n             [None, None, None, 27, None, None, None, 21],\n             [None, None, None, 26, 25, 24, 23, 22]]\n\n        heatmap = go.Heatmap(z=heatmap_data, showscale=False, connectgaps=True, zsmooth='best')\n        figure3 = go.Figure(data=heatmap)\n        self.figures.append(PlotlyFigure(label='figure 3', index=0, figure=figure3.to_plotly_json()))\n```",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "figures",
                "more": {
                  "label_quantity": "label"
                },
                "sub_section": "/packages/0/section_definitions/2",
                "repeats": true
              }
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 1,
        "m_parent_sub_section": "packages",
        "name": "nomad.datamodel.metainfo.downloads",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "Download",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "url",
                "description": "A valid and downloadable URL. Will be downloaded on the servers that\nrun this entries processing (e.g. NOMAD servers). The files will be\nadded to the given output directory.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "output",
                "description": "A relative path that denotes the file to download the given URL to.\nAny parent directories will be created if they do not exist.\nFiles that are marked to be extracted will be downloaded and extracted into\nthe parent directory of the given file path.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "default": "./"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "extract",
                "description": "If the given URL denotes a compressed file and this flag is set to true,\nthe downloaded file will be extracted and removed. Supported file formats\nare `.zip`, `.tgz`, `.tar.gz`.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "Downloads",
            "description": "Allows you to upload a very small file that will add very large files to your upload. Imagine there are large file resources in the internet (e.g. on a data sharing service)\nthat you need to add to your upload. This way you do not need to download those large\nfiles first, just to upload them to NOMAD.\n\nWhen this section is processed, it will download files from given URLs, add\nthem to the upload, and trigger processing for given mainfiles.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "description",
                "description": "Provides some additional description for these downloads.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "mainfiles",
                "description": "A list of relative paths that denote mainfiles. These files are subjected\nto NOMAD processing after all files have been downloaded and potentially\nextracted.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "skip_download",
                "description": "If true, the downloads will not be performed and no processing is triggered.\nIf false, this will be changed to true by the processing after performing\nthe downloads.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                }
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "downloads",
                "description": "Defines URLs and how to download them.",
                "sub_section": "/packages/1/section_definitions/0",
                "repeats": true
              }
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 2,
        "m_parent_sub_section": "packages",
        "name": "nomad.datamodel.metainfo.simulation.method",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "Mesh",
            "description": "Contains the settings for a sampling mesh. Supports uniformly-spaced meshes and symmetry-reduced representations.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "dimensionality",
                "description": "Dimensionality of the mesh.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "sampling_method",
                "description": "Method used to generate the mesh:\n\n| Name      | Description                      | Reference             |\n\n| --------- | -------------------------------- | --------------------- |\n\n| `'Gamma-centered'` | Regular mesh is centered around Gamma. No offset. |\n\n| `'Monkhorst-Pack'` | Regular mesh with an offset of half the reciprocal lattice vector. |\n\n| `'Gamma-offcenter'` | Regular mesh with an offset that is neither `'Gamma-centered'`, nor `'Monkhorst-Pack'`. |\n\n| `'Line-path'` | Line path along high-symmetry points. Typically employed for simualting band structures. |\n\n| `'Equidistant'`  | Equidistant 1D grid (also known as 'Newton-Cotes')                      |\n\n| `'Logarithmic'`  | log distance 1D grid               |\n\n| `'Tan'`  | Non-uniform tan mesh for 1D grids. More dense at low abs values of the points, while less dense for higher values |\n\n| `'Gauss-Legendre'` | Quadrature rule for integration using Legendre polynomials |\n\n| `'Gauss-Laguerre'` | Quadrature rule for integration using Laguerre polynomials |\n\n| `'Clenshaw-Curtis'`  | Quadrature rule for integration using Chebyshev polynomials using discrete cosine transformations |\n\n| `'Gauss-Hermite'`  | Quadrature rule for integration using Hermite polynomials |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "Equidistant",
                    "Gamma-centered",
                    "Gamma-offcenter",
                    "Gauss-Hermite",
                    "Gauss-LaguerreClenshaw-Curtis",
                    "Gauss-Legendre",
                    "Line-path",
                    "Logarithmic",
                    "Monkhorst-Pack",
                    "Newton-Cotes",
                    "Tan"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_points",
                "description": "Total number of points in the mesh, accounting for the multiplicities.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "grid",
                "description": "Amount of mesh point sampling along each axis, i.e. [nx, ny, nz].",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "dimensionality"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "points",
                "description": "List of all the points in the mesh.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "complex128"
                },
                "shape": [
                  "*",
                  "dimensionality"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "multiplicities",
                "description": "The amount of times the same point reappears. These are accounted for in `n_points`.\nA value larger than 1, typically indicates a symmtery operation that was applied to the mesh.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "weights",
                "description": "The frequency of times the same point reappears.\nA value larger than 1, typically indicates a symmtery operation that was applied to the mesh.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "LinePathSegment",
            "description": "Contains the settings for a single line path segment in a mesh.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "start_point",
                "description": "Name of the hihg-symmetry starting point of the line path segment.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "end_point",
                "description": "Name of the high-symmetry end point of the line path segment.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_points",
                "description": "Number of points in the line path segment.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "points",
                "description": "List of all the points in the line path segment.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*",
                  3
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "name": "KMesh",
            "description": "Contains the settings for a sampling mesh in 3D reciprocal space. Supports uniformly-spaced meshes, line paths along high-symmetry points,\nas well as symmetry-reduced and full representations.",
            "base_sections": [
              "/packages/2/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "offset",
                "description": "Offset vector shifting the mesh with respect to a Gamma-centered case.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "all_points",
                "description": "Full list of the mesh points without any symmetry operations.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*",
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "high_symmetry_points",
                "description": "Named high symmetry points in the mesh.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "line_path_segments",
                "sub_section": "/packages/2/section_definitions/1",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 3,
            "m_parent_sub_section": "section_definitions",
            "name": "FrequencyMesh",
            "description": "Contains the settings for a sampling mesh in 1D frequency space, either real or imaginary.",
            "base_sections": [
              "/packages/2/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "points",
                "description": "List of all the points in the mesh in joules.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "complex128"
                },
                "shape": [
                  "n_points",
                  "dimensionality"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "smearing",
                "description": "Numerical smearing parameter used for convolutions.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 4,
            "m_parent_sub_section": "section_definitions",
            "name": "TimeMesh",
            "description": "Contains the settings for a sampling mesh in 1D time space, either real or imaginary.",
            "base_sections": [
              "/packages/2/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "smearing",
                "description": "Numerical smearing parameter used for convolutions.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 5,
            "m_parent_sub_section": "section_definitions",
            "name": "Scf",
            "description": "Section containing the parameters related to self consistency.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "native_tier",
                "description": "The code-specific tag indicating the precision used\nfor the self-consistent cycle.\n\nSupported codes (with hyperlinks to the relevant documentation):\n- `Orca`",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_max_iteration",
                "description": "Specifies the maximum number of allowed self-consistent field (SCF) iterations in\na calculation.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "threshold_energy_change",
                "description": "Specifies the threshold for the total energy change between two subsequent\nself-consistent field (SCF) iterations. The SCF is considered converged when the\ntotal-energy change between two SCF cycles is below the threshold (possibly in\ncombination with other criteria).",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "threshold_density_change",
                "description": "Specifies the threshold for the average charge density change between two\nsubsequent self-consistent field (SCF) iterations. The SCF is considered converged\nwhen the density change between two SCF cycles is below the threshold (possibly in\ncombination with other criteria).",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "minimization_algorithm",
                "description": "Specifies the algorithm used for self consistency minimization.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 6,
            "m_parent_sub_section": "section_definitions",
            "name": "HubbardKanamoriModel",
            "description": "Setup of the local Hubbard model.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "orbital",
                "description": "Orbital label corresponding to the Hubbard model. The typical orbitals with strong\nHubbard interactions have partially filled '3d', '4d' and '4f' orbitals.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_orbital",
                "description": "Number of non-degenerated orbitals of the same type (s, p, d, f, ...).",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "u",
                "description": "Value of the (intraorbital) Hubbard interaction",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "jh",
                "description": "Value of the (interorbital) Hund's coupling.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "up",
                "description": "Value of the (interorbital) Coulomb interaction. In rotational invariant\nsystems, up = u - 2 * jh.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "j",
                "description": "Value of the exchange interaction. In rotational invariant systems, j = jh.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "u_effective",
                "description": "Value of the effective U parameter (u - j).",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "slater_integrals",
                "description": "Value of the Slater integrals (F0, F2, F4) in spherical harmonics used to derive\nthe local Hubbard interactions:\n\n    u = ((2.0 / 7.0) ** 2) * (F0 + 5.0 * F2 + 9.0 * F4) / (4.0*np.pi)\n\n    up = ((2.0 / 7.0) ** 2) * (F0 - 5.0 * F2 + 3.0 * 0.5 * F4) / (4.0*np.pi)\n\n    jh = ((2.0 / 7.0) ** 2) * (5.0 * F2 + 15.0 * 0.25 * F4) / (4.0*np.pi)\n\nRef.: Elbio Dagotto, Nanoscale Phase Separation and Colossal Magnetoresistance,\nChapter 4, Springer Berlin (2003).",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "umn",
                "description": "Value of the local Coulomb interaction matrix.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_orbital",
                  "n_orbital"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "double_counting_correction",
                "description": "Name of the double counting correction algorithm applied.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 7,
            "m_parent_sub_section": "section_definitions",
            "name": "Pseudopotential",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "name",
                "description": "Native code name of the pseudopotential.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "Pseudopotential classification.\n| abbreviation | description | DOI |\n| ------------ | ----------- | --------- |\n| `'US'`       | Ultra-soft  | |\n| `'PAW'`      | Projector augmented wave | |\n| `'V'`        | Vanderbilt | https://doi.org/10.1103/PhysRevB.47.6728 |\n| `'MBK'`      | Morrison-Bylander-Kleinman | https://doi.org/10.1103/PhysRevB.41.7892 |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "PAW",
                    "US MBK",
                    "US V"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "norm_conserving",
                "description": "Denotes whether the pseudopotential is norm-conserving.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "cutoff",
                "description": "Minimum recommended spherical cutoff energy for any plane-wave basis set\nusing the pseudopotential.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "xc_functional_name",
                "description": "Name of the exchange-correlation functional used to generate the pseudopotential.\nFollows the libxc naming convention.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "l_max",
                "description": "Maximum angular momentum of the pseudopotential projectors.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "lm_max",
                "description": "Maximum magnetic momentum of the pseudopotential projectors.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 8,
            "m_parent_sub_section": "section_definitions",
            "name": "SingleElectronState",
            "description": "An `AtomicOrbitalState` which supports fast notation for single-electron states.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.active_orbitals.n_quantum_number"
                  ]
                },
                "name": "n_quantum_number",
                "description": "Principal quantum number $n$.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "l_quantum_number",
                "description": "Orbital angular quantum number $l$.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "ml_quantum_number",
                "description": "Azimuthal projection of the $l$ vector.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.active_orbitals.j_quantum_number"
                  ]
                },
                "name": "j_quantum_number",
                "description": "Total angular momentum quantum number $j = |l-s| ... l+s$.\n**Necessary with strong L-S coupling or non-collinear spin systems.**",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "1..2"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.active_orbitals.mj_quantum_number"
                  ]
                },
                "name": "mj_quantum_number",
                "description": "Azimuthal projection of the $j$ vector.\n**Necessary with strong L-S coupling or non-collinear spin systems.**",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "ms_quantum_bool",
                "description": "Boolean representation of the spin state $m_s$.\n`False` for spin down, `True` for spin up.\nIn non-collinear spin systems, the projection axis $z$ should also be defined.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.active_orbitals.degeneracy"
                  ]
                },
                "name": "degeneracy",
                "description": "The number of states under the filling constraints applied to the orbital set.\nThis implicitly assumes that all orbitals in the set are degenerate.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 9,
            "m_parent_sub_section": "section_definitions",
            "name": "CoreHole",
            "description": "Describes the quantum state of a single hole in an open-shell core state. This is the physical interpretation. For modelling purposes, the electron charge excited may lie between 0 and 1. This follows a so-called Janak state.\nSometimes, no electron is actually, excited, but just marked for excitation. This is denoted as an `initial` state.\nAny missing quantum numbers indicate some level of arbitrariness in the choice of the core hole, represented in the degeneracy.",
            "base_sections": [
              "/packages/2/section_definitions/8"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.active_orbitals.n_electrons_excited"
                  ]
                },
                "name": "n_electrons_excited",
                "description": "The electron charge excited for modelling purposes.\nChoices that deviate from 0 or 1 typically leverage Janak composition.\nUnless the `initial` state is chosen, the model corresponds to a single electron being excited in physical reality.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.active_orbitals.occupation"
                  ]
                },
                "name": "occupation",
                "description": "The total number of electrons within the state (as defined by degeneracy)\nafter exciting the model charge.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "dscf_state",
                "description": "The $\\Delta$-SCF state tag, used to identify the role in the workflow of the same name.\nAllowed values are `initial` (not to be confused with the _initial-state approximation_) and `final`.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "final",
                    "initial"
                  ]
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 10,
            "m_parent_sub_section": "section_definitions",
            "name": "AtomParameters",
            "description": "Contains method-related information about a kind of atom identified by label. This allows the assignment of an atom-centered basis set or pseudopotential for different\natoms belonging to the same kind.\n\nThrough this section we use the wording \"active\" mainly for defining orbital-related\nquantities. Active refers to the relevant orbital parameters in the atom.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "atom_number",
                "description": "Atomic number (number of protons) of this atom kind, use 0 if not an atom.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "atom_index",
                "description": "The atom index with respect to the parsed system atoms section.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_valence_electrons",
                "description": "Number of valence electrons.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "n_core_electrons",
                "description": "Number of core electrons.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "label",
                "description": "String used to identify the atoms of this kind. This should correspond to the\natom labels of the configuration. It is possible for one atom kind to have\nmultiple labels (in order to allow two atoms of the same kind to have two\ndifferently defined sets of atom-centered basis functions or two different pseudo-\npotentials). Atom kind is typically the symbol of the atomic species but it can be\nalso a ghost or pseudo-atom.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "mass",
                "description": "Mass of the atom.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "kilogram"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "pseudopotential_name",
                "description": "Name identifying the pseudopotential used.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "n_orbitals",
                "description": "Number of active orbitals of the atom.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "orbitals",
                "description": "Label of the active orbitals of the atoms.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "n_orbitals"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "onsite_energies",
                "description": "Values of the atomic onsite energy corresponding to each orbital.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_orbitals"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "charge",
                "description": "Total charge of the atom.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "coulomb"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "name": "charges",
                "description": "Values of the charge corresponding to each orbital.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_orbitals"
                ],
                "unit": "coulomb"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "pseudopotential",
                "sub_section": "/packages/2/section_definitions/7"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "core_hole",
                "sub_section": "/packages/2/section_definitions/9"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "hubbard_kanamori_model",
                "sub_section": "/packages/2/section_definitions/6"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 11,
            "m_parent_sub_section": "section_definitions",
            "name": "MoleculeParameters",
            "description": "Contains method-related information about a kind of atom identified by label. This allows the assignment of an atom-centered basis set or pseudopotential for different\natoms belonging to the same kind.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "label",
                "description": "String to identify the molecule.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_atoms",
                "description": "Number of atoms in the molecule.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "atom_parameters",
                "sub_section": "/packages/2/section_definitions/10",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 12,
            "m_parent_sub_section": "section_definitions",
            "name": "Photon",
            "description": "Section containing the details of the photon field used for spectrum calculations.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "multipole_type",
                "description": "Type used for the multipolar expansion: dipole, quadrupole, NRIXS, Raman, etc.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "polarization",
                "description": "Direction of the photon polarization in cartesian coordinates.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "energy",
                "description": "Photon energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "momentum_transfer",
                "description": "Momentum transfer which would be important for quadrupole or NRIXS or Raman.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 13,
            "m_parent_sub_section": "section_definitions",
            "name": "GaussianBasisGroup",
            "description": "Section that describes a group of Gaussian contractions. Groups allow one to calculate the primitive Gaussian integrals once for several different linear combinations of\nthem. This defines basis functions with radial part $f_i(r) = r^{l_i} \\sum_{j} c_{i j}\nA(l_i, \\alpha_j) exp(-\\alpha_j r^2)$ where $A(l_i, \\alpha_j)$ is a the normalization\ncoefficient for primitive Gaussian basis functions. Here, $\\alpha_j$ is defined in\ngaussian_basis_group_exponents, $l_i$ is given in gaussian_basis_group_ls, and $c_{i\nj}$ is given in gaussian_basis_group_contractions, whereas the radial part is given by\nthe spherical harmonics $Y_{l m}$.\n\nThis section is defined only if the original basis function uses Gaussian basis\nfunctions, and the sequence of radial functions $f_i$ across all\nsection_gaussian_basis_group in section_basis_set_atom_centered should match the one\nof basis_set_atom_centered_radial_functions.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_contractions",
                "description": "Gives the number of different contractions, i.e. resulting basis functions in a\ngaussian_basis_group section.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_exponents",
                "description": "Gives the number of different Gaussian exponents in a section_gaussian_basis_group\nsection.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "contractions",
                "description": "contraction coefficients $c_{i j}$ defining the contracted basis functions with\nrespect to *normalized* primitive Gaussian functions. They define the Gaussian\nbasis functions as described in section_gaussian_basis_group.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_contractions",
                  "n_exponents"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "exponents",
                "description": "Exponents $\\alpha_j$ of the Gaussian functions defining this basis set\n$exp(-\\alpha_j r^2)$. One should be careful about the units of the coefficients.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_exponents"
                ],
                "unit": "1 / meter ** 2"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "ls",
                "description": "Azimuthal quantum number ($l$) values (of the angular part given by the spherical\nharmonic $Y_{l m}$ of the various contracted basis functions).",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_contractions"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 14,
            "m_parent_sub_section": "section_definitions",
            "name": "BasisSetAtomCentered",
            "description": "This section describes the atom-centered basis set. The main contained information is a short, non unique but human-interpretable, name for identifying the basis set\n(short_name), a longer unique name, the atomic number of the atomic species the\nbasis set is meant for.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "name",
                "description": "Code-specific, but explicative, base name for the basis set.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "formula",
                "description": "Generalized representation of the basis set, e.g. 'STO-3G', '6-31G(d)', 'cc-pVDZ',\netc.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "atom_number",
                "description": "Atomic number (i.e., number of protons) of the atom for which this basis set is\nconstructed (0 means unspecified or a pseudo atom).",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "n_basis_functions",
                "description": "Gives the number of different basis functions in a basis_set_atom_centered\nsection. This equals the number of actual coefficients that are specified when\nusing this basis set.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "gaussian_basis_group",
                "sub_section": "/packages/2/section_definitions/13",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 15,
            "m_parent_sub_section": "section_definitions",
            "name": "OrbitalAPW",
            "description": "Definition of a APW wavefunction per orbital.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "State",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "APW",
                    "LAPW",
                    "LO",
                    "spherical Dirac"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_quantum_number",
                "description": "Main quantum number $n$ specifying the orbital.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "l_quantum_number",
                "description": "Angular momentum / azimuthal quantum number $l$ specifying the orbital.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "j_quantum_number",
                "description": "Total angular momentum quantum number $j$ specifying the orbital,\nwhere $j$ ranges from $l-s$ to $l+s$.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "kappa_quantum_number",
                "description": "Relativistic angular momentum quantum number specifying the orbital\n$\\kappa = (l-j)(2j+1)$.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "occupation",
                "description": "Number of electrons populating the orbital.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "core_level",
                "description": "Boolean denoting whether the orbital is treated differently from valence orbitals.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "energy_parameter",
                "description": "Reference energy parameter for the augmented plane wave (APW) basis set.\nIs used to set the energy parameter for each state.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "energy_parameter_n",
                "description": "Reference number of radial nodes for the augmented plane wave (APW) basis set.\nThis is used to derive the `energy_parameter`.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "order",
                "description": "Derivative order of the radial wavefunction term.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "boundary_condition_order",
                "description": "Differential order to which the radial wavefunction is matched at the boundary.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "name": "update",
                "description": "Allow the code to optimize the initial energy parameter.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "name": "updated",
                "description": "Initial energy parameter after code optimization.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 16,
            "m_parent_sub_section": "section_definitions",
            "name": "BasisSetMesh",
            "description": "All geometry-related information of the basis set (mesh).",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "shape",
                "description": "Geometry of the basis set mesh.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "cubic",
                    "cylindrical",
                    "ellipsoidal",
                    "rectangular",
                    "spherical"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "box_lengths",
                "description": "Dimensions of the box containing the basis set mesh.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3
                ],
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "radius",
                "description": "Radius of the sphere.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "grid_spacing",
                "description": "Grid spacing of a Cartesian mesh.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ],
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "radius_lin_spacing",
                "description": "The equidistant spacing of the radial grid.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "radius_log_spacing",
                "description": "The logarithmic spacing of the radial grid.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "n_grid_points",
                "description": "Total number of grid points.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "n_radial_grid_points",
                "description": "Number of grid points on the radial grid.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "n_spherical_grid_points",
                "description": "Number of grid points on the spherical grid.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 17,
            "m_parent_sub_section": "section_definitions",
            "name": "BasisSet",
            "description": "This section contains all basis sets used to represent the wavefunction or electron density.",
            "base_sections": [
              "/packages/2/section_definitions/16"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "The type of basis set used by the program.\n\n| Value                          |                                            Description |\n| ------------------------------ | ------------------------------------------------------ |\n| `'numeric AOs'`                | Numerical atomic orbitals                              |\n| `'gaussians'`                  | Gaussian basis set                                     |\n| `'plane waves'`                | Plane waves                                            |\n| `'psinc functions'`            | Pseudopotential sinc functions                         |\n| `'real-space grid'`            | Real-space grid                                        |\n| `'pbeVaspFit2015'`             | Lobster algorithm for projection plane waves onto LCAO |\n| `'Koga'`                       | Lobster algorithm for projection plane waves onto LCAO |\n| `'Bunge'`                      | Lobster algorithm for projection plane waves onto LCAO |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "Bunge",
                    "Koga",
                    "gaussians",
                    "numeric AOs",
                    "pbeVaspFit2015",
                    "plane waves",
                    "psinc functions",
                    "real-space grid"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "scope",
                "description": "The extent of the electronic structure that the basis set encodes.\nThe partitions could be energetic (e.g. `core`, `valence`) in nature,\nspatial (e.g. `muffin-tin`, `interstitial`), or cover\nHamiltonian components (e.g. `kinetic energy`,\n`electron-electron interaction`), etc.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "cutoff",
                "description": "Spherical cutoff in reciprocal space for a plane-wave basis set. It is the energy\nof the highest plane-wave ($\\frac{\\hbar^2|k+G|^2}{2m_e}$) included in the basis\nset.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "cutoff_fractional",
                "description": "The spherical cutoff parameter for the interstitial plane waves in the LAPW family.\nThis cutoff is unitless, referring to the product of the smallest muffin-tin radius\nand the length of the cutoff reciprocal vector ($r_{MT} * |K_{cut}|$).",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "frozen_core",
                "description": "Boolean denoting whether the frozen-core approximation was applied.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "spherical_harmonics_cutoff",
                "description": "Maximum angular momentum $l$ for the spherical harmonics.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "atom_parameters",
                "description": "Reference to a particular atom parameter setup further specifying the basis set.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/2/section_definitions/10"
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "atom_centered",
                "sub_section": "/packages/2/section_definitions/14",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "orbital",
                "sub_section": "/packages/2/section_definitions/15",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 18,
            "m_parent_sub_section": "section_definitions",
            "name": "BasisSetContainer",
            "description": "Container class for `BasisSet`",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "native_tier",
                "description": "The code-specific tag indicating the precision used\nfor the basis set and meshes of numerical routines.\n\nSupported codes (with hyperlinks to the relevant documentation):\n- [`VASP`](https://www.vasp.at/wiki/index.php/PREC)\n- `FHI-aims`\n- [`CASTEP`](http://www.tcm.phy.cam.ac.uk/castep/documentation/WebHelp/CASTEP.html#modules/castep/tskcastepsetelecquality.htm?Highlight=ultra-fine)",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "The type of basis set used by the program.\n\n| Value                          |                       Description |\n| ------------------------------ | --------------------------------- |\n| `'APW'`                        | Augmented plane waves             |\n| `'LAPW'`                       | Linearized augmented plane waves  |\n| `'APW+lo'`             | Augmented plane waves with local orbitals |\n| `'LAPW+lo'` | Linearized augmented plane waves with local orbitals |\n| `'(L)APW'`                     |     A combination of APW and LAPW |\n| `'(L)APW+lo'`  | A combination of APW and LAPW with local orbitals |\n| `'plane waves'`                | Plane waves                       |\n| `'gaussians + plane waves'`    | Basis set of the Quickstep algorithm (DOI: 10.1016/j.cpc.2004.12.014) |\n| `'real-space grid'`            | Real-space grid                   |\n| `'suppport functions'`         | Support functions                 |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "(L)APW",
                    "(L)APW+lo",
                    "APW",
                    "APW+lo",
                    "LAPW",
                    "LAPW+lo",
                    "atom-centered orbitals",
                    "gaussians + plane waves",
                    "not processed",
                    "plane waves",
                    "real-space grid",
                    "support functions",
                    "unavailable"
                  ]
                },
                "default": "unavailable"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "scope",
                "description": "The extent of the electronic structure that the basis set encodes.\nThe partitions could be energetic (e.g. `core`, `valence`) in nature,\nspatial (e.g. `muffin-tin`, `interstitial`), or cover\nHamiltonian components (e.g. `kinetic energy`,\n`electron-electron interaction`), etc.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "basis_set",
                "sub_section": "/packages/2/section_definitions/17",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 19,
            "m_parent_sub_section": "section_definitions",
            "name": "Interaction",
            "description": "Section containing the parameters of a contribution to a force field model.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "Denotes the classification of the potential.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "name",
                "description": "Specifies the name of the potential. Can contain information on the species,\ncut-offs, potential versions.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_interactions",
                "description": "Total number of interactions of this type for interaction groupings.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "n_atoms",
                "description": "Number of atoms included in (each instance of) the interaction.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "atom_labels",
                "description": "Labels of the atoms described by the interaction. Can be a list of lists for interaction groupings.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "str_"
                },
                "shape": [
                  "n_interactions",
                  "n_atoms"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "atom_indices",
                "description": "Indices of the atoms in the system described by the interaction. Can be a list of lists for interaction groupings.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "functional_form",
                "description": "Specifies the functional form of the interaction potential.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "n_parameters",
                "description": "Specifies the number of parameters in the interaction potential.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "parameters",
                "description": "Dictionary of label and parameters of the interaction potential.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Any"
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "contributions",
                "sub_section": "/packages/2/section_definitions/19",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 20,
            "m_parent_sub_section": "section_definitions",
            "name": "Model",
            "description": "Section containing the parameters of a force field model. If specified, the parameters corresponding to the individual contributions to the model are given in contributions.\nOtherwise, the parameters can also be found in a reference to the published model.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "name",
                "description": "Identifies the name of the model.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "reference",
                "description": "Reference to the model e.g. DOI, URL.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "contributions",
                "sub_section": "/packages/2/section_definitions/19",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 21,
            "m_parent_sub_section": "section_definitions",
            "name": "Functional",
            "description": "Section containing the parameters of an exchange or correlation functional.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "name",
                "description": "Provides the name of one of the exchange and/or correlation (XC) functional\nfollowing the libbx convention.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "parameters",
                "description": "Contains an associative list of non-default values of the parameters for the\nfunctional.\n\nFor example, if a calculations using a hybrid XC functional (e.g., HSE06)\nspecifies a user-given value of the mixing parameter between exact and GGA\nexchange, then this non-default value is stored in this metadata.\n\nThe labels and units of these values may be defined in name.\n\nIf this metadata is not given, the default parameter values for the functional\nare assumed.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Any"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "weight",
                "description": "Provides the value of the weight for the functional.\n\nThis weight is used in the linear combination of the different functionals. If not\nspecified then the default is set to 1.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 22,
            "m_parent_sub_section": "section_definitions",
            "name": "XCFunctional",
            "description": "Section describing the exchange-correlation functional used in the DFT calculation. The name of the exchange-correlation functional is given by name and the reference to\nthe published functional is provided by reference. Other contributions to the\nfunctional not covered by exchange, correlation or hybrid types may be specified in\ncontributions.",
            "base_sections": [
              "/packages/2/section_definitions/20"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "exchange",
                "sub_section": "/packages/2/section_definitions/21",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "correlation",
                "sub_section": "/packages/2/section_definitions/21",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "hybrid",
                "sub_section": "/packages/2/section_definitions/21",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 3,
                "m_parent_sub_section": "sub_sections",
                "name": "contributions",
                "sub_section": "/packages/2/section_definitions/21",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 23,
            "m_parent_sub_section": "section_definitions",
            "name": "DFT",
            "description": "Section containing the various parameters that define a DFT calculation. These include settings for the exchange correlation functionals, LDA+U, etc.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "self_interaction_correction_method",
                "description": "Contains the name for the self-interaction correction (SIC) treatment used to\ncalculate the final energy and related quantities. If skipped or empty, no special\ncorrection is applied.\n\nThe following SIC methods are available:\n\n| SIC method                | Description                       |\n\n| ------------------------- | --------------------------------  |\n\n| `\"\"`                      | No correction                     |\n\n| `\"SIC_AD\"`                | The average density correction    |\n\n| `\"SIC_SOSEX\"`             | Second order screened exchange    |\n\n| `\"SIC_EXPLICIT_ORBITALS\"` | (scaled) Perdew-Zunger correction explicitly on a\nset of orbitals |\n\n| `\"SIC_MAURI_SPZ\"`         | (scaled) Perdew-Zunger expression on the spin\ndensity / doublet unpaired orbital |\n\n| `\"SIC_MAURI_US\"`          | A (scaled) correction proposed by Mauri and co-\nworkers on the spin density / doublet unpaired orbital |",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "xc_functional",
                "sub_section": "/packages/2/section_definitions/22"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 24,
            "m_parent_sub_section": "section_definitions",
            "name": "TightBindingOrbital",
            "description": "Section to define an orbital including the name of orbital and shell number and the on-site energy.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "orbital_name",
                "description": "The name of the orbital.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "cell_index",
                "description": "The index of the cell in 3 dimensional.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "atom_index",
                "description": "The index of the atom.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "shell",
                "description": "The shell number.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "onsite_energy",
                "description": "On-site energy of the orbital.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 25,
            "m_parent_sub_section": "section_definitions",
            "name": "TwoCenterBond",
            "description": "Section to define a two-center approximation bond between two atoms.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "bond_label",
                "description": "Name of the Slater-Koster bond to identify the bond.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "center1",
                "description": "Name of the Slater-Koster bond to identify the bond.",
                "sub_section": "/packages/2/section_definitions/24",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "center2",
                "description": "Name of the Slater-Koster bond to identify the bond.",
                "sub_section": "/packages/2/section_definitions/24",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 26,
            "m_parent_sub_section": "section_definitions",
            "name": "SlaterKosterBond",
            "description": "Section to define a two-center approximation bond between two atoms",
            "base_sections": [
              "/packages/2/section_definitions/25"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "sss",
                "description": "The Slater Koster integral of type sigma between two s orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "sps",
                "description": "The Slater Koster integral of type sigma between s and p orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "sds",
                "description": "The Slater Koster integral of type sigma between s and d orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "sfs",
                "description": "The Slater Koster integral of type sigma between s and f orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "pps",
                "description": "The Slater Koster integral of type sigma between two p orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "ppp",
                "description": "The Slater Koster integral of type pi between two p orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "pds",
                "description": "The Slater Koster integral of type sigma between p and d orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "pdp",
                "description": "The Slater Koster integral of type pi between p and d orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "pfs",
                "description": "The Slater Koster integral of type sigma between p and f orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "pfp",
                "description": "The Slater Koster integral of type pi between p and f orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "dds",
                "description": "The Slater Koster integral of type sigma between two d orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "name": "ddp",
                "description": "The Slater Koster integral of type pi between two d orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "name": "ddd",
                "description": "The Slater Koster integral of type delta between two d orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 13,
                "m_parent_sub_section": "quantities",
                "name": "dfs",
                "description": "The Slater Koster integral of type sigma between d and f orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 14,
                "m_parent_sub_section": "quantities",
                "name": "dfp",
                "description": "The Slater Koster integral of type pi between d and f orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 15,
                "m_parent_sub_section": "quantities",
                "name": "dfd",
                "description": "The Slater Koster integral of type delta between d and f orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 16,
                "m_parent_sub_section": "quantities",
                "name": "ffs",
                "description": "The Slater Koster integral of type sigma between two f orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 17,
                "m_parent_sub_section": "quantities",
                "name": "ffp",
                "description": "The Slater Koster integral of type pi between two f orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 18,
                "m_parent_sub_section": "quantities",
                "name": "ffd",
                "description": "The Slater Koster integral of type delta between two f orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 19,
                "m_parent_sub_section": "quantities",
                "name": "fff",
                "description": "The Slater Koster integral of type phi between two f orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 27,
            "m_parent_sub_section": "section_definitions",
            "name": "SlaterKoster",
            "description": "Section containing the various parameters that define a Slater-Koster",
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "orbitals",
                "sub_section": "/packages/2/section_definitions/24",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "bonds",
                "sub_section": "/packages/2/section_definitions/26",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "overlaps",
                "sub_section": "/packages/2/section_definitions/26",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 28,
            "m_parent_sub_section": "section_definitions",
            "name": "xTB",
            "description": "Section containing the parameters pertaining to an extended tight-binding (xTB) calculation.",
            "base_sections": [
              "/packages/2/section_definitions/20"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "hamiltonian",
                "sub_section": "/packages/2/section_definitions/19",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "overlap",
                "sub_section": "/packages/2/section_definitions/19",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "repulsion",
                "sub_section": "/packages/2/section_definitions/19",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 3,
                "m_parent_sub_section": "sub_sections",
                "name": "magnetic",
                "sub_section": "/packages/2/section_definitions/19",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 4,
                "m_parent_sub_section": "sub_sections",
                "name": "coulomb",
                "sub_section": "/packages/2/section_definitions/19",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 29,
            "m_parent_sub_section": "section_definitions",
            "name": "Wannier",
            "description": "Section containing the various parameters that define a Wannier tight-binding method.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_projected_orbitals",
                "description": "Number of Wannier orbitals used to fit the DFT band structure",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_bands",
                "description": "Number of input Bloch bands to calculate the projection matrix.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "is_maximally_localized",
                "description": "Are the projected orbitals maximally localized or just a single-shot projection?",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "convergence_tolerance_max_localization",
                "description": "Convergence tolerance for maximal localization of the projected orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "energy_window_outer",
                "description": "Bottom and top of the outer energy window used for the projection.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  2
                ],
                "unit": "electron_volt"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "energy_window_inner",
                "description": "Bottom and top of the inner energy window used for the projection.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  2
                ],
                "unit": "electron_volt"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 30,
            "m_parent_sub_section": "section_definitions",
            "name": "TB",
            "description": "Section containing the parameters pertaining to a tight-binding calculation. The TB model can be derived from the Slater-Koster integrals, the xTB perturbation theory, or\nthe Wannier projection.",
            "base_sections": [
              "/packages/2/section_definitions/20"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "slater_koster",
                "sub_section": "/packages/2/section_definitions/27",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "xtb",
                "sub_section": "/packages/2/section_definitions/28",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "wannier",
                "sub_section": "/packages/2/section_definitions/29",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 31,
            "m_parent_sub_section": "section_definitions",
            "name": "HoppingMatrix",
            "description": "Section containing the hopping/overlap matrix elements between N projected orbitals. This is also the output of a TB calculation.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_orbitals",
                "description": "Number of projected orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_wigner_seitz_points",
                "description": "Number of Wigner-Seitz real points.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "degeneracy_factors",
                "description": "Degeneracy of each Wigner-Seitz grid point.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "n_wigner_seitz_points"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Real space hopping matrix for each Wigner-Seitz grid point. The elements are\ndefined as follows:\n\n    n_x   n_y   n_z   orb_1   orb_2   real_part + j * imag_part\n\nwhere (n_x, n_y, n_z) define the Wigner-Seitz cell vector in fractional coordinates,\n(orb_1, orb_2) indicates the hopping amplitude between orb_1 and orb_2, and the\nreal and imaginary parts of the hopping in electron_volt.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_wigner_seitz_points",
                  "n_orbitals * n_orbitals",
                  7
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 32,
            "m_parent_sub_section": "section_definitions",
            "name": "LatticeModelHamiltonian",
            "description": "Section containing the parameters of the non-interacting parts of a lattice model Hamiltonian.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "lattice_name",
                "description": "Name of the lattice to identify the model. E.g., 'Square', 'Honeycomb'.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_neighbors",
                "description": "Number of direct neighbors considered for the hopping integrals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "t_parameters",
                "description": "Hopping parameters for simple models, with [t, t`, t``, etc].",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "complex128"
                },
                "shape": [
                  "n_neighbors"
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "hopping_matrix",
                "sub_section": "/packages/2/section_definitions/31",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "hubbard_kanamori_model",
                "sub_section": "/packages/2/section_definitions/6",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 33,
            "m_parent_sub_section": "section_definitions",
            "name": "CoreHoleSpectra",
            "description": "Section containing the various parameters that define a calculation of core-hole spectra. It can be within BSE as a \"core\" subsection.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "solver",
                "description": "Solver algorithm used for the core-hole spectra.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "edge",
                "description": "Edge to be calculated for the core-hole spectra.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "K",
                    "L1",
                    "L2",
                    "L23",
                    "L3",
                    "M1",
                    "M2",
                    "M23",
                    "M3",
                    "M4",
                    "M45",
                    "M5",
                    "N1",
                    "N2",
                    "N23",
                    "N3",
                    "N4",
                    "N45",
                    "N5"
                  ]
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "mode",
                "description": "Type of spectra to be calculated: absorption or emission.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "absorption",
                    "emission"
                  ]
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "broadening",
                "description": "Core-hole lifetime broadening applied to the edge spectra in full-width at half maximum.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "joule"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 34,
            "m_parent_sub_section": "section_definitions",
            "name": "ExcitedStateMethodology",
            "description": "Base class containing the common numerical parameters typical of excited-state calculations.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "Type which allows to identify the excited-state calculation with a\ncommon string.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_states",
                "description": "Number of states used to calculate the excitations.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_empty_states",
                "description": "Number of empty states used to calculate the excitations. This quantity is\ncomplementary to `n_states`.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "broadening",
                "description": "Lifetime broadening applied to the spectra in full-width at half maximum.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "joule"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "k_mesh",
                "sub_section": "/packages/2/section_definitions/2"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "q_mesh",
                "sub_section": "/packages/2/section_definitions/2"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "frequency_mesh",
                "sub_section": "/packages/2/section_definitions/3"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 35,
            "m_parent_sub_section": "section_definitions",
            "name": "Screening",
            "description": "Section containing the various parameters that define a screening calculation, as for example, in RPA.",
            "base_sections": [
              "/packages/2/section_definitions/34"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "dielectric_infinity",
                "description": "Value of the static dielectric constant at infinite q. For metals, this is infinite\n(or a very large value), while for insulators is finite.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 36,
            "m_parent_sub_section": "section_definitions",
            "name": "GW",
            "description": "Section containing the various parameters that define a GW calculation.",
            "base_sections": [
              "/packages/2/section_definitions/34"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "GW Hedin's self-consistency cycle:\n\n| Name      | Description                      | Reference             |\n\n| --------- | -------------------------------- | --------------------- |\n\n| `'G0W0'`  | single-shot                      | PRB 74, 035101 (2006) |\n\n| `'scGW'`  | self-consistent G and W               | PRB 75, 235102 (2007) |\n\n| `'scGW0'` | self-consistent G with fixed W0  | PRB 54, 8411 (1996)   |\n\n| `'scG0W'` | self-consistent W with fixed G0  | -                     |\n\n| `'ev-scGW0'`  | eigenvalues self-consistent G with fixed W0   | PRB 34, 5390 (1986)   |\n\n| `'ev-scGW'`  | eigenvalues self-consistent G and W   | PRB 74, 045102 (2006)   |\n\n| `'qp-scGW0'`  | quasiparticle self-consistent G with fixed W0 | PRL 99, 115109 (2007) |\n\n| `'qp-scGW'`  | quasiparticle self-consistent G and W | PRL 96, 226402 (2006) |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "G0W0",
                    "ev-scGW",
                    "ev-scGW0",
                    "qp-scGW",
                    "qp-scGW0",
                    "scG0W",
                    "scGW",
                    "scGW0"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "analytical_continuation",
                "description": "Analytical continuation approximations of the GW self-energy:\n\n| Name           | Description         | Reference                        |\n\n| -------------- | ------------------- | -------------------------------- |\n\n| `'pade'` | Pade's approximant  | J. Low Temp. Phys 29, 179 (1977) |\n\n| `'contour_deformation'` | Contour deformation | PRB 67, 155208 (2003) |\n\n| `'ppm_GodbyNeeds'` | Godby-Needs plasmon-pole model | PRL 62, 1169 (1989) |\n\n| `'ppm_HybertsenLouie'` | Hybertsen and Louie plasmon-pole model | PRB 34, 5390 (1986) |\n\n| `'ppm_vonderLindenHorsh'` | von der Linden and P. Horsh plasmon-pole model | PRB 37, 8351 (1988) |\n\n| `'ppm_FaridEngel'` | Farid and Engel plasmon-pole model  | PRB 47, 15931 (1993) |\n\n| `'multi_pole'` | Multi-pole fitting  | PRL 74, 1827 (1995) |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "contour_deformation",
                    "multi_pole",
                    "pade",
                    "ppm_FaridEngel",
                    "ppm_GodbyNeeds",
                    "ppm_HybertsenLouie",
                    "ppm_vonderLindenHorsh"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "interval_qp_corrections",
                "description": "Band indices (in an interval) for which the GW quasiparticle corrections are\ncalculated.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  2
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "screening",
                "sub_section": "/packages/2/section_definitions/35"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 37,
            "m_parent_sub_section": "section_definitions",
            "name": "BSE",
            "description": "Section containing the various parameters that define a BSE calculation.",
            "base_sections": [
              "/packages/2/section_definitions/34"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "Type of BSE hamiltonian solved:\n\n    H_BSE = H_diagonal + 2 * gx * Hx - gc * Hc\n\nwhere gx, gc specifies the type.\n\nOnline resources for the theory:\n- http://exciting.wikidot.com/carbon-excited-states-from-bse#toc1\n- https://www.vasp.at/wiki/index.php/Bethe-Salpeter-equations_calculations\n- https://docs.abinit.org/theory/bse/\n- https://www.yambo-code.eu/wiki/index.php/Bethe-Salpeter_kernel\n\n| Name | Description |\n\n| --------- | ----------------------- |\n\n| `'Singlet'` | gx = 1, gc = 1 |\n\n| `'Triplet'` | gx = 0, gc = 1 |\n\n| `'IP'` | Independent-particle approach |\n\n| `'RPA'` | Random Phase Approximation |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "IP",
                    "RPA",
                    "Singlet",
                    "Triplet"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "solver",
                "description": "Solver algotithm used to diagonalize the BSE Hamiltonian.\n\n| Name | Description | Reference |\n\n| --------- | ----------------------- | ----------- |\n\n| `'Full-diagonalization'` | Full diagonalization of the BSE Hamiltonian | - |\n\n| `'Lanczos-Haydock'` | Subspace iterative Lanczos-Haydock algorithm | https://doi.org/10.1103/PhysRevB.59.5441 |\n\n| `'GMRES'` | Generalized minimal residual method | https://doi.org/10.1137/0907058 |\n\n| `'SLEPc'` | Scalable Library for Eigenvalue Problem Computations | https://slepc.upv.es/ |\n\n| `'TDA'` | Tamm-Dancoff approximation | https://doi.org/10.1016/S0009-2614(99)01149-5 |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "Full-diagonalization",
                    "GMRES",
                    "Lanczos-Haydock",
                    "SLEPc",
                    "TDA"
                  ]
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "screening",
                "sub_section": "/packages/2/section_definitions/35"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "core_hole",
                "sub_section": "/packages/2/section_definitions/33"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 38,
            "m_parent_sub_section": "section_definitions",
            "name": "DMFT",
            "description": "Section containing the various parameters that define a DMFT calculation",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_impurities",
                "description": "Number of impurities mapped from the correlated atoms in the unit cell.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_correlated_orbitals",
                "description": "Number of correlated orbitals per impurity.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "n_impurities"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_electrons",
                "description": "Initial number of valence electrons per impurity.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_impurities"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "inverse_temperature",
                "description": "Inverse temperature = 1/(kB*T).",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "1 / joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "magnetic_state",
                "description": "Magnetic state in which the DMFT calculation is done:\n\n| Name                  | State                   |\n\n| --------------------- | ----------------------- |\n\n| `'paramagnetic'`      | paramagnetic state      |\n\n| `'ferromagnetic'`     | ferromagnetic state     |\n\n| `'antiferromagnetic'` | antiferromagnetic state |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "antiferromagnetic",
                    "ferromagnetic",
                    "paramagnetic"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "impurity_solver",
                "description": "Impurity solver method used in the DMFT loop:\n\n| Name              | Reference                            |\n\n| ----------------- | ------------------------------------ |\n\n| `'CT-INT'`        | Rubtsov et al., JEPT Lett 80 (2004)  |\n\n| `'CT-HYB'`        | Werner et al., PRL 97 (2006)         |\n\n| `'CT-AUX'`        | Gull et al., EPL 82 (2008)           |\n\n| `'ED'`            | Caffarrel et al, PRL 72 (1994)       |\n\n| `'NRG'`           | Bulla et al., RMP 80 (2008)          |\n\n| `'MPS'`           | Ganahl et al., PRB 90 (2014)         |\n\n| `'IPT'`           | Georges et al., PRB 45 (1992)        |\n\n| `'NCA'`           | Pruschke et al., PRB 47 (1993)       |\n\n| `'OCA'`           | Pruschke et al., PRB 47 (1993)       |\n\n| `'slave_bosons'`  | Kotliar et al., PRL 57 (1986)        |\n\n| `'hubbard_I'`     | -                                    |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "CT-AUX",
                    "CT-HYB",
                    "CT-INT",
                    "ED",
                    "IPT",
                    "MPS",
                    "NCA",
                    "NRG",
                    "OCA",
                    "hubbard_I",
                    "slave_bosons"
                  ]
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 39,
            "m_parent_sub_section": "section_definitions",
            "name": "NeighborSearching",
            "description": "Section containing the parameters for neighbor searching/lists during a molecular dynamics run.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "neighbor_update_frequency",
                "description": "Number of timesteps between updating the neighbor list.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "neighbor_update_cutoff",
                "description": "The distance cutoff for determining the neighbor list.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 40,
            "m_parent_sub_section": "section_definitions",
            "name": "ForceCalculations",
            "description": "Section containing the parameters for force calculations according to the referenced force field during a molecular dynamics run.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "vdw_cutoff",
                "description": "Cutoff for calculating VDW forces.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "coulomb_type",
                "description": "Method used for calculating long-ranged Coulomb forces.\n\nAllowed values are:\n\n| Barostat Name          | Description                               |\n\n| ---------------------- | ----------------------------------------- |\n\n| `\"\"`                   | No thermostat               |\n\n| `\"Cutoff\"`          | Simple cutoff scheme. |\n\n| `\"Ewald\"` | Standard Ewald summation as described in any solid-state physics text. |\n\n| `\"Multi-Level Summation\"` |  D. Hardy, J.E. Stone, and K. Schulten,\n[Parallel. Comput. **35**, 164](https://doi.org/10.1016/j.parco.2008.12.005)|\n\n| `\"Particle-Mesh-Ewald\"`        | T. Darden, D. York, and L. Pedersen,\n[J. Chem. Phys. **98**, 10089 (1993)](https://doi.org/10.1063/1.464397) |\n\n| `\"Particle-Particle Particle-Mesh\"` | See e.g. Hockney and Eastwood, Computer Simulation Using Particles,\nAdam Hilger, NY (1989). |\n\n| `\"Reaction-Field\"` | J.A. Barker and R.O. Watts,\n[Mol. Phys. **26**, 789 (1973)](https://doi.org/10.1080/00268977300102101)|",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "cutoff",
                    "ewald",
                    "multilevel_summation",
                    "particle_mesh_ewald",
                    "particle_particle_particle_mesh",
                    "reaction_field"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "coulomb_cutoff",
                "description": "Cutoff for calculating short-ranged Coulomb forces.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "neighbor_searching",
                "sub_section": "/packages/2/section_definitions/39",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 41,
            "m_parent_sub_section": "section_definitions",
            "name": "ForceField",
            "description": "Section containing the parameters pertaining to a force field calculation.",
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "model",
                "sub_section": "/packages/2/section_definitions/20",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "force_calculations",
                "sub_section": "/packages/2/section_definitions/40",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 42,
            "m_parent_sub_section": "section_definitions",
            "name": "Smearing",
            "description": "Section containing the parameters related to the smearing of the electronic density of states at the Fermi level.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "kind",
                "description": "Specifies the kind of smearing on the electron occupation used to calculate the\nfree energy (see energy_free)\n\nValid values are:\n\n| Smearing kind             | Description                       |\n\n| ------------------------- | --------------------------------- |\n\n| `\"empty\"`                 | No smearing is applied            |\n\n| `\"gaussian\"`              | Gaussian smearing                 |\n\n| `\"fermi\"`                 | Fermi smearing                    |\n\n| `\"marzari-vanderbilt\"`    | Marzari-Vanderbilt smearing       |\n\n| `\"methfessel-paxton\"`     | Methfessel-Paxton smearing        |\n\n| `\"tetrahedra\"`            | Interpolation of state energies and occupations\n(ignores smearing_width) |",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "width",
                "description": "Specifies the width of the smearing in energy for the electron occupation used to\ncalculate the free energy (see energy_free).\n\n*NOTE:* Not all methods specified in smearing_kind uses this value.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 43,
            "m_parent_sub_section": "section_definitions",
            "name": "Electronic",
            "description": "Section containing the parameters related to the electronic structure.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "spin_target",
                "description": "Stores the target (user-imposed) value of the spin multiplicity $M=2S+1$, where\n$S$ is the total spin. It is an integer number. This value is not necessarily the\nvalue obtained at the end of the calculation. See spin_S2 for the converged value\nof the spin moment.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "charge",
                "description": "Stores the total charge of the system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "coulomb"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_bands",
                "description": "Specifies the number of bands used in the calculation.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "n_spin_channels",
                "description": "Gives the number of spin channels.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "n_electrons",
                "description": "Number of valence electrons in the system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "method",
                "description": "Non-unique string identifying the used electronic structure method. It is not\nunique in the sense that two calculations with the same\nelectronic structure method string may have not been performed with exactly the\nsame method.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "relativity_method",
                "description": "Describes the relativistic treatment used for the calculation of the final energy\nand related quantities. If skipped or empty, no relativistic treatment is applied.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "pseudo_scalar_relativistic",
                    "scalar_relativistic",
                    "scalar_relativistic_atomic_ZORA"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "van_der_waals_method",
                "description": "Describes the Van der Waals method. If skipped or an empty string is used, it\nmeans no Van der Waals correction is applied.\n\nAllowed values are:\n\n| Van der Waals method  | Description                               |\n\n| --------------------- | ----------------------------------------- |\n\n| `\"\"`                  | No Van der Waals correction               |\n\n| `\"TS\"`                | A. Tkatchenko and M. Scheffler, [Phys. Rev. Lett.\n**102**, 073005 (2009)](http://dx.doi.org/10.1103/PhysRevLett.102.073005) |\n\n| `\"OBS\"`               | F. Ortmann, F. Bechstedt, and W. G. Schmidt, [Phys. Rev.\nB **73**, 205101 (2006)](http://dx.doi.org/10.1103/PhysRevB.73.205101) |\n\n| `\"G06\"`               | S. Grimme, [J. Comput. Chem. **27**, 1787\n(2006)](http://dx.doi.org/10.1002/jcc.20495) |\n\n| `\"JCHS\"`              | P. Jure\u010dka, J. \u010cern\u00fd, P. Hobza, and D. R. Salahub,\n[Journal of Computational Chemistry **28**, 555\n(2007)](http://dx.doi.org/10.1002/jcc.20570) |\n\n| `\"MDB\"`               | Many-body dispersion. A. Tkatchenko, R. A. Di Stasio Jr,\nR. Car, and M. Scheffler, [Physical Review Letters **108**, 236402\n(2012)](http://dx.doi.org/10.1103/PhysRevLett.108.236402) and A. Ambrosetti, A. M.\nReilly, R. A. Di Stasio Jr, and A. Tkatchenko, [The Journal of Chemical Physics\n**140**, 18A508 (2014)](http://dx.doi.org/10.1063/1.4865104) |\n\n| `\"XC\"`                | The method to calculate the Van der Waals energy uses a\nnon-local functional which is described in section_XC_functionals. |",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "smearing",
                "sub_section": "/packages/2/section_definitions/42"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 44,
            "m_parent_sub_section": "section_definitions",
            "name": "Method",
            "description": "Section containing the various parameters that define the theory and the approximations (convergence, thresholds, etc.) behind the calculation.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "stress_tensor_method",
                "description": "Specifies the method used to calculate stress_tensor for, e.g., molecular dynamics\nand geometry optimization.\n\nThe allowed values are:\n\n* numeric\n\n* analytic",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "starting_method_ref",
                "description": "Links the current section method to a section method containing the starting\nparameters.",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/2/section_definitions/44"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "core_method_ref",
                "description": "Links the current section method to a section method containing the core settings.",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/2/section_definitions/44"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "n_references",
                "description": "Number of references to the current method.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "methods_ref",
                "description": "Links the section method to other method sections. For instance, one calculation\nis a perturbation performed using a self-consistent field (SCF) calculation as\nstarting point, or a simulated system is partitioned in regions with different but\nconnected Hamiltonians (e.g., QM/MM, or a region treated via Kohn-Sham DFT\nembedded into a region treated via orbital-free DFT).",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/2/section_definitions/44"
                },
                "shape": [
                  "n_references"
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "dft",
                "sub_section": "/packages/2/section_definitions/23"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "tb",
                "sub_section": "/packages/2/section_definitions/30"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "lattice_model_hamiltonian",
                "sub_section": "/packages/2/section_definitions/32",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 3,
                "m_parent_sub_section": "sub_sections",
                "name": "gw",
                "sub_section": "/packages/2/section_definitions/36"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 4,
                "m_parent_sub_section": "sub_sections",
                "name": "bse",
                "sub_section": "/packages/2/section_definitions/37"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 5,
                "m_parent_sub_section": "sub_sections",
                "name": "dmft",
                "sub_section": "/packages/2/section_definitions/38"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 6,
                "m_parent_sub_section": "sub_sections",
                "name": "force_field",
                "sub_section": "/packages/2/section_definitions/41"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 7,
                "m_parent_sub_section": "sub_sections",
                "name": "core_hole",
                "sub_section": "/packages/2/section_definitions/33"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 8,
                "m_parent_sub_section": "sub_sections",
                "name": "k_mesh",
                "sub_section": "/packages/2/section_definitions/2"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 9,
                "m_parent_sub_section": "sub_sections",
                "name": "frequency_mesh",
                "sub_section": "/packages/2/section_definitions/3",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 10,
                "m_parent_sub_section": "sub_sections",
                "name": "time_mesh",
                "sub_section": "/packages/2/section_definitions/4",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 11,
                "m_parent_sub_section": "sub_sections",
                "name": "electronic",
                "sub_section": "/packages/2/section_definitions/43"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 12,
                "m_parent_sub_section": "sub_sections",
                "name": "scf",
                "sub_section": "/packages/2/section_definitions/5"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 13,
                "m_parent_sub_section": "sub_sections",
                "name": "atom_parameters",
                "more": {
                  "label_quantity": "label"
                },
                "sub_section": "/packages/2/section_definitions/10",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 14,
                "m_parent_sub_section": "sub_sections",
                "name": "molecule_parameters",
                "more": {
                  "label_quantity": "label"
                },
                "sub_section": "/packages/2/section_definitions/11",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 15,
                "m_parent_sub_section": "sub_sections",
                "name": "electrons_representation",
                "more": {
                  "label_quantity": "type"
                },
                "sub_section": "/packages/2/section_definitions/18",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 16,
                "m_parent_sub_section": "sub_sections",
                "name": "photon",
                "sub_section": "/packages/2/section_definitions/12",
                "repeats": true
              }
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 3,
        "m_parent_sub_section": "packages",
        "name": "nomad.datamodel.metainfo.simulation.system",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "AtomsGroup",
            "description": "Describes a group of atoms which may constitute a sub system as in the case of a molecule.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "label",
                "description": "Label of the group.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "Type of the group.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "index",
                "description": "Index of the group with respect to its parent group.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "composition_formula",
                "description": "The overall composition of the group with respect to its subgroups.\nThe syntax for a groups composed of X and Y with x and y components of each,\nrespectively, is X(x)Y(y).",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "n_atoms",
                "description": "The total number of atoms in the group.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "atom_indices",
                "description": "Indices of the atoms in the group with respect to the system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "n_atoms"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "is_molecule",
                "description": "Denotes if the atoms in this group represent a molecule. That is, all atoms\nin the group are connected via bonds, and no other atoms contain bonds\nwith these atoms.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "bond_list",
                "description": "List of pairs of atom indices corresponding to bonds (e.g., as defined by a force field) within this atoms_group.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "atoms_group",
                "sub_section": "/packages/3/section_definitions/0",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "Atoms",
            "description": "Describes the atomic structure of the physical system. This includes the atom positions, lattice vectors, etc.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_atoms",
                "description": "The total number of species (atoms, particles) in the system.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "atomic_numbers",
                "description": "List of atomic numbers Z of the atoms identified in labels. If a species cannot\nbe assigned Z, a negative value can also be used to distinguish it.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "n_atoms"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "equivalent_atoms",
                "description": "Gives a mapping table of atoms to symmetrically independent atoms in the\nstandardized cell. This is used to find symmetrically equivalent atoms.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "n_atoms"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "wyckoff_letters",
                "description": "Wyckoff letters corresponding to each atom.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "n_atoms"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "concentrations",
                "description": "Concentrations of the species defined by labels which can be assigned for systems\nwith variable compositions.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_atoms"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "species",
                "description": "Species of the atom (normally the atomic number Z, 0 or negative for unidentifed\nspecies or particles that are not atoms.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "n_atoms"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "labels",
                "description": "List containing the labels of the atoms. In the usual case, these correspond to\nthe chemical symbols of the atoms. One can also append an index if there is a\nneed to distinguish between species with the same symbol, e.g., atoms of the\nsame species assigned to different atom-centered basis sets or pseudo-potentials,\nor simply atoms in different locations in the structure such as those in the bulk\nand on the surface. In the case where a species is not an atom, and therefore\ncannot be representated by a chemical symbol, the label can simply be the name of\nthe particles.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "n_atoms"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "positions",
                "description": "Positions of all the species, in cartesian coordinates. This metadata defines a\nconfiguration and is therefore required. For alloys where concentrations of\nspecies are given for each site in the unit cell, it stores the position of the\nsites.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_atoms",
                  3
                ],
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "velocities",
                "description": "Velocities of the nuclei, defined as the change in cartesian coordinates of the\nnuclei with respect to time.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_atoms",
                  3
                ],
                "unit": "meter / second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "lattice_vectors",
                "description": "Lattice vectors of the simulation cell in cartesian coordinates. The\nlast (fastest) index runs over the $x,y,z$ Cartesian coordinates, and the first\nindex runs over the 3 lattice vectors.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64",
                  "disable_shape_check": true
                },
                "shape": [
                  3,
                  3
                ],
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "lattice_vectors_reciprocal",
                "description": "Reciprocal lattice vectors of the simulation cell, in cartesian coordinates and with the 2 $pi$ pre-factor.\nThe first index runs over the $x,y,z$ Cartesian coordinates, and the second index runs\nover the 3 lattice vectors.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3,
                  3
                ],
                "unit": "1 / meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "name": "local_rotations",
                "description": "A rotation matrix defining the orientation of each atom. If the rotation matrix\ncannot be specified for an atom, the remaining atoms should set it to\nthe zero matrix (not the identity!)",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_atoms",
                  3,
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "name": "periodic",
                "description": "Denotes if periodic boundary condition is applied to each of the lattice vectors.'",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": [
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 13,
                "m_parent_sub_section": "quantities",
                "name": "supercell_matrix",
                "description": "Specifies the matrix that transforms the unit-cell into the super-cell in which\nthe actual calculation is performed.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  3,
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 14,
                "m_parent_sub_section": "quantities",
                "name": "symmorphic",
                "description": "Specifies if the space group is symmorphic. Set to True if all translations are\nzero.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 15,
                "m_parent_sub_section": "quantities",
                "name": "bond_list",
                "description": "List of pairs of atom indices corresponding to bonds (e.g., as defined by a force field) within the entire system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "name": "Symmetry",
            "description": "Section containing information about the symmetry properties of the atomic system.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "bravais_lattice",
                "description": "Identifier for the Bravais lattice in Pearson notation. The first lowercase letter\nidentifies the crystal family and can be one of the following: a (triclinic), b\n(monoclinic), o (orthorhombic), t (tetragonal), h (hexagonal) or c (cubic). The\nsecond uppercase letter identifies the centring and can be one of the following: P\n(primitive), S (face centred), I (body centred), R (rhombohedral centring) or F\n(all faces centred).",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "choice",
                "description": "String that specifies the centering, origin and basis vector settings of the 3D\nspace group that defines the symmetry group of the simulated physical system (see\nsection system). Values are as defined by spglib.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "crystal_system",
                "description": "Name of the crystal system. Can be one of the following: triclinic, monoclinic,\northorhombic, tetragonal, trigonal, hexagonal or cubic.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "hall_number",
                "description": "The Hall number for this system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "hall_symbol",
                "description": "The Hall symbol for this system.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "international_short_symbol",
                "description": "Specifies the International Union of Crystallography (IUC) short symbol of the 3D\nspace group of this system",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "origin_shift",
                "description": "Vector $\\mathbf{p}$ from the origin of the standardized system to the origin of\nthe original system. Together with the matrix $\\mathbf{P}$, found in\nspace_group_3D_transformation_matrix, the transformation between the standardized\ncoordinates $\\mathbf{x}_s$ and original coordinates $\\mathbf{x}$ is then given\nby $\\mathbf{x}_s = \\mathbf{P} \\mathbf{x} + \\mathbf{p}$.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "point_group",
                "description": "Symbol of the crystallographic point group in the Hermann-Mauguin notation.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "space_group_number",
                "description": "Specifies the International Union of Crystallography (IUC) number of the 3D space\ngroup of this system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "symmetry_method",
                "description": "Identifies the source of the symmetry information contained within this section.\nIf equal to 'spg_normalized' the information comes from a normalization step.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "transformation_matrix",
                "description": "Matrix $\\mathbf{P}$ that is used to transform the standardized coordinates to the\noriginal coordinates. Together with the vector $\\mathbf{p}$, found in\nspace_group_3D_origin_shift, the transformation between the standardized\ncoordinates $\\mathbf{x}_s$ and original coordinates $\\mathbf{x}$ is then given by\n$\\mathbf{x}_s = \\mathbf{P} \\mathbf{x} + \\mathbf{p}$.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3,
                  3
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "system_original",
                "sub_section": "/packages/3/section_definitions/1",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "system_primitive",
                "sub_section": "/packages/3/section_definitions/1",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "system_std",
                "sub_section": "/packages/3/section_definitions/1",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 3,
            "m_parent_sub_section": "section_definitions",
            "name": "Prototype",
            "description": "Information on the prototype corresponding to the current section.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "aflow_id",
                "description": "AFLOW id of the prototype (see\nhttp://aflowlib.org/CrystalDatabase/prototype_index.html) identified on the basis\nof the space_group and normalized_wyckoff.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "aflow_url",
                "description": "Url to the AFLOW definition of the prototype (see\nhttp://aflowlib.org/CrystalDatabase/prototype_index.html) identified on the basis\nof the space_group and normalized_wyckoff.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "assignment_method",
                "description": "Method used to identify the prototype.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "label",
                "description": "Label of the prototype identified on the basis of the space_group and\nnormalized_wyckoff. The label is in the same format as in the read_prototypes\nfunction: <space_group_number>-<prototype_name>-<Pearson's symbol>).",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 4,
            "m_parent_sub_section": "section_definitions",
            "name": "SpringerMaterial",
            "description": "Contains results of classification of materials with the same formula according to Springer Materials. These include material and compound classsification, formula,\nid, and references from the Springer Materials database.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "id",
                "description": "Id of the classified material according to Springer Materials.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "alphabetical_formula",
                "description": "The alphabetical formula of the material according to Springer Materials Database",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "url",
                "description": "Url to the source page in Springer Materials describing the current entry",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "compound_class",
                "description": "Name of a class of the current compound, as defined in by Springer Materials. This\nis a property of the chemical formula of the compound",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "N"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "classification",
                "description": "Contains the classification name of the current material according to Springer\nMaterials",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "N"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 5,
            "m_parent_sub_section": "section_definitions",
            "name": "Constraint",
            "description": "Section describing a constraint between arbitrary atoms.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "kind",
                "description": "Short and unique name for this constraint type. Could be fix_a where a can be\nx, y, z denoting a constraint along a cartesian direction, xy, xz, yz denoting a\nconstaint along a cartesian plane, xyz denoting a fixed position, distance\ndenoting a fixed distance between two atoms, angle denoting a fixed angle between\nthree atoms, and dihedral denoting a fixed dihedral angle.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_constraints",
                "description": "Number of constraints of this type.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_atoms",
                "description": "Number of atoms involved in this constraint.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "atom_indices",
                "description": "List of the indexes involved in this constraint.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "n_constraints",
                  "n_atoms"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "parameters",
                "description": "Explicit constraint parameters for this kind of constraint (depending on the\nconstraint type, some might be given implicitly through other means).",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Any"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 6,
            "m_parent_sub_section": "section_definitions",
            "name": "SOAP",
            "description": "\n        SOAP descritors and representations\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_max",
                "description": "Number of radial basis functions in density expansion",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "l_max",
                "description": "Order of Spherical harmonics.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "r_cut",
                "description": "Cutoff distance defining each local environment.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "atom_sigma",
                "description": "Width of Gaussians used in density expansion",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "soap",
                "description": "Full SOAP stored in array format.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_sites",
                  "*",
                  "*",
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "tr_soap",
                "description": "Normalised, tensor-reduced SOAP stored as a flat vector.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_sites",
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "global_soap",
                "description": "Full SOAP, c_znlm averaged across sites, stored in array format.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*",
                  "*",
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "global_tr_soap",
                "description": "Normalised, tensor-reduced global, c_znlm averaged across sites, SOAP stored as a flat vector.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 7,
            "m_parent_sub_section": "section_definitions",
            "name": "Descriptors",
            "description": "\n        Contains atomic descriptors and structural representations\n        ",
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "soap",
                "sub_section": "/packages/3/section_definitions/6",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 8,
            "m_parent_sub_section": "section_definitions",
            "name": "System",
            "description": "Contains parameters describing a system of atomic configuration. These inclue the compound name, atomic positions, lattice vectors, contraints on the atoms, etc.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "name",
                "description": "Specifies the name of the system. This information is provided by the user in some\ncodes and is stored here for debugging or visualization purposes.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "Type of the system (atom, bulk, surface, etc.) which is determined by the\nnormalizer.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "configuration_raw_gid",
                "description": "checksum of the configuration_core, i.e. the geometry of the system. The values\nare not normalized in any way so equivalent configurations might have different\nvalues",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "is_representative",
                "description": "Most systems in a run are only minor variations of each other. Systems marked\nrepresentative where chosen to be representative for all systems in the run.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "n_references",
                "description": "Number of references to the current section system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "sub_system_ref",
                "description": "Links the current section system to a sub system.",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/3/section_definitions/8"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "systems_ref",
                "description": "Links the current section system to other section systems. Such a link is\nnecessary for example between the supercell and the reference unit cell in a phonon\ncalculation. The relationship should be described by kind and the referred section\nsystem is given by value. An external url can also be provided in place of value.",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/3/section_definitions/8"
                },
                "shape": [
                  "n_references"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "chemical_composition",
                "description": "The full chemical composition of the system, based on atom species.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "chemical_composition_hill",
                "description": "The chemical composition in the hill convention of the system, based on atom species.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "chemical_composition_reduced",
                "description": "The chemical composition as reduced formula of the system, based on atom species.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "chemical_composition_anonymous",
                "description": "The chemical composition without explicit element names of the system, based on\natom species.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "atoms",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/3/section_definitions/1"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "atoms_group",
                "sub_section": "/packages/3/section_definitions/0",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "constraint",
                "sub_section": "/packages/3/section_definitions/5",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 3,
                "m_parent_sub_section": "sub_sections",
                "name": "prototype",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/3/section_definitions/3",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 4,
                "m_parent_sub_section": "sub_sections",
                "name": "springer_material",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/3/section_definitions/4",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 5,
                "m_parent_sub_section": "sub_sections",
                "name": "symmetry",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/3/section_definitions/2",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 6,
                "m_parent_sub_section": "sub_sections",
                "name": "descriptors",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/3/section_definitions/7",
                "repeats": false
              }
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 4,
        "m_parent_sub_section": "packages",
        "name": "nomad.datamodel.metainfo.simulation.calculation",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "Atomic",
            "description": "Generic section containing the values and information reqarding an atomic quantity such as charges, forces, multipoles.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "kind",
                "description": "Kind of the quantity.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_orbitals",
                "description": "Number of orbitals used in the projection.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_atoms",
                "description": "Number of atoms.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "n_spin_channels",
                "description": "Number of spin channels.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "AtomicValues",
            "description": "Generic section containing information regarding the values of an atomic quantity.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "spin",
                "description": "Spin channel corresponding to the atomic quantity.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "atom_label",
                "description": "Label of the atomic species corresponding to the atomic quantity.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "atom_index",
                "description": "Index of the atomic species corresponding to the atomic quantity.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "m_kind",
                "description": "String describing what the integer numbers of $m$ lm mean used in orbital\nprojections. The allowed values are listed in the [m_kind wiki page]\n(https://gitlab.rzg.mpg.de/nomad-lab/nomad-meta-info/wikis/metainfo/m-kind).",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "lm",
                "description": "Tuples of $l$ and $m$ values for which the atomic quantity are given. For\nthe quantum number $l$ the conventional meaning of azimuthal quantum number is\nalways adopted. For the integer number $m$, besides the conventional use as\nmagnetic quantum number ($l+1$ integer values from $-l$ to $l$), a set of\ndifferent conventions is accepted (see the [m_kind wiki\npage](https://gitlab.rzg.mpg.de/nomad-lab/nomad-meta-info/wikis/metainfo/m-kind).\nThe adopted convention is specified by m_kind.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  2
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "orbital",
                "description": "String representation of the of the atomic orbital.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "name": "AtomicGroup",
            "description": "Generic section containing the values and information reqarding a molecular or sub-molecular quantity that is a function of an atomic group such as radius of gyration...",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "kind",
                "description": "Kind of the quantity.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 3,
            "m_parent_sub_section": "section_definitions",
            "name": "AtomicGroupValues",
            "description": "Generic section containing information regarding the values of a trajectory property.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "label",
                "description": "Describes the atoms or molecule types involved in determining the property.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "atomsgroup_ref",
                "description": "References to the atoms_group section containing the molecule for which Rg was calculated.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/3/section_definitions/0"
                },
                "shape": [
                  1
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 4,
            "m_parent_sub_section": "section_definitions",
            "name": "EnergyEntry",
            "description": "Section describing a type of energy or a contribution to the total energy.",
            "base_sections": [
              "/packages/4/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "reference",
                "description": "Value of the reference energy to be subtracted from value to obtain a\ncode-independent value of the energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Value of the energy of the unit cell.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "value_per_atom",
                "description": "Value of the energy normalized by the total number of atoms in the simulation\ncell.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "values_per_atom",
                "description": "Value of the atom-resolved energies.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_atoms"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "potential",
                "description": "Value of the potential energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "kinetic",
                "description": "Value of the kinetic energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "correction",
                "description": "Value of the correction to the energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "short_range",
                "description": "Value of the short range contributions to the energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "long_range",
                "description": "Value of the long range contributions to the energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 5,
            "m_parent_sub_section": "section_definitions",
            "name": "Energy",
            "description": "Section containing all energy types and contributions.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "enthalpy",
                "description": "Value of the calculated enthalpy per cell i.e. energy_total + pressure * volume.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "entropy",
                "description": "Value of the entropy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule / kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "chemical_potential",
                "description": "Value of the chemical potential.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "internal",
                "description": "Value of the internal energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "change",
                "description": "Stores the change of total energy with respect to the previous step.",
                "categories": [
                  "/packages/4/category_definitions/5",
                  "/packages/4/category_definitions/3"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "fermi",
                "description": "Fermi energy (separates occupied from unoccupied single-particle states)",
                "categories": [
                  "/packages/4/category_definitions/4",
                  "/packages/4/category_definitions/3"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "highest_occupied",
                "description": "The highest occupied energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "lowest_unoccupied",
                "description": "The lowest unoccupied energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "total",
                "description": "Contains the value and information regarding the total energy of the system.",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/4/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "current",
                "description": "Contains the value and information regarding the energy calculated with\ncalculation_method_current. energy_current is equal to energy_total for\nnon-perturbative methods. For perturbative methods, energy_current is equal to the\ncorrection: energy_total minus energy_total of the calculation_to_calculation_ref\nwith calculation_to_calculation_kind = starting_point",
                "sub_section": "/packages/4/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "zero_point",
                "description": "Contains the value and information regarding the converged zero-point\nvibrations energy calculated using the method described in zero_point_method.",
                "sub_section": "/packages/4/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 3,
                "m_parent_sub_section": "sub_sections",
                "name": "kinetic_electronic",
                "description": "Contains the value and information regarding the self-consistent electronic\nkinetic energy.",
                "sub_section": "/packages/4/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 4,
                "m_parent_sub_section": "sub_sections",
                "name": "electronic",
                "description": "Contains the value and information regarding the self-consistent electronic\nenergy.",
                "sub_section": "/packages/4/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 5,
                "m_parent_sub_section": "sub_sections",
                "name": "correlation",
                "description": "Contains the value and information regarding the correlation energy calculated\nusing the method described in XC_functional.",
                "sub_section": "/packages/4/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 6,
                "m_parent_sub_section": "sub_sections",
                "name": "exchange",
                "description": "Contains the value and information regarding the exchange energy calculated\nusing the method described in XC_functional.",
                "sub_section": "/packages/4/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 7,
                "m_parent_sub_section": "sub_sections",
                "name": "xc",
                "description": "Contains the value and information regarding the exchange-correlation (XC)\nenergy calculated with the functional stored in XC_functional.",
                "sub_section": "/packages/4/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 8,
                "m_parent_sub_section": "sub_sections",
                "name": "xc_potential",
                "description": "Contains the value and information regarding the exchange-correlation (XC)\npotential energy: the integral of the first order derivative of the functional\nstored in XC_functional (integral of v_xc*electron_density), i.e., the component\nof XC that is in the sum of the eigenvalues. Value associated with the\nconfiguration, should be the most converged value..",
                "sub_section": "/packages/4/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 9,
                "m_parent_sub_section": "sub_sections",
                "name": "electrostatic",
                "description": "Contains the value and information regarding the total electrostatic energy\n(nuclei + electrons), defined consistently with calculation_method.",
                "sub_section": "/packages/4/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 10,
                "m_parent_sub_section": "sub_sections",
                "name": "nuclear_repulsion",
                "description": "Contains the value and information regarding the total nuclear-nuclear repulsion\nenergy.",
                "sub_section": "/packages/4/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 11,
                "m_parent_sub_section": "sub_sections",
                "name": "coulomb",
                "description": "Contains the value and information regarding the Coulomb energy.",
                "sub_section": "/packages/4/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 12,
                "m_parent_sub_section": "sub_sections",
                "name": "madelung",
                "description": "Contains the value and information regarding the Madelung energy.",
                "sub_section": "/packages/4/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 13,
                "m_parent_sub_section": "sub_sections",
                "name": "ewald",
                "description": "Contains the value and information regarding the Ewald energy.",
                "sub_section": "/packages/4/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 14,
                "m_parent_sub_section": "sub_sections",
                "name": "free",
                "description": "Contains the value and information regarding the free energy (nuclei + electrons)\n(whose minimum gives the smeared occupation density calculated with\nsmearing_kind).",
                "sub_section": "/packages/4/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 15,
                "m_parent_sub_section": "sub_sections",
                "name": "sum_eigenvalues",
                "description": "Contains the value and information regarding the sum of the eigenvalues of the\nHamiltonian matrix.",
                "sub_section": "/packages/4/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 16,
                "m_parent_sub_section": "sub_sections",
                "name": "total_t0",
                "description": "Contains the value and information regarding the total energy extrapolated to\n$T=0$, based on a free-electron gas argument.",
                "sub_section": "/packages/4/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 17,
                "m_parent_sub_section": "sub_sections",
                "name": "van_der_waals",
                "description": "Contains the value and information regarding the Van der Waals energy. A multiple\noccurence is expected when more than one van der Waals methods are defined. The\nvan der Waals kind should be specified in Energy.kind",
                "sub_section": "/packages/4/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 18,
                "m_parent_sub_section": "sub_sections",
                "name": "hartree_fock_x_scaled",
                "description": "Scaled exact-exchange energy that depends on the mixing parameter of the\nfunctional. For example in hybrid functionals, the exchange energy is given as a\nlinear combination of exact-energy and exchange energy of an approximate DFT\nfunctional; the exact exchange energy multiplied by the mixing coefficient of the\nhybrid functional would be stored in this metadata. Defined consistently with\nXC_method.",
                "sub_section": "/packages/4/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 19,
                "m_parent_sub_section": "sub_sections",
                "name": "contributions",
                "description": "Contains other energy contributions to the total energy not already defined.",
                "sub_section": "/packages/4/section_definitions/4",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 20,
                "m_parent_sub_section": "sub_sections",
                "name": "types",
                "description": "Contains other energy types not already defined.",
                "sub_section": "/packages/4/section_definitions/4",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 21,
                "m_parent_sub_section": "sub_sections",
                "name": "double_counting",
                "description": "Double counting correction when performing Hubbard model calculations.",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/4/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 22,
                "m_parent_sub_section": "sub_sections",
                "name": "correction_entropy",
                "description": "Entropy correction to the potential energy to compensate for the change in\noccupation so that forces at finite T do not need to keep the change of occupation\nin account. Defined consistently with XC_method.",
                "sub_section": "/packages/4/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 23,
                "m_parent_sub_section": "sub_sections",
                "name": "correction_hartree",
                "description": "Correction to the density-density electrostatic energy in the sum of eigenvalues\n(that uses the mixed density on one side), and the fully consistent density-\ndensity electrostatic energy. Defined consistently with XC_method.",
                "sub_section": "/packages/4/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 24,
                "m_parent_sub_section": "sub_sections",
                "name": "correction_xc",
                "description": "Correction to energy_XC.",
                "sub_section": "/packages/4/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 25,
                "m_parent_sub_section": "sub_sections",
                "name": "kinetic",
                "description": "Contains the value and information regarding the kinetic energy.",
                "sub_section": "/packages/4/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 26,
                "m_parent_sub_section": "sub_sections",
                "name": "potential",
                "description": "Contains the value and information regarding the potential energy.",
                "sub_section": "/packages/4/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 27,
                "m_parent_sub_section": "sub_sections",
                "name": "pressure_volume_work",
                "description": "Contains the value and information regarding the instantaneous pV work.",
                "sub_section": "/packages/4/section_definitions/4"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 6,
            "m_parent_sub_section": "section_definitions",
            "name": "ForcesEntry",
            "description": "Section describing a contribution to or type of atomic forces.",
            "base_sections": [
              "/packages/4/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Value of the forces acting on the atoms. This is calculated as minus gradient of\nthe corresponding energy type or contribution **including** constraints, if\npresent. The derivatives with respect to displacements of nuclei are evaluated in\nCartesian coordinates.  In addition, these are obtained by filtering out the\nunitary transformations (center-of-mass translations and rigid rotations for\nnon-periodic systems, see value_raw for the unfiltered counterpart).",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_atoms",
                  3
                ],
                "unit": "newton"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "value_raw",
                "description": "Value of the forces acting on the atoms **not including** such as fixed atoms,\ndistances, angles, dihedrals, etc.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_atoms",
                  3
                ],
                "unit": "newton"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 7,
            "m_parent_sub_section": "section_definitions",
            "name": "Forces",
            "description": "Section containing all forces types and contributions.",
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "total",
                "description": "Contains the value and information regarding the total forces on the atoms\ncalculated as minus gradient of energy_total.",
                "sub_section": "/packages/4/section_definitions/6"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "free",
                "description": "Contains the value and information regarding the forces on the atoms\ncorresponding to the minus gradient of energy_free. The (electronic) energy_free\ncontains the information on the change in (fractional) occupation of the\nelectronic eigenstates, which are accounted for in the derivatives, yielding a\ntruly energy-conserved quantity.",
                "sub_section": "/packages/4/section_definitions/6"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "t0",
                "description": "Contains the value and information regarding the forces on the atoms\ncorresponding to the minus gradient of energy_T0.",
                "sub_section": "/packages/4/section_definitions/6"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 3,
                "m_parent_sub_section": "sub_sections",
                "name": "contributions",
                "description": "Contains other forces contributions to the total atomic forces not already\ndefined.",
                "sub_section": "/packages/4/section_definitions/6",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 4,
                "m_parent_sub_section": "sub_sections",
                "name": "types",
                "description": "Contains other types of forces not already defined.",
                "sub_section": "/packages/4/section_definitions/6",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 8,
            "m_parent_sub_section": "section_definitions",
            "name": "StressEntry",
            "description": "Section describing a contribution to or a type of stress.",
            "base_sections": [
              "/packages/4/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Value of the stress on the simulation cell. It is given as the functional\nderivative of the corresponding energy with respect to the deformation tensor.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3,
                  3
                ],
                "unit": "joule / meter ** 3"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "values_per_atom",
                "description": "Value of the atom-resolved stresses.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "number_of_atoms",
                  3,
                  3
                ],
                "unit": "joule / meter ** 3"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 9,
            "m_parent_sub_section": "section_definitions",
            "name": "Stress",
            "description": "Section containing all stress types and contributions.",
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "total",
                "description": "Contains the value and information regarding the stress on the simulation cell\nand the atomic stresses corresponding to energy_total.",
                "sub_section": "/packages/4/section_definitions/8"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "contributions",
                "description": "Contains contributions for the total stress.",
                "sub_section": "/packages/4/section_definitions/8",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "types",
                "description": "Contains other types of stress.",
                "sub_section": "/packages/4/section_definitions/8",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 10,
            "m_parent_sub_section": "section_definitions",
            "name": "ChargesValue",
            "description": "Contains information on the charge on an atom or projected onto an orbital.",
            "base_sections": [
              "/packages/4/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Value of the charge projected on atom and orbital.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "coulomb"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_electrons",
                "description": "Value of the number of electrons projected on atom and orbital.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "spin_z",
                "description": "Value of the azimuthal spin projected on atom and orbital.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 11,
            "m_parent_sub_section": "section_definitions",
            "name": "Charges",
            "description": "Section describing the charges on the atoms obtained through a given analysis method. Also contains information on the orbital projection of charges.",
            "base_sections": [
              "/packages/4/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "analysis_method",
                "description": "Analysis method employed in evaluating the atom and partial charges.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Value of the atomic charges calculated through analysis_method.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_atoms"
                ],
                "unit": "coulomb"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_electrons",
                "description": "Value of the number of electrons on the atoms.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_atoms"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "spins",
                "description": "Value of the atomic spins.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_atoms"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "total",
                "description": "Value of the total charge of the system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "coulomb"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "spin_projected",
                "sub_section": "/packages/4/section_definitions/10",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "orbital_projected",
                "sub_section": "/packages/4/section_definitions/10",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 12,
            "m_parent_sub_section": "section_definitions",
            "name": "BandGapDeprecated",
            "description": "Base class for breaking up circular dependencies between BandGap, Dos, and BandStructure.",
            "base_sections": [
              "/packages/26/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "index",
                "description": "The spin channel index.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "The actual value of the band gap. Value of zero indicates a vanishing band gap and\nis distinct from sources lacking any band gap measurement or calculation.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "Band gap type.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "direct",
                    "indirect"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "energy_highest_occupied",
                "description": "The highest occupied energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "energy_lowest_unoccupied",
                "description": "The lowest unoccupied energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 13,
            "m_parent_sub_section": "section_definitions",
            "name": "BandEnergies",
            "description": "This section describes the eigenvalue spectrum for a set of kpoints given by band_energies_kpoints.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_spin_channels",
                "description": "Number of spin channels.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_bands",
                "description": "Number of bands for which the eigenvalues are evaluated.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_kpoints",
                "description": "Number of kpoints for which the eigenvalues are evaluated.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "kpoints",
                "description": "Fractional coordinates of the $k$ or $q$ points (in the basis of the reciprocal-\nlattice vectors) for which the eigenvalues are evaluated.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_kpoints",
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "kpoints_weights",
                "description": "Weights of the $k$ points in the calculation of the band energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_kpoints"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "kpoints_multiplicities",
                "description": "Multiplicities of the $k$ point (i.e., how many distinct points per cell this\nexpands to after applying all symmetries). This defaults to 1. If expansion is\nperformed then each point will have weight\nband_energies_kpoints_weights/band_energies_kpoints_multiplicities.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_kpoints"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "endpoints_labels",
                "description": "Labels of the points along a one-dimensional path sampled in the $k$-space or\n$q$-space, using the conventional symbols, e.g., Gamma, K, L.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  2
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "orbital_labels",
                "description": "Labels corresponding to each band/orbital",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "n_bands"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "occupations",
                "description": "Values of the occupations of the bands.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_spin_channels",
                  "n_kpoints",
                  "n_bands"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "energies",
                "description": "Values of the band energies.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_spin_channels",
                  "n_kpoints",
                  "n_bands"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "qp_linearization_prefactor",
                "description": "Values of the GW quasi particle linearization pre-factor.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_spin_channels",
                  "n_kpoints",
                  "n_bands"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "name": "value_xc_potential",
                "description": "Diagonal matrix elements of the GW exchange-correlation potential.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_spin_channels",
                  "n_kpoints",
                  "n_bands"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "name": "value_correlation",
                "description": "Diagonal matrix elements of the GW correlation energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_spin_channels",
                  "n_kpoints",
                  "n_bands"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 13,
                "m_parent_sub_section": "quantities",
                "name": "value_exchange",
                "description": "Diagonal matrix elements of the GW exchange energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_spin_channels",
                  "n_kpoints",
                  "n_bands"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 14,
                "m_parent_sub_section": "quantities",
                "name": "value_xc",
                "description": "Diagonal matrix elements of the GW exchange-correlation energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_spin_channels",
                  "n_kpoints",
                  "n_bands"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 15,
                "m_parent_sub_section": "quantities",
                "name": "value_qp",
                "description": "Diagonal matrix elements of the GW quasi-particle energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_spin_channels",
                  "n_kpoints",
                  "n_bands"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 16,
                "m_parent_sub_section": "quantities",
                "name": "value_ks",
                "description": "Diagonal matrix elements of the Kohn-Sham energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_spin_channels",
                  "n_kpoints",
                  "n_bands"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 17,
                "m_parent_sub_section": "quantities",
                "name": "value_ks_xc",
                "description": "Diagonal matrix elements of the Kohn-Sham exchange-correlation energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_spin_channels",
                  "n_kpoints",
                  "n_bands"
                ],
                "unit": "joule"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "band_gap",
                "sub_section": "/packages/4/section_definitions/12",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 14,
            "m_parent_sub_section": "section_definitions",
            "name": "BandStructure",
            "description": "This section stores information on a band structure evaluation along one-dimensional pathways in the $k$ or $q$ (reciprocal) space given in section_band_segment.\nEigenvalues calculated at the actual $k$-mesh used for energy_total evaluations,\ncan be found in the eigenvalues section.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "path_standard",
                "description": "String to specify the standard used for the kpoints path within bravais\nlattice.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "reciprocal_cell",
                "description": "The reciprocal cell within which the band structure is calculated.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3,
                  3
                ],
                "unit": "1 / meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "energy_fermi",
                "description": "Fermi energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "band_gap",
                "sub_section": "/packages/4/section_definitions/12",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "segment",
                "sub_section": "/packages/4/section_definitions/13",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 15,
            "m_parent_sub_section": "section_definitions",
            "name": "DosFingerprint",
            "description": "Section for the fingerprint of the electronic density-of-states (DOS). DOS fingerprints are a modification of the D-Fingerprints reported in Chem. Mater. 2015,\n27, 3, 735\u2013743 (doi:10.1021/cm503507h). The fingerprint consists of a binary\nrepresentation of the DOS, that is used to evaluate the similarity of materials based\non their electronic structure.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "bins",
                "description": "Byte representation of the DOS fingerprint.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "indices",
                "description": "Indices used to compare DOS fingerprints of different energy ranges.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  2
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "stepsize",
                "description": "Stepsize of interpolation in the first step of the generation of DOS fingerprints.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "filling_factor",
                "description": "Proportion of 1 bins in the DOS fingerprint.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "grid_id",
                "description": "Identifier of the DOS grid that was used for the creation of the fingerprint.\nSimilarity can only be calculated if the same grid was used for both fingerprints.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 16,
            "m_parent_sub_section": "section_definitions",
            "name": "DosValues",
            "description": "Section containing information regarding the values of the density of states (DOS).",
            "base_sections": [
              "/packages/4/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "phonon_mode",
                "description": "Phonon mode corresponding to the DOS used for phonon projections.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "normalization_factor",
                "description": "Normalization factor for DOS values to get a cell-independent intensive DOS,\ndefined as the DOS integral from the lowest energy state to the Fermi level for a neutrally charged system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Values of DOS, i.e. number of states for a given energy. The set of discrete\nenergy values is given in energies.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_energies"
                ],
                "unit": "1 / joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "value_integrated",
                "description": "A cumulative DOS starting from the mimunum energy available up to the energy level specified in `energies`.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_energies"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 17,
            "m_parent_sub_section": "section_definitions",
            "name": "Dos",
            "description": "Section containing information of an electronic-energy or phonon density of states (DOS) evaluation per spin channel.\n\nIt includes the total DOS and the projected DOS values. We differentiate `species_projected` as the\nprojected DOS for same atomic species, `atom_projected` as the projected DOS for different\natoms in the cell, and `orbital_projected` as the projected DOS for the orbitals of each\natom. These are hierarchically connected as:\n\n    atom_projected = sum_{orbitals} orbital_projected\n\n    species_projected = sum_{atoms} atom_projected\n\n    total = sum_{species} species_projected",
            "base_sections": [
              "/packages/4/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_energies",
                "description": "Gives the number of energy values for the DOS, see energies.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "energies",
                "description": "Contains the set of discrete energy values for the DOS.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_energies"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "energy_fermi",
                "description": "Fermi energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "energy_ref",
                "description": "Energy level denoting the origin along the energy axis, used for comparison and visualization.\nIt is defined as the energy_highest_occupied and does not necessarily coincide with energy_fermi.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "spin_channel",
                "description": "Spin channel of the corresponding DOS. It can take values of 0 or 1.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "total",
                "sub_section": "/packages/4/section_definitions/16",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "species_projected",
                "sub_section": "/packages/4/section_definitions/16",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "atom_projected",
                "sub_section": "/packages/4/section_definitions/16",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 3,
                "m_parent_sub_section": "sub_sections",
                "name": "orbital_projected",
                "sub_section": "/packages/4/section_definitions/16",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 4,
                "m_parent_sub_section": "sub_sections",
                "name": "fingerprint",
                "sub_section": "/packages/4/section_definitions/15",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 5,
                "m_parent_sub_section": "sub_sections",
                "name": "band_gap",
                "sub_section": "/packages/4/section_definitions/12",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 18,
            "m_parent_sub_section": "section_definitions",
            "name": "ElectronicStructureProvenance",
            "description": "\n    ",
            "base_sections": [
              "/packages/26/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "dos",
                "description": "",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/16"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "band_structure",
                "description": "",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/13"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "methodology",
                "description": "Reference to the specific method section.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/2/section_definitions/44"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 19,
            "m_parent_sub_section": "section_definitions",
            "name": "BandGap",
            "description": "\n        Contains information for each present spin channel.\n        ",
            "base_sections": [
              "/packages/4/section_definitions/12"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "provenance",
                "sub_section": "/packages/4/section_definitions/18",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 20,
            "m_parent_sub_section": "section_definitions",
            "name": "MultipolesValues",
            "description": "Section containing the values of the multipoles projected unto an atom or orbital.",
            "base_sections": [
              "/packages/4/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Value of the multipole.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 21,
            "m_parent_sub_section": "section_definitions",
            "name": "MultipolesEntry",
            "description": "Section describing a multipole term. The unit of the values are given by C * m ^ n, where n = 1 for dipole, 2 for quadrupole, etc.",
            "base_sections": [
              "/packages/4/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "origin",
                "description": "Origin in cartesian space.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3
                ],
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_multipoles",
                "description": "Number of multipoles.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Value of the multipoles projected unto the atoms.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_atoms",
                  "n_multipoles"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "total",
                "description": "Total value of the multipoles.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_multipoles"
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "orbital_projected",
                "sub_section": "/packages/4/section_definitions/20",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 22,
            "m_parent_sub_section": "section_definitions",
            "name": "Multipoles",
            "description": "Section containing the multipoles (dipoles, quadrupoles, ...) for each atom.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "kind",
                "description": "Kind of the multipoles being described.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "dipole",
                "sub_section": "/packages/4/section_definitions/21",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "quadrupole",
                "sub_section": "/packages/4/section_definitions/21",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "octupole",
                "sub_section": "/packages/4/section_definitions/21",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 3,
                "m_parent_sub_section": "sub_sections",
                "name": "higher_order",
                "sub_section": "/packages/4/section_definitions/21",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 23,
            "m_parent_sub_section": "section_definitions",
            "name": "Thermodynamics",
            "description": "Section containing results related to a thermodynamics calculation.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "enthalpy",
                "description": "Value of the calculated enthalpy per cell i.e. energy_total + pressure * volume.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "entropy",
                "description": "Value of the entropy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule / kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "chemical_potential",
                "description": "Value of the chemical potential.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "kinetic_energy",
                "description": "Value of the kinetic energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "potential_energy",
                "description": "Value of the potential energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "internal_energy",
                "description": "Value of the internal energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "vibrational_free_energy_at_constant_volume",
                "description": "Value of the vibrational free energy per cell unit at constant volume.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "pressure",
                "description": "Value of the pressure of the system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "temperature",
                "description": "Value of the temperature of the system at which the properties are calculated.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "volume",
                "description": "Value of the volume of the system at which the properties are calculated.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter ** 3"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "heat_capacity_c_v",
                "description": "Stores the heat capacity per cell unit at constant volume.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule / kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "name": "heat_capacity_c_p",
                "description": "Stores the heat capacity per cell unit at constant pressure.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule / kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "name": "time_step",
                "description": "The number of time steps with respect to the start of the calculation.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 24,
            "m_parent_sub_section": "section_definitions",
            "name": "Volumetric",
            "description": "Section defining a set of volumetric data on a uniform real-space grid. Kind should be specified if the data is not explicitly defined by a metainfo class.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "kind",
                "description": "The kind of function if not already defined.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "multiplicity",
                "description": "Number of functions stored.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_x",
                "description": "number of points along x axis",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "n_y",
                "description": "number of points along y axis",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "n_z",
                "description": "number of points along z axis",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "displacements",
                "description": "displacement vectors between grid points along each axis; same indexing rules as\nlattice_vectors.  In many cases, displacements and number of points are related to\nlattice_vectors through: [displacement] * [number of points + N] =\n[lattice_vector],where N is 1 for periodic directions and 0 for non-periodic ones",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3,
                  3
                ],
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "origin",
                "description": "location of the first grid point; same coordinate system as atom_positions when\napplicable.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3
                ],
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Values of the volumetric data defined by kind.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "multiplicity",
                  "n_x",
                  "n_y",
                  "n_z"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 25,
            "m_parent_sub_section": "section_definitions",
            "name": "PotentialValue",
            "description": "Section containing the values of the potential evaluated on a uniform real-space grid.",
            "base_sections": [
              "/packages/4/section_definitions/24"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Values of the potential evaluated at each grid point.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "multiplicity",
                  "n_x",
                  "n_y",
                  "n_z"
                ],
                "unit": "joule / meter ** 3"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 26,
            "m_parent_sub_section": "section_definitions",
            "name": "Potential",
            "description": "Section containing all potential types.",
            "base_sections": [
              "/packages/4/section_definitions/24"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "effective",
                "sub_section": "/packages/4/section_definitions/25",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "hartree",
                "sub_section": "/packages/4/section_definitions/25",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 27,
            "m_parent_sub_section": "section_definitions",
            "name": "Density",
            "description": "Section containing the values of the density evaluated on a uniform real-space grid.",
            "base_sections": [
              "/packages/4/section_definitions/24"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Values of the potential evaluated at each grid point.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "multiplicity",
                  "n_x",
                  "n_y",
                  "n_z"
                ],
                "unit": "1 / meter ** 3"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "value_hdf5",
                "description": "Specifies the HDF5 file and the path to the value in the file .",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.HDF5Reference"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 28,
            "m_parent_sub_section": "section_definitions",
            "name": "Spectra",
            "description": "Section containing the spectra properties.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "A string identifier for the type of spectrum: XAS, RIXS, XES, ARPES, etc.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_energies",
                "description": "Number of excited states.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "excitation_energies",
                "description": "Excitation energies.",
                "categories": [
                  "/packages/4/category_definitions/3"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_energies"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "energy_zero_ref",
                "description": "Reference energy to set the origin of the spectra to 0 eV.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "intensities",
                "description": "Excitation intensities in arbitrary units.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_energies"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "intensities_units",
                "description": "Units in which the intensities of the spectra are returned by a calculation. The\ntypical units for the dielectric constant are `F/m`.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "oscillator_strengths",
                "description": "Excited states oscillator strengths.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_energies"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "transition_dipole_moments",
                "description": "Transition dipole moments.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_energies",
                  3
                ],
                "unit": "coulomb * meter"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "provenance",
                "sub_section": "/packages/4/section_definitions/18",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 29,
            "m_parent_sub_section": "section_definitions",
            "name": "GreensFunctions",
            "description": "Green's functions properties in different time/frequency basis.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "Type of Green's function calculated from the mapping of the Hubbard-Kanamori model\ninto the Anderson impurity model. These calculations are converged if both types of\nGreen's functions converge to each other (G_impurity == G_lattice).",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "impurity",
                    "lattice"
                  ]
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "matsubara_freq",
                "description": "Matsubara frequencies (imaginary frequencies). Can be either positives or both positives\nand negatives.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "tau",
                "description": "Imaginary times.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_tau"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "frequencies",
                "description": "Real space frequencies.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_frequencies"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "chemical_potential",
                "description": "Chemical potential.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "self_energy_iw",
                "description": "Self-energy tensor in Matsubara frequencies.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "complex128"
                },
                "shape": [
                  "n_atoms_per_unit_cell",
                  2,
                  "n_correlated_orbitals",
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "greens_function_iw",
                "description": "Green's function tensor in Matsubara frequencies.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "complex128"
                },
                "shape": [
                  "n_atoms_per_unit_cell",
                  2,
                  "n_correlated_orbitals",
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "hybridization_function_iw",
                "description": "Hybridization function tensor in Matsubara frequencies.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "complex128"
                },
                "shape": [
                  "n_atoms_per_unit_cell",
                  2,
                  "n_correlated_orbitals",
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "greens_function_tau",
                "description": "Green's function tensor in tau (imaginary time).",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "complex128"
                },
                "shape": [
                  "n_atoms_per_unit_cell",
                  2,
                  "n_correlated_orbitals",
                  "n_tau"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "self_energy_freq",
                "description": "Self-energy tensor in real frequencies.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "complex128"
                },
                "shape": [
                  "n_atoms_per_unit_cell",
                  2,
                  "n_correlated_orbitals",
                  "n_frequencies"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "greens_function_freq",
                "description": "Green's function tensor in real frequencies.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "complex128"
                },
                "shape": [
                  "n_atoms_per_unit_cell",
                  2,
                  "n_correlated_orbitals",
                  "n_frequencies"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "name": "hybridization_function_freq",
                "description": "Hybridization function tensor in real frequencies.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "complex128"
                },
                "shape": [
                  "n_atoms_per_unit_cell",
                  2,
                  "n_correlated_orbitals",
                  "n_frequencies"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "name": "orbital_occupations",
                "description": "Orbital occupation per correlated atom in the unit cell and per spin.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_atoms_per_unit_cell",
                  2,
                  "n_correlated_orbitals"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 13,
                "m_parent_sub_section": "quantities",
                "name": "quasiparticle_weights",
                "description": "Quasiparticle weights of each orbital per site and spin. Calculated from:\n    Z = inv(1.0 - d [Re Sigma] / dw at w=0)\nit takes values \u2208 [0.0, 1.0], being Z=1 non-correlated, and Z=0 in a Mott state.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_atoms_per_unit_cell",
                  2,
                  "n_correlated_orbitals"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 30,
            "m_parent_sub_section": "section_definitions",
            "name": "VibrationalFrequenciesValues",
            "description": "Section describing a vibrational spectrum.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "kind",
                "description": "Kind of the vibration.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "description",
                "description": "Short description of the vibration.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_vibrations",
                "description": "Number of values in the vibration spectrum.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "activity",
                "description": "Describes the activity corresponding to each of the value of the vibration\nspectrum.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "n_vibrations"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "intensity",
                "description": "Intensity of the vibration.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_vibrations"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 31,
            "m_parent_sub_section": "section_definitions",
            "name": "VibrationalFrequencies",
            "description": "Section containing results related to vibrational frequencies.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_frequencies",
                "description": "Number of vibration frequencies",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Values of vibrational frequencies (m-1)",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_frequencies"
                ],
                "unit": "1 / meter"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "raman",
                "sub_section": "/packages/4/section_definitions/30",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "infrared",
                "sub_section": "/packages/4/section_definitions/30",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 32,
            "m_parent_sub_section": "section_definitions",
            "name": "RadiusOfGyrationValues",
            "description": "Section containing information regarding the values of radius of gyration (Rg).",
            "base_sections": [
              "/packages/4/section_definitions/3"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Value of Rg.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 33,
            "m_parent_sub_section": "section_definitions",
            "name": "RadiusOfGyration",
            "description": "Section containing information about the calculation of radius of gyration (Rg).",
            "base_sections": [
              "/packages/4/section_definitions/2"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "radius_of_gyration_values",
                "sub_section": "/packages/4/section_definitions/32",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 34,
            "m_parent_sub_section": "section_definitions",
            "name": "BaseCalculation",
            "description": "Contains computed properties of a configuration as defined by the corresponding section system and with the simulation method defined by section method. The\nreferences to the system and method sections are given by system_ref and method_ref,\nrespectively.\n\nProperties derived from a group of configurations are not included in this section but\ncan be accessed in section workflow.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "system_ref",
                "description": "Links the calculation to a section system.",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/3/section_definitions/8"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "method_ref",
                "description": "Links the calculation to a section method.",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/2/section_definitions/44"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "starting_calculation_ref",
                "description": "Links the current section calculation to the starting calculation.",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/36"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "n_references",
                "description": "Number of references to the current section calculation.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "calculations_ref",
                "description": "Links the current section calculation to other section calculations. Such a link\nis necessary for example if the referenced calculation is a self-consistent\ncalculation that serves as a starting point or a calculation is part of a domain\ndecomposed simulation that needs to be connected.",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/36"
                },
                "shape": [
                  "n_references"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "calculations_path",
                "description": "Links the current section calculation to other section calculations. Such a link\nis necessary for example if the referenced calculation is a self-consistent\ncalculation that serves as a starting point or a calculation is part of a domain\ndecomposed simulation that needs to be connected.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "n_references"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "calculation_converged",
                "description": "Indicates whether a the calculation is converged.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "hessian_matrix",
                "description": "The matrix with the second derivative of the energy with respect to atom\ndisplacements.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "number_of_atoms",
                  "number_of_atoms",
                  3,
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "spin_S2",
                "description": "Stores the value of the total spin moment operator $S^2$ for the converged\nwavefunctions calculated with the XC_method. It can be used to calculate the spin\ncontamination in spin-unrestricted calculations.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "time_calculation",
                "description": "Stores the wall-clock time needed to complete the calculation i.e. the real time\nthat has elapsed from start to end of calculation.",
                "categories": [
                  "/packages/4/category_definitions/2",
                  "/packages/4/category_definitions/1"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "time_physical",
                "description": "The elapsed real time at the end of the calculation with respect to the start of\nthe simulation.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "name": "volume",
                "description": "Value of the volume of the system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter ** 3"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "name": "density",
                "description": "Value of the density of the system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "kilogram / meter ** 3"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 13,
                "m_parent_sub_section": "quantities",
                "name": "pressure",
                "description": "Value of the pressure of the system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 14,
                "m_parent_sub_section": "quantities",
                "name": "pressure_tensor",
                "description": "Value of the pressure in terms of the x, y, z components of the simulation cell.\nTypically calculated as the difference between the kinetic energy and the virial.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3,
                  3
                ],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 15,
                "m_parent_sub_section": "quantities",
                "name": "virial_tensor",
                "description": "Value of the virial in terms of the x, y, z components of the simulation cell.\nTypically calculated as the cross product between positions and forces.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3,
                  3
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 16,
                "m_parent_sub_section": "quantities",
                "name": "enthalpy",
                "description": "Value of the calculated enthalpy per cell i.e. energy_total + pressure * volume.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 17,
                "m_parent_sub_section": "quantities",
                "name": "temperature",
                "description": "Value of the temperature of the system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 18,
                "m_parent_sub_section": "quantities",
                "name": "step",
                "description": "The number of time steps with respect to the start of the simulation.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 19,
                "m_parent_sub_section": "quantities",
                "name": "time",
                "description": "The elapsed simulated physical time since the start of the simulation.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "second"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "energy",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/4/section_definitions/5"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "forces",
                "sub_section": "/packages/4/section_definitions/7"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "stress",
                "sub_section": "/packages/4/section_definitions/9"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 3,
                "m_parent_sub_section": "sub_sections",
                "name": "band_gap",
                "sub_section": "/packages/4/section_definitions/19",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 4,
                "m_parent_sub_section": "sub_sections",
                "name": "dos_electronic",
                "sub_section": "/packages/4/section_definitions/17",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 5,
                "m_parent_sub_section": "sub_sections",
                "name": "dos_phonon",
                "sub_section": "/packages/4/section_definitions/17",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 6,
                "m_parent_sub_section": "sub_sections",
                "name": "eigenvalues",
                "sub_section": "/packages/4/section_definitions/13",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 7,
                "m_parent_sub_section": "sub_sections",
                "name": "band_structure_electronic",
                "sub_section": "/packages/4/section_definitions/14",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 8,
                "m_parent_sub_section": "sub_sections",
                "name": "band_structure_phonon",
                "sub_section": "/packages/4/section_definitions/14",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 9,
                "m_parent_sub_section": "sub_sections",
                "name": "thermodynamics",
                "sub_section": "/packages/4/section_definitions/23",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 10,
                "m_parent_sub_section": "sub_sections",
                "name": "hopping_matrix",
                "sub_section": "/packages/2/section_definitions/31",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 11,
                "m_parent_sub_section": "sub_sections",
                "name": "spectra",
                "sub_section": "/packages/4/section_definitions/28",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 12,
                "m_parent_sub_section": "sub_sections",
                "name": "greens_functions",
                "sub_section": "/packages/4/section_definitions/29",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 13,
                "m_parent_sub_section": "sub_sections",
                "name": "vibrational_frequencies",
                "sub_section": "/packages/4/section_definitions/31",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 14,
                "m_parent_sub_section": "sub_sections",
                "name": "potential",
                "sub_section": "/packages/4/section_definitions/26",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 15,
                "m_parent_sub_section": "sub_sections",
                "name": "multipoles",
                "sub_section": "/packages/4/section_definitions/22",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 16,
                "m_parent_sub_section": "sub_sections",
                "name": "charges",
                "sub_section": "/packages/4/section_definitions/11",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 17,
                "m_parent_sub_section": "sub_sections",
                "name": "density_charge",
                "sub_section": "/packages/4/section_definitions/27",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 18,
                "m_parent_sub_section": "sub_sections",
                "name": "radius_of_gyration",
                "sub_section": "/packages/4/section_definitions/33",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 35,
            "m_parent_sub_section": "section_definitions",
            "name": "ScfIteration",
            "description": "Every scf_iteration section represents a self-consistent field (SCF) iteration, and gives detailed information on the SCF procedure of the specified quantities.",
            "base_sections": [
              "/packages/4/section_definitions/34"
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 36,
            "m_parent_sub_section": "section_definitions",
            "name": "Calculation",
            "description": "Every calculation section contains the values computed during a *single configuration calculation*, i.e. a calculation performed on a given\nconfiguration of the system (as defined in section_system) and a given computational\nmethod (e.g., exchange-correlation method, basis sets, as defined in section_method).\n\nThe link between the current section calculation and the related\nsystem and method sections is established by the values stored in system_ref and\nmethod_ref, respectively.\n\nThe reason why information on the system configuration and computational method is\nstored separately is that several *single configuration calculations* can be performed\non the same system configuration, viz. several system configurations can be evaluated\nwith the same computational method. This storage strategy avoids redundancies.",
            "base_sections": [
              "/packages/4/section_definitions/34"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_scf_iterations",
                "description": "Gives the number of performed self-consistent field (SCF) iterations.",
                "categories": [
                  "/packages/4/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "scf_iteration",
                "sub_section": "/packages/4/section_definitions/35",
                "repeats": true
              }
            ]
          }
        ],
        "category_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Category",
            "m_parent_index": 0,
            "m_parent_sub_section": "category_definitions",
            "name": "ScfInfo",
            "description": "Contains information on the self-consistent field (SCF) procedure, i.e. the number of\nSCF iterations (number_of_scf_iterations) or a section_scf_iteration section with\ndetailed information on the SCF procedure of specified quantities."
          },
          {
            "m_def": "nomad.metainfo.metainfo.Category",
            "m_parent_index": 1,
            "m_parent_sub_section": "category_definitions",
            "name": "AccessoryInfo",
            "description": "Information that *in theory* should not affect the results of the calculations (e.g.,\ntiming)."
          },
          {
            "m_def": "nomad.metainfo.metainfo.Category",
            "m_parent_index": 2,
            "m_parent_sub_section": "category_definitions",
            "name": "TimeInfo",
            "description": "Stores information on the date and timings of the calculation. They are useful for,\ne.g., debugging or visualization purposes.",
            "categories": [
              "/packages/4/category_definitions/1"
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Category",
            "m_parent_index": 3,
            "m_parent_sub_section": "category_definitions",
            "name": "EnergyValue",
            "description": "This metadata stores an energy value."
          },
          {
            "m_def": "nomad.metainfo.metainfo.Category",
            "m_parent_index": 4,
            "m_parent_sub_section": "category_definitions",
            "name": "EnergyTypeReference",
            "description": "This metadata stores an energy used as reference point.",
            "categories": [
              "/packages/4/category_definitions/3"
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Category",
            "m_parent_index": 5,
            "m_parent_sub_section": "category_definitions",
            "name": "ErrorEstimateContribution",
            "description": "An estimate of a partial quantity contributing to the error for a given quantity."
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 5,
        "m_parent_sub_section": "packages",
        "name": "nomad.datamodel.metainfo.simulation.run",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "Program",
            "description": "Contains the specifications of the program.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "name",
                "description": "Specifies the name of the program that generated the data.",
                "categories": [
                  "/packages/5/category_definitions/0",
                  "/packages/5/category_definitions/1"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "version",
                "description": "Specifies the official release version of the program that was used.",
                "categories": [
                  "/packages/5/category_definitions/0",
                  "/packages/5/category_definitions/1"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "version_internal",
                "description": "Specifies a program version tag used internally for development purposes.\nAny kind of tagging system is supported, including git commit hashes.",
                "categories": [
                  "/packages/5/category_definitions/1"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "compilation_datetime",
                "description": "Contains the program compilation date and time from *Unix epoch* (00:00:00 UTC on\n1 January 1970) in seconds. For date and times without a timezone, the default\ntimezone GMT is used.",
                "categories": [
                  "/packages/5/category_definitions/0",
                  "/packages/5/category_definitions/1"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "compilation_host",
                "description": "Specifies the host on which the program was compiled.",
                "categories": [
                  "/packages/5/category_definitions/0",
                  "/packages/5/category_definitions/1"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "TimeRun",
            "description": "Contains information on timing information of the run.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "date_end",
                "description": "Stores the end date of the run as time since the *Unix epoch* (00:00:00 UTC on 1\nJanuary 1970) in seconds. For date and times without a timezone, the default\ntimezone GMT is used.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "date_start",
                "description": "Stores the start date of the run as time since the *Unix epoch* (00:00:00 UTC on 1\nJanuary 1970) in seconds. For date and times without a timezone, the default\ntimezone GMT is used.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "cpu1_end",
                "description": "Stores the end time of the run on CPU 1.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "cpu1_start",
                "description": "Stores the start time of the run on CPU 1.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "wall_end",
                "description": "Stores the internal wall-clock time at the end of the run.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "wall_start",
                "description": "Stores the internal wall-clock time from the start of the run.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "second"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "name": "MessageRun",
            "description": "Contains warning, error, and info messages of the run.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "Type of the message. Can be one of warning, error, info, debug.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Value of the message of the computational program, given by type.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 3,
            "m_parent_sub_section": "section_definitions",
            "name": "Run",
            "description": "Every section run represents a single call of a program.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "calculation_file_uri",
                "description": "Contains the nomad uri of a raw the data file connected to the current run. There\nshould be an value for the main_file_uri and all ancillary files.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "clean_end",
                "description": "Indicates whether this run terminated properly (true), or if it was killed or\nexited with an error code unequal to zero (false).",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "raw_id",
                "description": "An optional calculation id, if one is found in the code input/output files.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "starting_run_ref",
                "description": "Links the current section run to a section run containing the calculations from\nwhich the current section starts.",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/5/section_definitions/3"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "n_references",
                "description": "Number of references to the current section calculation.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "runs_ref",
                "description": "Links the the current section to other run sections. Such a link is necessary for\nexample for workflows that may contain a series of runs.",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/5/section_definitions/3"
                },
                "shape": [
                  "n_references"
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "program",
                "sub_section": "/packages/5/section_definitions/0"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "time_run",
                "sub_section": "/packages/5/section_definitions/1"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "message",
                "sub_section": "/packages/5/section_definitions/2"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 3,
                "m_parent_sub_section": "sub_sections",
                "name": "method",
                "sub_section": "/packages/2/section_definitions/44",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 4,
                "m_parent_sub_section": "sub_sections",
                "name": "system",
                "sub_section": "/packages/3/section_definitions/8",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 5,
                "m_parent_sub_section": "sub_sections",
                "name": "calculation",
                "sub_section": "/packages/4/section_definitions/36",
                "repeats": true
              }
            ]
          }
        ],
        "category_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Category",
            "m_parent_index": 0,
            "m_parent_sub_section": "category_definitions",
            "name": "AccessoryInfo",
            "description": "Information that *in theory* should not affect the results of the calculations (e.g.,\ntiming)."
          },
          {
            "m_def": "nomad.metainfo.metainfo.Category",
            "m_parent_index": 1,
            "m_parent_sub_section": "category_definitions",
            "name": "ProgramInfo",
            "description": "Contains information on the program that generated the data, i.e. the program_name,\nprogram_version, program_compilation_host and program_compilation_datetime as direct\nchildren of this field.",
            "categories": [
              "/packages/5/category_definitions/0"
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 6,
        "m_parent_sub_section": "packages",
        "name": "nomad.datamodel.metainfo.simulation.workflow",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "SimulationWorkflowMethod",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "SimulationWorkflowResults",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "calculation_result_ref",
                "description": "Reference to calculation result. In the case of serial workflows, this corresponds\nto the final step in the simulation. For the parallel case, it refers to the reference calculation.",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/36"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_calculations",
                "description": "Number of calculations in workflow.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "calculations_ref",
                "description": "List of references to each calculation section in the simulation.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/36"
                },
                "shape": [
                  "n_calculations"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "name": "SimulationWorkflow",
            "base_sections": [
              "/packages/27/section_definitions/3"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "method",
                "sub_section": "/packages/6/section_definitions/0"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "results",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/6/section_definitions/1"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 3,
            "m_parent_sub_section": "section_definitions",
            "name": "Decomposition",
            "description": "Section containing information about the system to which an unstable compound will decompose to.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "fraction",
                "description": "Amount of the resulting system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "system_ref",
                "description": "Reference to the resulting system.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/3/section_definitions/8"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "formula",
                "description": "Chemical formula of the resulting system.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 4,
            "m_parent_sub_section": "section_definitions",
            "name": "Stability",
            "description": "Section containing information regarding the stability of the system.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_references",
                "description": "Number of reference systems.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "systems_ref",
                "description": "References to the reference systems.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/3/section_definitions/8"
                },
                "shape": [
                  "n_references"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "formation_energy",
                "description": "Calculated value of the formation energy of the compound.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "delta_formation_energy",
                "description": "Energy with respect to the convex hull.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "is_stable",
                "description": "Indicates if a compound is stable.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "decomposition",
                "sub_section": "/packages/6/section_definitions/3",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 5,
            "m_parent_sub_section": "section_definitions",
            "name": "ThermodynamicsResults",
            "base_sections": [
              "/packages/6/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_values",
                "description": "Number of thermodynamics property evaluations.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "temperature",
                "description": "Specifies the temperatures at which properties such as the Helmholtz free energy\nare calculated.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "pressure",
                "description": "Array containing the values of the pressure (one third of the trace of the stress\ntensor) corresponding to each property evaluation.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "helmholtz_free_energy",
                "description": "Helmholtz free energy per unit cell at constant volume.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "heat_capacity_c_p",
                "description": "Heat capacity per cell unit at constant pressure.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule / kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "heat_capacity_c_v",
                "description": "Heat capacity per cell unit at constant volume.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule / kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "heat_capacity_c_v_specific",
                "description": "Specific heat capacity at constant volume.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule / kelvin / kilogram",
                "cached": true,
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "vibrational_free_energy_at_constant_volume",
                "description": "Holds the vibrational free energy per cell unit at constant volume.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "vibrational_free_energy_at_constant_volume_specific",
                "description": "Stores the specific vibrational free energy at constant volume.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule / kilogram",
                "cached": true,
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "vibrational_free_energy",
                "description": "Calculated value of the vibrational free energy, F_vib.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "vibrational_internal_energy",
                "description": "Calculated value of the vibrational internal energy, U_vib.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "name": "vibrational_entropy",
                "description": "Calculated value of the vibrational entropy, S.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule / kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "name": "gibbs_free_energy",
                "description": "Calculated value of the Gibbs free energy, G.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 13,
                "m_parent_sub_section": "quantities",
                "name": "entropy",
                "description": "Calculated value of the entropy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule / kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 14,
                "m_parent_sub_section": "quantities",
                "name": "enthalpy",
                "description": "Calculated value of enthalpy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 15,
                "m_parent_sub_section": "quantities",
                "name": "internal_energy",
                "description": "Calculated value of the internal energy, U.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "stability",
                "sub_section": "/packages/6/section_definitions/4",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 6,
            "m_parent_sub_section": "section_definitions",
            "name": "SinglePointResults",
            "base_sections": [
              "/packages/6/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_scf_steps",
                "description": "Number of self-consistent steps in the calculation.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "final_scf_energy_difference",
                "description": "The difference in the energy between the last two scf steps.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "is_converged",
                "description": "Indicates if the convergence criteria were fullfilled.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "n_data",
                "description": "",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "dos",
                "description": "Reference to the electronic density of states data.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/17"
                },
                "shape": [
                  "n_data"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "band_structure",
                "description": "Reference to the electronic band structure data.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/14"
                },
                "shape": [
                  "n_data"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "eigenvalues",
                "description": "Reference to the eigenvalues.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/13"
                },
                "shape": [
                  "n_data"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "potential",
                "description": "Reference to the potential data.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/26"
                },
                "shape": [
                  "n_data"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "density_charge",
                "description": "Reference to the charge density data.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/27"
                },
                "shape": [
                  "n_data"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "spectra",
                "description": "Reference to the spectral data.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/28"
                },
                "shape": [
                  "n_data"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 7,
            "m_parent_sub_section": "section_definitions",
            "name": "SinglePointMethod",
            "base_sections": [
              "/packages/6/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "method",
                "description": "Calculation method used.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 8,
            "m_parent_sub_section": "section_definitions",
            "name": "SinglePoint",
            "base_sections": [
              "/packages/6/section_definitions/2"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "method",
                "sub_section": "/packages/6/section_definitions/7"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "results",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/6/section_definitions/6"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 9,
            "m_parent_sub_section": "section_definitions",
            "name": "ParallelSimulation",
            "base_sections": [
              "/packages/6/section_definitions/2"
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 10,
            "m_parent_sub_section": "section_definitions",
            "name": "SerialSimulation",
            "base_sections": [
              "/packages/6/section_definitions/2"
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 11,
            "m_parent_sub_section": "section_definitions",
            "name": "GeometryOptimizationMethod",
            "base_sections": [
              "/packages/6/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "The type of geometry optimization, which denotes what is being optimized.\n\nAllowed values are:\n\n| Type                   | Description                               |\n\n| ---------------------- | ----------------------------------------- |\n\n| `\"static\"`             | no optimization |\n\n| `\"atomic\"`             | the atomic coordinates alone are updated |\n\n| `\"cell_volume\"`         | `\"atomic\"` + cell lattice paramters are updated isotropically |\n\n| `\"cell_shape\"`        | `\"cell_volume\"` but without the isotropic constraint: all cell parameters are updated |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "atomic",
                    "cell_shape",
                    "cell_volume",
                    "static"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "method",
                "description": "The method used for geometry optimization. Some known possible values are:\n`\"steepest_descent\"`, `\"conjugant_gradient\"`, `\"low_memory_broyden_fletcher_goldfarb_shanno\"`.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "convergence_tolerance_energy_difference",
                "description": "The input energy difference tolerance criterion.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "convergence_tolerance_force_maximum",
                "description": "The input maximum net force tolerance criterion.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "newton"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "convergence_tolerance_stress_maximum",
                "description": "The input maximum stress tolerance criterion.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "convergence_tolerance_displacement_maximum",
                "description": "The input maximum displacement tolerance criterion.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "optimization_steps_maximum",
                "description": "Maximum number of optimization steps.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "save_frequency",
                "description": "The number of optimization steps between saving the calculation.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 12,
            "m_parent_sub_section": "section_definitions",
            "name": "GeometryOptimizationResults",
            "base_sections": [
              "/packages/6/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "optimization_steps",
                "description": "Number of saved optimization steps.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "energies",
                "description": "List of energy_total values gathered from the single configuration\ncalculations that are a part of the optimization trajectory.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "optimization_steps"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "steps",
                "description": "The step index corresponding to each saved configuration.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "optimization_steps"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "final_energy_difference",
                "description": "The difference in the energy_total between the last two steps during\noptimization.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "final_force_maximum",
                "description": "The maximum net force in the last optimization step.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "newton"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "final_displacement_maximum",
                "description": "The maximum displacement in the last optimization step with respect to previous.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "is_converged_geometry",
                "description": "Indicates if the geometry convergence criteria were fulfilled.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 13,
            "m_parent_sub_section": "section_definitions",
            "name": "GeometryOptimization",
            "base_sections": [
              "/packages/6/section_definitions/10"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "method",
                "sub_section": "/packages/6/section_definitions/11"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "results",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/6/section_definitions/12"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 14,
            "m_parent_sub_section": "section_definitions",
            "name": "ThermostatParameters",
            "description": "Section containing the parameters pertaining to the thermostat for a molecular dynamics run.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "thermostat_type",
                "description": "The name of the thermostat used for temperature control. If skipped or an empty string is used, it\nmeans no thermostat was applied.\n\nAllowed values are:\n\n| Thermostat Name        | Description                               |\n\n| ---------------------- | ----------------------------------------- |\n\n| `\"\"`                   | No thermostat               |\n\n| `\"andersen\"`           | H.C. Andersen, [J. Chem. Phys.\n**72**, 2384 (1980)](https://doi.org/10.1063/1.439486) |\n\n| `\"berendsen\"`          | H. J. C. Berendsen, J. P. M. Postma,\nW. F. van Gunsteren, A. DiNola, and J. R. Haak, [J. Chem. Phys.\n**81**, 3684 (1984)](https://doi.org/10.1063/1.448118) |\n\n| `\"brownian\"`           | Brownian Dynamics |\n\n| `\"langevin_goga\"`           | N. Goga, A. J. Rzepiela, A. H. de Vries,\nS. J. Marrink, and H. J. C. Berendsen, [J. Chem. Theory Comput. **8**, 3637 (2012)]\n(https://doi.org/10.1021/ct3000876) |\n\n| `\"langevin_schneider\"`           | T. Schneider and E. Stoll,\n[Phys. Rev. B **17**, 1302](https://doi.org/10.1103/PhysRevB.17.1302) |\n\n| `\"nose_hoover\"`        | S. Nos\u00e9, [Mol. Phys. **52**, 255 (1984)]\n(https://doi.org/10.1080/00268978400101201); W.G. Hoover, [Phys. Rev. A\n**31**, 1695 (1985) |\n\n| `\"velocity_rescaling\"` | G. Bussi, D. Donadio, and M. Parrinello,\n[J. Chem. Phys. **126**, 014101 (2007)](https://doi.org/10.1063/1.2408420) |\n\n| `\"velocity_rescaling_langevin\"` | G. Bussi and M. Parrinello,\n[Phys. Rev. E **75**, 056707 (2007)](https://doi.org/10.1103/PhysRevE.75.056707) |\n\n| `\"velocity_rescaling_woodcock\"` | L. V. Woodcock,\n[Chem. Phys. Lett. **10**, 257 (1971)](https://doi.org/10.1016/0009-2614(71)80281-6) |\n\n| `\"langevin_leap_frog\"` | J.A. Izaguirre, C.R. Sweet, and V.S. Pande\n[Pac Symp Biocomput. **15**, 240-251 (2010)](https://doi.org/10.1142/9789814295291_0026) |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "andersen",
                    "berendsen",
                    "brownian",
                    "langevin_goga",
                    "langevin_leap_frog",
                    "langevin_schneider",
                    "nose_hoover",
                    "velocity_rescaling",
                    "velocity_rescaling_langevin",
                    "velocity_rescaling_woodcock"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "reference_temperature",
                "description": "The target temperature for the simulation. Typically used when temperature_profile is \"constant\".",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "coupling_constant",
                "description": "The time constant for temperature coupling. Need to describe what this means for the various\nthermostat options...",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "effective_mass",
                "description": "The effective or fictitious mass of the temperature resevoir.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "kilogram"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "temperature_profile",
                "description": "Type of temperature control (i.e., annealing) procedure. Can be \"constant\" (no annealing), \"linear\", or \"exponential\".\nIf linear, \"temperature_update_delta\" specifies the corresponding update parameter.\nIf exponential, \"temperature_update_factor\" specifies the corresponding update parameter.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "constant",
                    "exponential",
                    "linear"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "reference_temperature_start",
                "description": "The initial target temperature for the simulation. Typically used when temperature_profile is \"linear\" or \"exponential\".",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "reference_temperature_end",
                "description": "The final target temperature for the simulation.  Typically used when temperature_profile is \"linear\" or \"exponential\".",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "temperature_update_frequency",
                "description": "Number of simulation steps between changing the target temperature.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "temperature_update_delta",
                "description": "Amount to be added (subtracted if negative) to the current reference_temperature\nat a frequency of temperature_update_frequency when temperature_profile is \"linear\".\nThe reference temperature is then replaced by this new value until the next update.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "temperature_update_factor",
                "description": "Factor to be multiplied to the current reference_temperature at a frequency of temperature_update_frequency when temperature_profile is exponential.\nThe reference temperature is then replaced by this new value until the next update.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "step_start",
                "description": "Trajectory step where this thermostating starts.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "name": "step_end",
                "description": "Trajectory step number where this thermostating ends.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 15,
            "m_parent_sub_section": "section_definitions",
            "name": "BarostatParameters",
            "description": "Section containing the parameters pertaining to the barostat for a molecular dynamics run.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "barostat_type",
                "description": "The name of the barostat used for temperature control. If skipped or an empty string is used, it\nmeans no barostat was applied.\n\nAllowed values are:\n\n| Barostat Name          | Description                               |\n\n| ---------------------- | ----------------------------------------- |\n\n| `\"\"`                   | No thermostat               |\n\n| `\"berendsen\"`          | H. J. C. Berendsen, J. P. M. Postma,\nW. F. van Gunsteren, A. DiNola, and J. R. Haak, [J. Chem. Phys.\n**81**, 3684 (1984)](https://doi.org/10.1063/1.448118) |\n\n| `\"martyna_tuckerman_tobias_klein\"` | G.J. Martyna, M.E. Tuckerman, D.J. Tobias, and M.L. Klein,\n[Mol. Phys. **87**, 1117 (1996)](https://doi.org/10.1080/00268979600100761);\nM.E. Tuckerman, J. Alejandre, R. L\u00f3pez-Rend\u00f3n, A.L. Jochim, and G.J. Martyna,\n[J. Phys. A. **59**, 5629 (2006)](https://doi.org/10.1088/0305-4470/39/19/S18)|\n\n| `\"nose_hoover\"`        | S. Nos\u00e9, [Mol. Phys. **52**, 255 (1984)]\n(https://doi.org/10.1080/00268978400101201); W.G. Hoover, [Phys. Rev. A\n**31**, 1695 (1985) |\n\n| `\"parrinello_rahman\"`        | M. Parrinello and A. Rahman,\n[J. Appl. Phys. **52**, 7182 (1981)](https://doi.org/10.1063/1.328693);\nS. Nos\u00e9 and M.L. Klein, [Mol. Phys. **50**, 1055 (1983) |\n\n| `\"stochastic_cell_rescaling\"` | M. Bernetti and G. Bussi,\n[J. Chem. Phys. **153**, 114107 (2020)](https://doi.org/10.1063/1.2408420) |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "berendsen",
                    "martyna_tuckerman_tobias_klein",
                    "nose_hoover",
                    "parrinello_rahman",
                    "stochastic_cell_rescaling"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "coupling_type",
                "description": "Describes the symmetry of pressure coupling. Specifics can be inferred from the `coupling constant`\n\n| Type          | Description                               |\n\n| ---------------------- | ----------------------------------------- |\n\n| `isotropic`          | Identical coupling in all directions. |\n\n| `semi_isotropic` | Identical coupling in 2 directions. |\n\n| `anisotropic`        | General case. |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "anisotropic",
                    "isotropic",
                    "semi_isotropic"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "reference_pressure",
                "description": "The target pressure for the simulation, stored in a 3x3 matrix, indicating the values for individual directions\nalong the diagonal, and coupling between directions on the off-diagonal. Typically used when pressure_profile is \"constant\".",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3,
                  3
                ],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "coupling_constant",
                "description": "The time constants for pressure coupling, stored in a 3x3 matrix, indicating the values for individual directions\nalong the diagonal, and coupling between directions on the off-diagonal. 0 values along the off-diagonal\nindicate no-coupling between these directions.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3,
                  3
                ],
                "unit": "second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "compressibility",
                "description": "An estimate of the system's compressibility, used for box rescaling, stored in a 3x3 matrix indicating the values for individual directions\nalong the diagonal, and coupling between directions on the off-diagonal. If None, it may indicate that these values\nare incorporated into the coupling_constant, or simply that the software used uses a fixed value that is not available in\nthe input/output files.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3,
                  3
                ],
                "unit": "1 / pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "pressure_profile",
                "description": "Type of pressure control procedure. Can be \"constant\" (no annealing), \"linear\", or \"exponential\".\nIf linear, \"pressure_update_delta\" specifies the corresponding update parameter.\nIf exponential, \"pressure_update_factor\" specifies the corresponding update parameter.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "constant",
                    "exponential",
                    "linear"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "reference_pressure_start",
                "description": "The initial target pressure for the simulation, stored in a 3x3 matrix, indicating the values for individual directions\nalong the diagonal, and coupling between directions on the off-diagonal. Typically used when pressure_profile is \"linear\" or \"exponential\".",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3,
                  3
                ],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "reference_pressure_end",
                "description": "The final target pressure for the simulation, stored in a 3x3 matrix, indicating the values for individual directions\nalong the diagonal, and coupling between directions on the off-diagonal.  Typically used when pressure_profile is \"linear\" or \"exponential\".",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3,
                  3
                ],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "pressure_update_frequency",
                "description": "Number of simulation steps between changing the target pressure.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "pressure_update_delta",
                "description": "Amount to be added (subtracted if negative) to the current reference_pressure\nat a frequency of pressure_update_frequency when pressure_profile is \"linear\".\nThe pressure temperature is then replaced by this new value until the next update.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "pressure_update_factor",
                "description": "Factor to be multiplied to the current reference_pressure at a frequency of pressure_update_frequency when pressure_profile is exponential.\nThe reference pressure is then replaced by this new value until the next update.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "name": "step_start",
                "description": "Trajectory step where this barostating starts.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "name": "step_end",
                "description": "Trajectory step number where this barostating ends.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 16,
            "m_parent_sub_section": "section_definitions",
            "name": "MolecularDynamicsMethod",
            "base_sections": [
              "/packages/6/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "thermodynamic_ensemble",
                "description": "The type of thermodynamic ensemble that was simulated.\n\nAllowed values are:\n\n| Thermodynamic Ensemble          | Description                               |\n\n| ---------------------- | ----------------------------------------- |\n\n| `\"NVE\"`           | Constant number of particles, volume, and energy |\n\n| `\"NVT\"`           | Constant number of particles, volume, and temperature |\n\n| `\"NPT\"`           | Constant number of particles, pressure, and temperature |\n\n| `\"NPH\"`           | Constant number of particles, pressure, and enthalpy |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "NPH",
                    "NPT",
                    "NVE",
                    "NVT"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "integrator_type",
                "description": "Name of the integrator.\n\nAllowed values are:\n\n| Integrator Name          | Description                               |\n\n| ---------------------- | ----------------------------------------- |\n\n| `\"langevin_goga\"`           | N. Goga, A. J. Rzepiela, A. H. de Vries,\nS. J. Marrink, and H. J. C. Berendsen, [J. Chem. Theory Comput. **8**, 3637 (2012)]\n(https://doi.org/10.1021/ct3000876) |\n\n| `\"langevin_schneider\"`           | T. Schneider and E. Stoll,\n[Phys. Rev. B **17**, 1302](https://doi.org/10.1103/PhysRevB.17.1302) |\n\n| `\"leap_frog\"`          | R.W. Hockney, S.P. Goel, and J. Eastwood,\n[J. Comp. Phys. **14**, 148 (1974)](https://doi.org/10.1016/0021-9991(74)90010-2) |\n\n| `\"velocity_verlet\"` | W.C. Swope, H.C. Andersen, P.H. Berens, and K.R. Wilson,\n[J. Chem. Phys. **76**, 637 (1982)](https://doi.org/10.1063/1.442716) |\n\n| `\"rRESPA_multitimescale\"` | M. Tuckerman, B. J. Berne, and G. J. Martyna\n[J. Chem. Phys. **97**, 1990 (1992)](https://doi.org/10.1063/1.463137) |\n\n| `\"langevin_leap_frog\"` | J.A. Izaguirre, C.R. Sweet, and V.S. Pande\n[Pac Symp Biocomput. **15**, 240-251 (2010)](https://doi.org/10.1142/9789814295291_0026) |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "brownian",
                    "conjugant_gradient",
                    "langevin_goga",
                    "langevin_leap_frog",
                    "langevin_schneider",
                    "leap_frog",
                    "rRESPA_multitimescale",
                    "velocity_verlet"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "integration_timestep",
                "description": "The timestep at which the numerical integration is performed.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "n_steps",
                "description": "Number of timesteps performed.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "coordinate_save_frequency",
                "description": "The number of timesteps between saving the coordinates.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "velocity_save_frequency",
                "description": "The number of timesteps between saving the velocities.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "force_save_frequency",
                "description": "The number of timesteps between saving the forces.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "thermodynamics_save_frequency",
                "description": "The number of timesteps between saving the thermodynamic quantities.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "thermostat_parameters",
                "sub_section": "/packages/6/section_definitions/14",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "barostat_parameters",
                "sub_section": "/packages/6/section_definitions/15",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 17,
            "m_parent_sub_section": "section_definitions",
            "name": "Property",
            "description": "Generic parent section for all property types.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "Describes if the observable is calculated at the molecular or atomic level.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "atomic",
                    "molecular"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "label",
                "description": "Name or description of the property.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "error_type",
                "description": "Describes the type of error reported for this observable.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 18,
            "m_parent_sub_section": "section_definitions",
            "name": "PropertyValues",
            "description": "Generic parent section for information regarding the values of a property.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "label",
                "description": "Describes the atoms or molecule types involved in determining the property.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "errors",
                "description": "Error associated with the determination of the property.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 19,
            "m_parent_sub_section": "section_definitions",
            "name": "EnsemblePropertyValues",
            "description": "Generic section containing information regarding the values of an ensemble property.",
            "base_sections": [
              "/packages/6/section_definitions/18"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_bins",
                "description": "Number of bins.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "frame_start",
                "description": "Trajectory frame number where the ensemble averaging starts.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "frame_end",
                "description": "Trajectory frame number where the ensemble averaging ends.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "bins_magnitude",
                "description": "Values of the variable along which the property is calculated.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_bins"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "bins_unit",
                "description": "Unit of the given bins, using UnitRegistry() notation.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "value_magnitude",
                "description": "Values of the property.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_bins"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "value_unit",
                "description": "Unit of the property, using UnitRegistry() notation.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 20,
            "m_parent_sub_section": "section_definitions",
            "name": "RadialDistributionFunctionValues",
            "description": "Section containing information regarding the values of radial distribution functions (rdfs).",
            "base_sections": [
              "/packages/6/section_definitions/19"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "bins",
                "description": "Distances along which the rdf was calculated.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_bins"
                ],
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Values of the property.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_bins"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 21,
            "m_parent_sub_section": "section_definitions",
            "name": "EnsembleProperty",
            "description": "Generic section containing information about a calculation of any static observable from a trajectory (i.e., from an ensemble average).",
            "base_sections": [
              "/packages/6/section_definitions/17"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_smooth",
                "description": "Number of bins over which the running average was computed for\nthe observable `values'.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_variables",
                "description": "Number of variables along which the property is determined.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "variables_name",
                "description": "Name/description of the independent variables along which the observable is defined.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "n_variables"
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "ensemble_property_values",
                "sub_section": "/packages/6/section_definitions/19",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 22,
            "m_parent_sub_section": "section_definitions",
            "name": "RadialDistributionFunction",
            "description": "Section containing information about the calculation of radial distribution functions (rdfs).",
            "base_sections": [
              "/packages/6/section_definitions/21"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "radial_distribution_function_values",
                "sub_section": "/packages/6/section_definitions/20",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 23,
            "m_parent_sub_section": "section_definitions",
            "name": "TrajectoryProperty",
            "description": "Generic section containing information about a calculation of any observable defined and stored at each individual frame of a trajectory.",
            "base_sections": [
              "/packages/6/section_definitions/17"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_frames",
                "description": "Number of frames for which the observable is stored.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "frames",
                "description": "Frames for which the observable is stored.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "n_frames"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "times",
                "description": "Times for which the observable is stored.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_frames"
                ],
                "unit": "second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Values of the property.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_frames"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "errors",
                "description": "Error associated with the determination of the property.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 24,
            "m_parent_sub_section": "section_definitions",
            "name": "RadiusOfGyration",
            "description": "Section containing information about the calculation of radius of gyration (Rg).",
            "base_sections": [
              "/packages/6/section_definitions/23"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "atomsgroup_ref",
                "description": "References to the atoms_group section containing the molecule for which Rg was calculated.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/3/section_definitions/0"
                },
                "shape": [
                  1
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Values of the property.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_frames"
                ],
                "unit": "meter"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 25,
            "m_parent_sub_section": "section_definitions",
            "name": "DiffusionConstantValues",
            "description": "Section containing information regarding the diffusion constants.",
            "base_sections": [
              "/packages/6/section_definitions/18"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Values of the diffusion constants.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter ** 2 / second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "error_type",
                "description": "Describes the type of error reported for this observable.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 26,
            "m_parent_sub_section": "section_definitions",
            "name": "CorrelationFunctionValues",
            "description": "Generic section containing information regarding the values of a correlation function.",
            "base_sections": [
              "/packages/6/section_definitions/18"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_times",
                "description": "Number of times windows for the calculation of the correlation function.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "times",
                "description": "Time windows used for the calculation of the correlation function.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_times"
                ],
                "unit": "second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "value_magnitude",
                "description": "Values of the property.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_times"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "value_unit",
                "description": "Unit of the property, using UnitRegistry() notation.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 27,
            "m_parent_sub_section": "section_definitions",
            "name": "MeanSquaredDisplacementValues",
            "description": "Section containing information regarding the values of a mean squared displacements (msds).",
            "base_sections": [
              "/packages/6/section_definitions/26"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "times",
                "description": "Time windows used for the calculation of the msds.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_times"
                ],
                "unit": "second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Mean squared displacement values.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_times"
                ],
                "unit": "meter ** 2"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "errors",
                "description": "Error associated with the determination of the msds.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "diffusion_constant",
                "sub_section": "/packages/6/section_definitions/25",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 28,
            "m_parent_sub_section": "section_definitions",
            "name": "CorrelationFunction",
            "description": "Generic section containing information about a calculation of any time correlation function from a trajectory.",
            "base_sections": [
              "/packages/6/section_definitions/17"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "direction",
                "description": "Describes the direction in which the correlation function was calculated.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "x",
                    "xy",
                    "xyz",
                    "xz",
                    "y",
                    "yz",
                    "z"
                  ]
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "correlation_function_values",
                "sub_section": "/packages/6/section_definitions/26",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 29,
            "m_parent_sub_section": "section_definitions",
            "name": "MeanSquaredDisplacement",
            "description": "Section containing information about a calculation of any mean squared displacements (msds).",
            "base_sections": [
              "/packages/6/section_definitions/28"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "mean_squared_displacement_values",
                "sub_section": "/packages/6/section_definitions/27",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 30,
            "m_parent_sub_section": "section_definitions",
            "name": "MolecularDynamicsResults",
            "base_sections": [
              "/packages/6/section_definitions/5"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "finished_normally",
                "description": "Indicates if calculation terminated normally.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_steps",
                "description": "Number of trajectory steps",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "trajectory",
                "description": "Reference to the system of each step in the trajectory.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/3/section_definitions/8"
                },
                "shape": [
                  "n_steps"
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "ensemble_properties",
                "sub_section": "/packages/6/section_definitions/21",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "correlation_functions",
                "sub_section": "/packages/6/section_definitions/28",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "radial_distribution_functions",
                "sub_section": "/packages/6/section_definitions/22",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 3,
                "m_parent_sub_section": "sub_sections",
                "name": "radius_of_gyration",
                "sub_section": "/packages/6/section_definitions/24",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 4,
                "m_parent_sub_section": "sub_sections",
                "name": "mean_squared_displacements",
                "sub_section": "/packages/6/section_definitions/29",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 31,
            "m_parent_sub_section": "section_definitions",
            "name": "MolecularDynamics",
            "base_sections": [
              "/packages/6/section_definitions/10"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "method",
                "sub_section": "/packages/6/section_definitions/16"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "results",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/6/section_definitions/30"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 32,
            "m_parent_sub_section": "section_definitions",
            "name": "PhononMethod",
            "base_sections": [
              "/packages/6/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "force_calculator",
                "description": "Name of the program used to calculate the forces.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "mesh_density",
                "description": "Density of the k-mesh for sampling.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "1 / meter ** 3"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "random_displacements",
                "description": "Identifies if displacements are made randomly.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "with_non_analytic_correction",
                "description": "Identifies if non-analytical term corrections are applied to dynamical matrix.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "with_grueneisen_parameters",
                "description": "Identifies if Grueneisen parameters are calculated.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 33,
            "m_parent_sub_section": "section_definitions",
            "name": "PhononResults",
            "base_sections": [
              "/packages/6/section_definitions/5"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_imaginary_frequencies",
                "description": "Number of modes with imaginary frequencies.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_bands",
                "description": "Number of phonon bands.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_qpoints",
                "description": "Number of q points for which phonon properties are evaluated.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "qpoints",
                "description": "Value of the qpoints.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_qpoints",
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "group_velocity",
                "description": "Calculated value of the group velocity at each qpoint.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_qpoints",
                  "n_bands",
                  3
                ],
                "unit": "meter / second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "n_displacements",
                "description": "Number of independent displacements.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "n_atoms",
                "description": "Number of atoms in the simulation cell.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "displacements",
                "description": "Value of the displacements applied to each atom in the simulation cell.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_displacements",
                  "n_atoms",
                  3
                ],
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "dos",
                "description": "Reference to the electronic density of states data.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/17"
                },
                "shape": [
                  "n_data"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "band_structure",
                "description": "Reference to the electronic band structure data.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/14"
                },
                "shape": [
                  "n_data"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 34,
            "m_parent_sub_section": "section_definitions",
            "name": "Phonon",
            "base_sections": [
              "/packages/6/section_definitions/9"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "method",
                "sub_section": "/packages/6/section_definitions/32"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "results",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/6/section_definitions/33"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 35,
            "m_parent_sub_section": "section_definitions",
            "name": "StrainDiagrams",
            "description": "Section containing the information regarding the elastic strains.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "Kind of strain diagram. Possible values are: energy; cross-validation (cross-\nvalidation error); d2E (second derivative of the energy wrt the strain)",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_eta",
                "description": "Number of strain values used in the strain diagram",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_deformations",
                "description": "Number of deformations.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Values of the energy(units:J)/d2E(units:Pa)/cross-validation (depending on the\nvalue of strain_diagram_type)",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_deformations",
                  "n_eta"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "eta",
                "description": "eta values used the strain diagrams",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_deformations",
                  "n_eta"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "stress_voigt_component",
                "description": "Voigt component corresponding to the strain diagram",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "polynomial_fit_order",
                "description": "Order of the polynomial fit",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 36,
            "m_parent_sub_section": "section_definitions",
            "name": "ElasticMethod",
            "base_sections": [
              "/packages/6/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "energy_stress_calculator",
                "description": "Name of program used to calculate energy or stress.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "calculation_method",
                "description": "Method used to calculate elastic constants, can either be energy or stress.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "elastic_constants_order",
                "description": "Order of the calculated elastic constants.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "fitting_error_maximum",
                "description": "Maximum error in polynomial fit.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "strain_maximum",
                "description": "Maximum strain applied to crystal.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 37,
            "m_parent_sub_section": "section_definitions",
            "name": "ElasticResults",
            "base_sections": [
              "/packages/6/section_definitions/5"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_deformations",
                "description": "Number of deformed structures used to calculate the elastic constants. This is\ndetermined by the symmetry of the crystal.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "deformation_types",
                "description": "deformation types",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "str_"
                },
                "shape": [
                  "n_deformations",
                  6
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_strains",
                "description": "number of equally spaced strains applied to each deformed structure, which are\ngenerated between the maximum negative strain and the maximum positive one.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "is_mechanically_stable",
                "description": "Indicates if structure is mechanically stable from the calculated values of the\nelastic constants.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "elastic_constants_notation_matrix_second_order",
                "description": "Symmetry of the second-order elastic constant matrix in Voigt notation",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "str_"
                },
                "shape": [
                  6,
                  6
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "elastic_constants_matrix_second_order",
                "description": "2nd order elastic constant (stiffness) matrix in pascals",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  6,
                  6
                ],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "elastic_constants_matrix_third_order",
                "description": "3rd order elastic constant (stiffness) matrix in pascals",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  6,
                  6,
                  6
                ],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "compliance_matrix_second_order",
                "description": "Elastic compliance matrix in 1/GPa",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  6,
                  6
                ],
                "unit": "1 / pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "elastic_constants_gradient_matrix_second_order",
                "description": "gradient of the 2nd order elastic constant (stiffness) matrix in newton",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  18,
                  18
                ],
                "unit": "newton"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "bulk_modulus_voigt",
                "description": "Voigt bulk modulus",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "shear_modulus_voigt",
                "description": "Voigt shear modulus",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "name": "bulk_modulus_reuss",
                "description": "Reuss bulk modulus",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "name": "shear_modulus_reuss",
                "description": "Reuss shear modulus",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 13,
                "m_parent_sub_section": "quantities",
                "name": "bulk_modulus_hill",
                "description": "Hill bulk modulus",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 14,
                "m_parent_sub_section": "quantities",
                "name": "shear_modulus_hill",
                "description": "Hill shear modulus",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 15,
                "m_parent_sub_section": "quantities",
                "name": "young_modulus_voigt",
                "description": "Voigt Young modulus",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 16,
                "m_parent_sub_section": "quantities",
                "name": "poisson_ratio_voigt",
                "description": "Voigt Poisson ratio",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 17,
                "m_parent_sub_section": "quantities",
                "name": "young_modulus_reuss",
                "description": "Reuss Young modulus",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 18,
                "m_parent_sub_section": "quantities",
                "name": "poisson_ratio_reuss",
                "description": "Reuss Poisson ratio",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 19,
                "m_parent_sub_section": "quantities",
                "name": "young_modulus_hill",
                "description": "Hill Young modulus",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 20,
                "m_parent_sub_section": "quantities",
                "name": "poisson_ratio_hill",
                "description": "Hill Poisson ratio",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 21,
                "m_parent_sub_section": "quantities",
                "name": "elastic_anisotropy",
                "description": "Elastic anisotropy",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 22,
                "m_parent_sub_section": "quantities",
                "name": "pugh_ratio_hill",
                "description": "Pugh ratio defined as the ratio between the shear modulus and bulk modulus",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 23,
                "m_parent_sub_section": "quantities",
                "name": "debye_temperature",
                "description": "Debye temperature",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 24,
                "m_parent_sub_section": "quantities",
                "name": "speed_sound_transverse",
                "description": "Speed of sound along the transverse direction",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter / second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 25,
                "m_parent_sub_section": "quantities",
                "name": "speed_sound_longitudinal",
                "description": "Speed of sound along the longitudinal direction",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter / second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 26,
                "m_parent_sub_section": "quantities",
                "name": "speed_sound_average",
                "description": "Average speed of sound",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter / second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 27,
                "m_parent_sub_section": "quantities",
                "name": "eigenvalues_elastic",
                "description": "Eigenvalues of the stiffness matrix",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  6
                ],
                "unit": "pascal"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "strain_diagrams",
                "sub_section": "/packages/6/section_definitions/35",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 38,
            "m_parent_sub_section": "section_definitions",
            "name": "Elastic",
            "base_sections": [
              "/packages/6/section_definitions/9"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "method",
                "sub_section": "/packages/6/section_definitions/36"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "results",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/6/section_definitions/37"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 39,
            "m_parent_sub_section": "section_definitions",
            "name": "ThermodynamicsMethod",
            "base_sections": [
              "/packages/6/section_definitions/0"
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 40,
            "m_parent_sub_section": "section_definitions",
            "name": "Thermodynamics",
            "base_sections": [
              "/packages/6/section_definitions/10"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "method",
                "sub_section": "/packages/6/section_definitions/39"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "results",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/6/section_definitions/5"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 41,
            "m_parent_sub_section": "section_definitions",
            "name": "GWResults",
            "description": "Groups DFT and GW outputs: band gaps, DOS, band structures. The ResultsNormalizer takes care of adding a label 'DFT' or 'GW' in the method `get_gw_workflow_properties`.",
            "base_sections": [
              "/packages/6/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "band_gap_dft",
                "description": "Reference to the DFT band gap.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/19"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "band_gap_gw",
                "description": "Reference to the GW band gap.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/19"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "dos_dft",
                "description": "Reference to the DFT density of states.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/17"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "dos_gw",
                "description": "Reference to the GW density of states.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/17"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "band_structure_dft",
                "description": "Reference to the DFT band structure.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/14"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "band_structure_gw",
                "description": "Reference to the GW band structure.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/14"
                },
                "shape": [
                  "*"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 42,
            "m_parent_sub_section": "section_definitions",
            "name": "GWMethod",
            "description": "Groups DFT and GW input methodologies: starting XC functional, electrons representation (basis set), GW method reference.",
            "base_sections": [
              "/packages/6/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "starting_point",
                "description": "Reference to the starting point (XC functional or HF) used.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/2/section_definitions/22"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "electrons_representation",
                "description": "Reference to the basis set used.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/2/section_definitions/18"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "gw_method_ref",
                "description": "Reference to the GW methodology.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/2/section_definitions/36"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 43,
            "m_parent_sub_section": "section_definitions",
            "name": "GW",
            "description": "The GW workflow is generated in an extra EntryArchive IF both the DFT SinglePoint and the GW SinglePoint EntryArchives are present in the upload.",
            "base_sections": [
              "/packages/6/section_definitions/10"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "method",
                "sub_section": "/packages/6/section_definitions/42"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "results",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/6/section_definitions/41"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 44,
            "m_parent_sub_section": "section_definitions",
            "name": "TBResults",
            "base_sections": [
              "/packages/6/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "band_gap_first_principles",
                "description": "Reference to the First-principles band gap.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/19"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "band_gap_tb",
                "description": "Reference to the TB band gap.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/19"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "band_structure_first_principles",
                "description": "Reference to the first-principles band structure.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/14"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "band_structure_tb",
                "description": "Reference to the tight-Binding band structure.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/14"
                },
                "shape": [
                  "*"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 45,
            "m_parent_sub_section": "section_definitions",
            "name": "TBMethod",
            "base_sections": [
              "/packages/6/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "tb_method_ref",
                "description": "Reference to the tight-Binding methodology.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/2/section_definitions/30"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 46,
            "m_parent_sub_section": "section_definitions",
            "name": "TB",
            "base_sections": [
              "/packages/6/section_definitions/10"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "method",
                "sub_section": "/packages/6/section_definitions/45"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "results",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/6/section_definitions/44"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 47,
            "m_parent_sub_section": "section_definitions",
            "name": "PhotonPolarizationResults",
            "description": "Groups all polarization outputs: spectrum.",
            "base_sections": [
              "/packages/6/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_polarizations",
                "description": "Number of polarizations for the phonons used for the calculations.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "spectrum_polarization",
                "description": "Spectrum for a given polarization of the photon.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/28"
                },
                "shape": [
                  "n_polarizations"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 48,
            "m_parent_sub_section": "section_definitions",
            "name": "PhotonPolarizationMethod",
            "description": "Defines the full macroscopic dielectric tensor methodology: BSE method reference.",
            "base_sections": [
              "/packages/6/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "bse_method_ref",
                "description": "BSE methodology reference.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/2/section_definitions/37"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 49,
            "m_parent_sub_section": "section_definitions",
            "name": "PhotonPolarization",
            "description": "The PhotonPolarization workflow is generated in an extra EntryArchive FOR all polarization EntryArchives present in the upload. It groups them for a set of given method parameters.\n\nThis entry is also recognized as the full macroscopic dielectric tensor entry (e.g. calculated\nvia BSE).",
            "base_sections": [
              "/packages/6/section_definitions/9"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "method",
                "sub_section": "/packages/6/section_definitions/48"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "results",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/6/section_definitions/47"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 50,
            "m_parent_sub_section": "section_definitions",
            "name": "XSResults",
            "description": "Groups DFT, GW and PhotonPolarization outputs: band gaps (DFT, GW), DOS (DFT, GW), band structures (DFT, GW), spectra (PhotonPolarization). The ResultsNormalizer takes\ncare of adding a label 'DFT' or 'GW' in the method `get_xs_workflow_properties`.",
            "base_sections": [
              "/packages/6/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "band_gap_dft",
                "description": "Reference to the DFT band gap.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/19"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "band_gap_gw",
                "description": "Reference to the GW band gap.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/19"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "band_structure_dft",
                "description": "Reference to the DFT density of states.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/14"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "band_structure_gw",
                "description": "Reference to the GW density of states.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/14"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "dos_dft",
                "description": "Reference to the DFT band structure.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/17"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "dos_gw",
                "description": "Reference to the GW band structure.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/17"
                },
                "shape": [
                  "*"
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "spectra",
                "sub_section": "/packages/6/section_definitions/47",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 51,
            "m_parent_sub_section": "section_definitions",
            "name": "XSMethod",
            "base_sections": [
              "/packages/6/section_definitions/0"
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 52,
            "m_parent_sub_section": "section_definitions",
            "name": "XS",
            "description": "The XS workflow is generated in an extra EntryArchive IF both the DFT SinglePoint and the PhotonPolarization EntryArchives are present in the upload.",
            "base_sections": [
              "/packages/6/section_definitions/10"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "method",
                "sub_section": "/packages/6/section_definitions/51"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "results",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/6/section_definitions/50"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 53,
            "m_parent_sub_section": "section_definitions",
            "name": "MaxEntResults",
            "description": "Groups DMFT and MaxEnt outputs: greens functions (DMFT, MaxEnt), band gaps (MaxEnt), DOS (MaxEnt), band structures (MaxEnt). The ResultsNormalizer takes care of adding a\nlabel 'DMFT' or 'MaxEnt' in the method `get_maxent_workflow_properties`.",
            "base_sections": [
              "/packages/6/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "greens_functions_dmft",
                "description": "Ref to the DMFT Greens functions.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/29"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "band_gap_maxent",
                "description": "MaxEnt band gap.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/19"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "dos_maxent",
                "description": "Ref to the MaxEnt density of states (also called spectral function).",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/17"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "greens_functions_maxent",
                "description": "Ref to the MaxEnt Greens functions.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/29"
                },
                "shape": [
                  "*"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 54,
            "m_parent_sub_section": "section_definitions",
            "name": "MaxEntMethod",
            "description": "Groups DMFT and MaxEnt input methodologies: DMFT method references, MaxEnt method reference.",
            "base_sections": [
              "/packages/6/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "dmft_method_ref",
                "description": "DMFT methodology reference.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/2/section_definitions/38"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "maxent_method_ref",
                "description": "MaxEnt methodology reference.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/2/section_definitions/44"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 55,
            "m_parent_sub_section": "section_definitions",
            "name": "MaxEnt",
            "description": "The MaxEnt (Maximum Entropy) workflow is generated in an extra EntryArchive IF both the DMFT SinglePoint and the MaxEnt SinglePoint EntryArchives are present in the upload.",
            "base_sections": [
              "/packages/6/section_definitions/10"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "method",
                "sub_section": "/packages/6/section_definitions/54"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "results",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/6/section_definitions/53"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 56,
            "m_parent_sub_section": "section_definitions",
            "name": "DMFTResults",
            "description": "Groups DFT, TB and DMFT outputs: band gaps (all), DOS (DFT, TB), band structures (DFT, TB), Greens functions (DMFT). The ResultsNormalizer takes care\nof adding a label 'DFT', 'PROJECTION, or 'DMFT' in the method `get_dmft_workflow_properties`.",
            "base_sections": [
              "/packages/6/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "band_gap_dft",
                "description": "DFT band gap.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/19"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "band_gap_tb",
                "description": "TB band gap.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/19"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "band_gap_dmft",
                "description": "DMFT band gap.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/19"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "band_structure_dft",
                "description": "Ref to the DFT band structure.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/14"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "dos_dft",
                "description": "Ref to the DFT density of states.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/17"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "band_structure_tb",
                "description": "Ref to the TB band structure.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/14"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "dos_tb",
                "description": "Ref to the TB density of states.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/17"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "greens_functions_dmft",
                "description": "Ref to the DMFT Greens functions.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/29"
                },
                "shape": [
                  "*"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 57,
            "m_parent_sub_section": "section_definitions",
            "name": "DMFTMethod",
            "description": "Groups DFT, TB and DMFT input methodologies: starting XC functional, electrons representation (basis set), TB method reference, DMFT method reference.",
            "base_sections": [
              "/packages/6/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "starting_point",
                "description": "Starting point (XC functional or HF) used.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/2/section_definitions/22"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "electrons_representation",
                "description": "Basis set used.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/2/section_definitions/18"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "tb_method_ref",
                "description": "TB methodology reference.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/2/section_definitions/30"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "dmft_method_ref",
                "description": "DMFT methodology reference.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/2/section_definitions/38"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 58,
            "m_parent_sub_section": "section_definitions",
            "name": "DMFT",
            "description": "The DMFT workflow is generated in an extra EntryArchive IF both the TB SinglePoint and the DMFT SinglePoint EntryArchives are present in the upload.",
            "base_sections": [
              "/packages/6/section_definitions/10"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "method",
                "sub_section": "/packages/6/section_definitions/57"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "results",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/6/section_definitions/56"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 59,
            "m_parent_sub_section": "section_definitions",
            "name": "EquationOfStateMethod",
            "base_sections": [
              "/packages/6/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "energy_calculator",
                "description": "Name of program used to calculate energy.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 60,
            "m_parent_sub_section": "section_definitions",
            "name": "EOSFit",
            "description": "Section containing results of an equation of state fit.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "function_name",
                "description": "Specifies the function used to perform the fitting of the volume-energy data. Value\ncan be one of birch_euler, birch_lagrange, birch_murnaghan, mie_gruneisen,\nmurnaghan, pack_evans_james, poirier_tarantola, tait, vinet.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "fitted_energies",
                "description": "Array of the fitted energies corresponding to each volume.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_points"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "bulk_modulus",
                "description": "Calculated value of the bulk modulus by fitting the volume-energy data.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "bulk_modulus_derivative",
                "description": "Calculated value of the pressure derivative of the bulk modulus.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "equilibrium_volume",
                "description": "Calculated value of the equilibrium volume by fitting the volume-energy data.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter ** 3"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "equilibrium_energy",
                "description": "Calculated value of the equilibrium energy by fitting the volume-energy data.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "rms_error",
                "description": "Root-mean squared value of the error in the fitting.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 61,
            "m_parent_sub_section": "section_definitions",
            "name": "EquationOfStateResults",
            "base_sections": [
              "/packages/6/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_points",
                "description": "Number of volume-energy pairs in data.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "volumes",
                "description": "Array of volumes per atom for which the energies are evaluated.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_points"
                ],
                "unit": "meter ** 3"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "energies",
                "description": "Array of energies corresponding to each volume.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_points"
                ],
                "unit": "joule"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "eos_fit",
                "sub_section": "/packages/6/section_definitions/60",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 62,
            "m_parent_sub_section": "section_definitions",
            "name": "EquationOfState",
            "base_sections": [
              "/packages/6/section_definitions/9"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "method",
                "sub_section": "/packages/6/section_definitions/59"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "results",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/6/section_definitions/61"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 63,
            "m_parent_sub_section": "section_definitions",
            "name": "ChemicalReactionMethod",
            "base_sections": [
              "/packages/6/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "reaction_type",
                "description": "The type of the chemical reaction.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "surface_adsorption"
                  ]
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 64,
            "m_parent_sub_section": "section_definitions",
            "name": "ChemicalReactionResults",
            "base_sections": [
              "/packages/6/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "reaction_energy",
                "description": "Calculated value of the reaction energy, E_reaction= E_products - E_reactants",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "activation_energy",
                "description": "Calculated value of the activation energy, E_activation = E_transitions - E_reactants",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "joule"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 65,
            "m_parent_sub_section": "section_definitions",
            "name": "ChemicalReaction",
            "base_sections": [
              "/packages/6/section_definitions/2"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "method",
                "sub_section": "/packages/6/section_definitions/63"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "results",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/6/section_definitions/64"
              }
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 7,
        "m_parent_sub_section": "packages",
        "name": "nomad.datamodel.metainfo.simulation.legacy_workflows",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "Interface",
            "description": "Section containing results of an interface (stacking fault, gamma surface, etc.) workflow.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "energy_extrinsic_stacking_fault",
                "description": "Value of the relaxed extrinsic stacking fault energy per unit area.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule / meter ** 2"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "energy_intrinsic_stacking_fault",
                "description": "Value of the relaxed intrinsic stacking fault energy per unit area.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule / meter ** 2"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "dimensionality",
                "description": "Dimensionality of the property, i.e. 1 for stacking fault energy and 2 for gamma\nsurface.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "shift_direction",
                "description": "shift direction of the two crystal parts to calculate the fault energy.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "dimensionality"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "n_displacements",
                "description": "Number of displacements in the shift to calculate the fault energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "displacement_fraction",
                "description": "Relative displacements of the two crystal parts along the direction indicated by\nshift_direction.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "dimensionality",
                  "n_displacements"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "energy_fault_plane",
                "description": "Value of the relaxed excess energy per unit area for each displacement.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_displacements"
                ],
                "unit": "joule / meter ** 2"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "gamma_surface",
                "description": "Value of the gamma surface, i.e. the excess energy per unit area calculated for\neach displacement.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_displacements",
                  "n_displacements"
                ],
                "unit": "joule / meter ** 2"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "slip_fraction",
                "description": "Relative displacement between two crystal parts where the energy is maximum.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "energy_unstable_stacking_fault",
                "description": "Value of the relaxed unstable stacking fault energy per unit area.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule / meter ** 2"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "energy_unstable_twinning_fault",
                "description": "Value of the relaxed unstable twinning energy per unit area.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule / meter ** 2"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "Raman",
            "description": "Section containing results of a Raman workflow.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_modes",
                "description": "Number of evaluated vibrational modes.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_atoms",
                "description": "Number of atoms in the simulation cell.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "frequencies",
                "description": "Calculated value of the Raman frequencies.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_modes"
                ],
                "unit": "1 / meter"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "name": "MagneticOrdering",
            "description": "Section containing results of a magnetic ordering workflow.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_structures",
                "description": "Number of magnetic structures evaluated.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_atoms",
                "description": "Number of atoms in the simulation cell.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "labels",
                "description": "Labels corresponding to each magnetic structure.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "n_structures"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "energies",
                "description": "Calculated value of the energies corresponding to each magnetic structure.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_structures"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "magnetic_moments",
                "description": "Resulting atomic magnetic moments corresponding to each magnetic structure.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_structures",
                  "n_atoms"
                ],
                "unit": "bohr_magneton"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "magnetic_deformations",
                "description": "Average atomic displacements after relaxation with respect to the non-magnetic\ncase for each magnetic structure.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_structures"
                ],
                "unit": "meter"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 3,
            "m_parent_sub_section": "section_definitions",
            "name": "Adsorption",
            "description": "Section containing results of a surface adsorption workflow.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_sites",
                "description": "Number of sites for which the adsorption energy is evaluated.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "slab_miller_index",
                "description": "Miller index of the slab.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "slab",
                "description": "Chemical formula of the slab.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "adsorbate",
                "description": "Chemical formula of the adsorbate molecule.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "adsorption_sites",
                "description": "Coordinates of the adsorption sites corresponding to a minimum energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_sites"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "adsorption_energies",
                "description": "Calculated value of the adsorption energy corresponding to each site.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_sites"
                ],
                "unit": "joule"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 4,
            "m_parent_sub_section": "section_definitions",
            "name": "ConvexHull",
            "description": "Section containing results of a convex hull workflow.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_elements",
                "description": "Number of elements for which the thermal stability is evaluated. This represents\nthe dimensionality of the convex hull.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_points",
                "description": "Number of points for which the energies are evaluated.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "compositions",
                "description": "Normalized composition of the elements corresponding to each point for which the\nenergies are evaluated.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_points",
                  "n_elements"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "references",
                "description": "Specifies the reference structure for each element.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "n_elements"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "energy_of_formation",
                "description": "Values of the heat of formation corresponding to each point.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_points"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "energy_hulll",
                "description": "Values of the energy above the convex hull corresponding to each point.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_points"
                ],
                "unit": "joule"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 5,
            "m_parent_sub_section": "section_definitions",
            "name": "NudgedElasticBand",
            "description": "Section containing results of a nudged-elastic band workflow.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "method",
                "description": "Specifies the method used in calculating the minumum energy path. Can be one of\nstandard, improved_tangeant, full_spring_force, spline_interpolation, string.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "climbing_image",
                "description": "Indicates if climbing image is used.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "solid_state",
                "description": "Indicates if solid state nudged-elastic band calculation is performed.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "optimizer",
                "description": "Specifies the method used in energy minimization.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "n_images",
                "description": "Number of images used in the calculation.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "spring_constants",
                "description": "Spring constants for each spring.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_images"
                ],
                "unit": "newton"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "energy_barrier",
                "description": "Maximum value of the calculated energy barrier.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "force_maximum",
                "description": "Maximum force along the minimum energy path.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "newton"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 6,
            "m_parent_sub_section": "section_definitions",
            "name": "EOSFit",
            "description": "Section containing results of an equation of state fit.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "function_name",
                "description": "Specifies the function used to perform the fitting of the volume-energy data. Value\ncan be one of birch_euler, birch_lagrange, birch_murnaghan, mie_gruneisen,\nmurnaghan, pack_evans_james, poirier_tarantola, tait, vinet.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "fitted_energies",
                "description": "Array of the fitted energies corresponding to each volume.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_points"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "bulk_modulus",
                "description": "Calculated value of the bulk modulus by fitting the volume-energy data.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "bulk_modulus_derivative",
                "description": "Calculated value of the pressure derivative of the bulk modulus.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "equilibrium_volume",
                "description": "Calculated value of the equilibrium volume by fitting the volume-energy data.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter ** 3"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "equilibrium_energy",
                "description": "Calculated value of the equilibrium energy by fitting the volume-energy data.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "rms_error",
                "description": "Root-mean squared value of the error in the fitting.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 7,
            "m_parent_sub_section": "section_definitions",
            "name": "EquationOfState",
            "description": "Section containing results of an equation of state workflow.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_points",
                "description": "Number of volume-energy pairs in data.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "volumes",
                "description": "Array of volumes per atom for which the energies are evaluated.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_points"
                ],
                "unit": "meter ** 3"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "energies",
                "description": "Array of energies corresponding to each volume.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_points"
                ],
                "unit": "joule"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "eos_fit",
                "sub_section": "/packages/7/section_definitions/6",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 8,
            "m_parent_sub_section": "section_definitions",
            "name": "DebyeModel",
            "description": "Section containing results of an debye-model workflow.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_temperatures",
                "description": "Number of temperature evaluations.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "thermal_conductivity",
                "description": "Calculated value of the thermal conductity.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_temperatures"
                ],
                "unit": "kelvin * watt / meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "debye_temperature",
                "description": "Calculated value of the Debye temperature.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_temperatures"
                ],
                "unit": "kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "gruneisen_parameter",
                "description": "Calculated value of the Gruneisen parameter.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_temperatures"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "thermal_expansion",
                "description": "Calculated value of the thermal expansion coefficient.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_temperatures"
                ],
                "unit": "1 / kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "bulk_modulus_static",
                "description": "Calculated value of the static bulk modulus.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_temperatures"
                ],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "bulk_modulus_isothermal",
                "description": "Calculated value of the static bulk modulus.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_temperatures"
                ],
                "unit": "pascal"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 9,
            "m_parent_sub_section": "section_definitions",
            "name": "GeometryOptimization",
            "description": "Section containing the results of a geometry_optimization workflow.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "The type of geometry optimization, which denotes what is being optimized.\n\nAllowed values are:\n\n| Type                   | Description                               |\n\n| ---------------------- | ----------------------------------------- |\n\n| `\"static\"`             | no optimization |\n\n| `\"atomic\"`             | the atomic coordinates alone are updated |\n\n| `\"cell_volume\"`         | `\"atomic\"` + cell lattice paramters are updated isotropically |\n\n| `\"cell_shape\"`        | `\"cell_volume\"` but without the isotropic constraint: all cell parameters are updated |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "atomic",
                    "cell_shape",
                    "cell_volume",
                    "static"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "method",
                "description": "The method used for geometry optimization. Some known possible values are:\n`\"steepest_descent\"`, `\"conjugant_gradient\"`, `\"low_memory_broyden_fletcher_goldfarb_shanno\"`.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "convergence_tolerance_energy_difference",
                "description": "The input energy difference tolerance criterion.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "convergence_tolerance_force_maximum",
                "description": "The input maximum net force tolerance criterion.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "newton"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "convergence_tolerance_displacement_maximum",
                "description": "The input maximum displacement tolerance criterion.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "final_energy_difference",
                "description": "The difference in the energy_total between the last two steps during\noptimization.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "final_force_maximum",
                "description": "The maximum net force in the last optimization step.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "newton"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "final_displacement_maximum",
                "description": "The maximum displacement in the last optimization step with respect to previous.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "optimization_steps_maximum",
                "description": "Maximum number of optimization steps.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "optimization_steps",
                "description": "Number of saved optimization steps.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "energies",
                "description": "List of energy_total values gathered from the single configuration\ncalculations that are a part of the optimization trajectory.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "optimization_steps"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "name": "steps",
                "description": "The step index corresponding to each saved configuration.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "name": "is_converged_geometry",
                "description": "Indicates if the geometry convergence criteria were fulfilled.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 10,
            "m_parent_sub_section": "section_definitions",
            "name": "Phonon",
            "description": "Section containing the results of a phonon workflow.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "force_calculator",
                "description": "Name of the program used to calculate the forces.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "mesh_density",
                "description": "Density of the k-mesh for sampling.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "1 / meter ** 3"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_imaginary_frequencies",
                "description": "Number of modes with imaginary frequencies.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "random_displacements",
                "description": "Identifies if displacements are made randomly.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "with_non_analytic_correction",
                "description": "Identifies if non-analytical term corrections are applied to dynamical matrix.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "with_grueneisen_parameters",
                "description": "Identifies if Grueneisen parameters are calculated.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "n_bands",
                "description": "Number of phonon bands.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "n_qpoints",
                "description": "Number of q points for which phonon properties are evaluated.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "qpoints",
                "description": "Value of the qpoints.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_qpoints",
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "group_velocity",
                "description": "Calculated value of the group velocity at each qpoint.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_qpoints",
                  "n_bands",
                  3
                ],
                "unit": "meter / second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "n_displacements",
                "description": "Number of independent displacements.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "name": "n_atoms",
                "description": "Number of atoms in the simulation cell.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "name": "displacements",
                "description": "Value of the displacements applied to each atom in the simulation cell.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_displacements",
                  "n_atoms",
                  3
                ],
                "unit": "meter"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 11,
            "m_parent_sub_section": "section_definitions",
            "name": "StrainDiagrams",
            "description": "Section containing the information regarding the elastic strains.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "Kind of strain diagram. Possible values are: energy; cross-validation (cross-\nvalidation error); d2E (second derivative of the energy wrt the strain)",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_eta",
                "description": "Number of strain values used in the strain diagram",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_deformations",
                "description": "Number of deformations.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Values of the energy(units:J)/d2E(units:Pa)/cross-validation (depending on the\nvalue of strain_diagram_type)",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_deformations",
                  "n_eta"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "eta",
                "description": "eta values used the strain diagrams",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_deformations",
                  "n_eta"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "stress_voigt_component",
                "description": "Voigt component corresponding to the strain diagram",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "polynomial_fit_order",
                "description": "Order of the polynomial fit",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 12,
            "m_parent_sub_section": "section_definitions",
            "name": "Elastic",
            "description": "Section containing the results of an elastic workflow.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "energy_stress_calculator",
                "description": "Name of program used to calculate energy or stress.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "calculation_method",
                "description": "Method used to calculate elastic constants, can either be energy or stress.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "elastic_constants_order",
                "description": "Order of the calculated elastic constants.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "n_deformations",
                "description": "Number of deformed structures used to calculate the elastic constants. This is\ndetermined by the symmetry of the crystal.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "deformation_types",
                "description": "deformation types",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "str_"
                },
                "shape": [
                  "n_deformations",
                  6
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "n_strains",
                "description": "number of equally spaced strains applied to each deformed structure, which are\ngenerated between the maximum negative strain and the maximum positive one.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "is_mechanically_stable",
                "description": "Indicates if structure is mechanically stable from the calculated values of the\nelastic constants.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "fitting_error_maximum",
                "description": "Maximum error in polynomial fit.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "strain_maximum",
                "description": "Maximum strain applied to crystal.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "elastic_constants_notation_matrix_second_order",
                "description": "Symmetry of the second-order elastic constant matrix in Voigt notation",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "str_"
                },
                "shape": [
                  6,
                  6
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "elastic_constants_matrix_second_order",
                "description": "2nd order elastic constant (stiffness) matrix in pascals",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  6,
                  6
                ],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "name": "elastic_constants_matrix_third_order",
                "description": "3rd order elastic constant (stiffness) matrix in pascals",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  6,
                  6,
                  6
                ],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "name": "compliance_matrix_second_order",
                "description": "Elastic compliance matrix in 1/GPa",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  6,
                  6
                ],
                "unit": "1 / pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 13,
                "m_parent_sub_section": "quantities",
                "name": "elastic_constants_gradient_matrix_second_order",
                "description": "gradient of the 2nd order elastic constant (stiffness) matrix in newton",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  18,
                  18
                ],
                "unit": "newton"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 14,
                "m_parent_sub_section": "quantities",
                "name": "bulk_modulus_voigt",
                "description": "Voigt bulk modulus",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 15,
                "m_parent_sub_section": "quantities",
                "name": "shear_modulus_voigt",
                "description": "Voigt shear modulus",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 16,
                "m_parent_sub_section": "quantities",
                "name": "bulk_modulus_reuss",
                "description": "Reuss bulk modulus",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 17,
                "m_parent_sub_section": "quantities",
                "name": "shear_modulus_reuss",
                "description": "Reuss shear modulus",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 18,
                "m_parent_sub_section": "quantities",
                "name": "bulk_modulus_hill",
                "description": "Hill bulk modulus",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 19,
                "m_parent_sub_section": "quantities",
                "name": "shear_modulus_hill",
                "description": "Hill shear modulus",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 20,
                "m_parent_sub_section": "quantities",
                "name": "young_modulus_voigt",
                "description": "Voigt Young modulus",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 21,
                "m_parent_sub_section": "quantities",
                "name": "poisson_ratio_voigt",
                "description": "Voigt Poisson ratio",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 22,
                "m_parent_sub_section": "quantities",
                "name": "young_modulus_reuss",
                "description": "Reuss Young modulus",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 23,
                "m_parent_sub_section": "quantities",
                "name": "poisson_ratio_reuss",
                "description": "Reuss Poisson ratio",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 24,
                "m_parent_sub_section": "quantities",
                "name": "young_modulus_hill",
                "description": "Hill Young modulus",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 25,
                "m_parent_sub_section": "quantities",
                "name": "poisson_ratio_hill",
                "description": "Hill Poisson ratio",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 26,
                "m_parent_sub_section": "quantities",
                "name": "elastic_anisotropy",
                "description": "Elastic anisotropy",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 27,
                "m_parent_sub_section": "quantities",
                "name": "pugh_ratio_hill",
                "description": "Pugh ratio defined as the ratio between the shear modulus and bulk modulus",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 28,
                "m_parent_sub_section": "quantities",
                "name": "debye_temperature",
                "description": "Debye temperature",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 29,
                "m_parent_sub_section": "quantities",
                "name": "speed_sound_transverse",
                "description": "Speed of sound along the transverse direction",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter / second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 30,
                "m_parent_sub_section": "quantities",
                "name": "speed_sound_longitudinal",
                "description": "Speed of sound along the longitudinal direction",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter / second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 31,
                "m_parent_sub_section": "quantities",
                "name": "speed_sound_average",
                "description": "Average speed of sound",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter / second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 32,
                "m_parent_sub_section": "quantities",
                "name": "eigenvalues_elastic",
                "description": "Eigenvalues of the stiffness matrix",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  6
                ],
                "unit": "pascal"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "strain_diagrams",
                "sub_section": "/packages/7/section_definitions/11",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 13,
            "m_parent_sub_section": "section_definitions",
            "name": "Decomposition",
            "description": "Section containing information about the system to which an unstable compound will decompose to.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "fraction",
                "description": "Amount of the resulting system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "system_ref",
                "description": "Reference to the resulting system.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/3/section_definitions/8"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "formula",
                "description": "Chemical formula of the resulting system.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 14,
            "m_parent_sub_section": "section_definitions",
            "name": "Stability",
            "description": "Section containing information regarding the stability of the system.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_references",
                "description": "Number of reference systems.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "systems_ref",
                "description": "References to the reference systems.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/3/section_definitions/8"
                },
                "shape": [
                  "n_references"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "formation_energy",
                "description": "Calculated value of the formation energy of the compound.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "delta_formation_energy",
                "description": "Energy with respect to the convex hull.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "is_stable",
                "description": "Indicates if a compound is stable.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "decomposition",
                "sub_section": "/packages/7/section_definitions/13",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 15,
            "m_parent_sub_section": "section_definitions",
            "name": "Thermodynamics",
            "description": "Section containing the results of a thermodynamics workflow.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_values",
                "description": "Number of thermodynamics property evaluations.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "temperature",
                "description": "Specifies the temperatures at which properties such as the Helmholtz free energy\nare calculated.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "pressure",
                "description": "Array containing the values of the pressure (one third of the trace of the stress\ntensor) corresponding to each property evaluation.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "helmholtz_free_energy",
                "description": "Helmholtz free energy per unit cell at constant volume.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "heat_capacity_c_p",
                "description": "Heat capacity per cell unit at constant pressure.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule / kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "heat_capacity_c_v",
                "description": "Heat capacity per cell unit at constant volume.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule / kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "heat_capacity_c_v_specific",
                "description": "Specific heat capacity at constant volume.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule / kelvin / kilogram",
                "cached": true,
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "vibrational_free_energy_at_constant_volume",
                "description": "Holds the vibrational free energy per cell unit at constant volume.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "vibrational_free_energy_at_constant_volume_specific",
                "description": "Stores the specific vibrational free energy at constant volume.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule / kilogram",
                "cached": true,
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "vibrational_free_energy",
                "description": "Calculated value of the vibrational free energy, F_vib.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "vibrational_internal_energy",
                "description": "Calculated value of the vibrational internal energy, U_vib.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "name": "vibrational_entropy",
                "description": "Calculated value of the vibrational entropy, S.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule / kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "name": "gibbs_free_energy",
                "description": "Calculated value of the Gibbs free energy, G.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 13,
                "m_parent_sub_section": "quantities",
                "name": "entropy",
                "description": "Calculated value of the entropy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule / kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 14,
                "m_parent_sub_section": "quantities",
                "name": "internal_energy",
                "description": "Calculated value of the internal energy, U.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "stability",
                "sub_section": "/packages/7/section_definitions/14",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 16,
            "m_parent_sub_section": "section_definitions",
            "name": "ThermostatParameters",
            "description": "Section containing the parameters pertaining to the thermostat for a molecular dynamics run.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "thermostat_type",
                "description": "The name of the thermostat used for temperature control. If skipped or an empty string is used, it\nmeans no thermostat was applied.\n\nAllowed values are:\n\n| Thermostat Name        | Description                               |\n\n| ---------------------- | ----------------------------------------- |\n\n| `\"\"`                   | No thermostat               |\n\n| `\"andersen\"`           | H.C. Andersen, [J. Chem. Phys.\n**72**, 2384 (1980)](https://doi.org/10.1063/1.439486) |\n\n| `\"berendsen\"`          | H. J. C. Berendsen, J. P. M. Postma,\nW. F. van Gunsteren, A. DiNola, and J. R. Haak, [J. Chem. Phys.\n**81**, 3684 (1984)](https://doi.org/10.1063/1.448118) |\n\n| `\"brownian\"`           | Brownian Dynamics |\n\n| `\"langevin_goga\"`           | N. Goga, A. J. Rzepiela, A. H. de Vries,\nS. J. Marrink, and H. J. C. Berendsen, [J. Chem. Theory Comput. **8**, 3637 (2012)]\n(https://doi.org/10.1021/ct3000876) |\n\n| `\"langevin_schneider\"`           | T. Schneider and E. Stoll,\n[Phys. Rev. B **17**, 1302](https://doi.org/10.1103/PhysRevB.17.1302) |\n\n| `\"nose_hoover\"`        | S. Nos\u00e9, [Mol. Phys. **52**, 255 (1984)]\n(https://doi.org/10.1080/00268978400101201); W.G. Hoover, [Phys. Rev. A\n**31**, 1695 (1985) |\n\n| `\"velocity_rescaling\"` | G. Bussi, D. Donadio, and M. Parrinello,\n[J. Chem. Phys. **126**, 014101 (2007)](https://doi.org/10.1063/1.2408420) |\n\n| `\"velocity_rescaling_langevin\"` | G. Bussi and M. Parrinello,\n[Phys. Rev. E **75**, 056707 (2007)](https://doi.org/10.1103/PhysRevE.75.056707) |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "andersen",
                    "berendsen",
                    "brownian",
                    "langevin_goga",
                    "langevin_schneider",
                    "nose_hoover",
                    "velocity_rescaling",
                    "velocity_rescaling_langevin"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "reference_temperature",
                "description": "The target temperature for the simulation.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "coupling_constant",
                "description": "The time constant for temperature coupling. Need to describe what this means for the various\nthermostat options...",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "second"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 17,
            "m_parent_sub_section": "section_definitions",
            "name": "BarostatParameters",
            "description": "Section containing the parameters pertaining to the barostat for a molecular dynamics run.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "barostat_type",
                "description": "The name of the barostat used for temperature control. If skipped or an empty string is used, it\nmeans no barostat was applied.\n\nAllowed values are:\n\n| Barostat Name          | Description                               |\n\n| ---------------------- | ----------------------------------------- |\n\n| `\"\"`                   | No thermostat               |\n\n| `\"berendsen\"`          | H. J. C. Berendsen, J. P. M. Postma,\nW. F. van Gunsteren, A. DiNola, and J. R. Haak, [J. Chem. Phys.\n**81**, 3684 (1984)](https://doi.org/10.1063/1.448118) |\n\n| `\"martyna_tuckerman_tobias_klein\"` | G.J. Martyna, M.E. Tuckerman, D.J. Tobias, and M.L. Klein,\n[Mol. Phys. **87**, 1117 (1996)](https://doi.org/10.1080/00268979600100761);\nM.E. Tuckerman, J. Alejandre, R. L\u00f3pez-Rend\u00f3n, A.L. Jochim, and G.J. Martyna,\n[J. Phys. A. **59**, 5629 (2006)](https://doi.org/10.1088/0305-4470/39/19/S18)|\n\n| `\"nose_hoover\"`        | S. Nos\u00e9, [Mol. Phys. **52**, 255 (1984)]\n(https://doi.org/10.1080/00268978400101201); W.G. Hoover, [Phys. Rev. A\n**31**, 1695 (1985) |\n\n| `\"parrinello_rahman\"`        | M. Parrinello and A. Rahman,\n[J. Appl. Phys. **52**, 7182 (1981)](https://doi.org/10.1063/1.328693);\nS. Nos\u00e9 and M.L. Klein, [Mol. Phys. **50**, 1055 (1983) |\n\n| `\"stochastic_cell_rescaling\"` | M. Bernetti and G. Bussi,\n[J. Chem. Phys. **153**, 114107 (2020)](https://doi.org/10.1063/1.2408420) |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "berendsen",
                    "martyna_tuckerman_tobias_klein",
                    "nose_hoover",
                    "parrinello_rahman",
                    "stochastic_cell_rescaling"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "coupling_type",
                "description": "Describes the symmetry of pressure coupling. Specifics can be inferred from the `coupling constant`\n\n| Type          | Description                               |\n\n| ---------------------- | ----------------------------------------- |\n\n| `isotropic`          | Identical coupling in all directions. |\n\n| `semi_isotropic` | Identical coupling in 2 directions. |\n\n| `anisotropic`        | General case. |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "anisotropic",
                    "isotropic",
                    "semi_isotropic"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "reference_pressure",
                "description": "The target pressure for the simulation, stored in a 3x3 matrix, indicating the values for individual directions\nalong the diagonal, and coupling between directions on the off-diagonal.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3,
                  3
                ],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "coupling_constant",
                "description": "The time constants for pressure coupling, stored in a 3x3 matrix, indicating the values for individual directions\nalong the diagonal, and coupling between directions on the off-diagonal. 0 values along the off-diagonal\nindicate no-coupling between these directions.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3,
                  3
                ],
                "unit": "second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "compressibility",
                "description": "An estimate of the system's compressibility, used for box rescaling, stored in a 3x3 matrix indicating the values for individual directions\nalong the diagonal, and coupling between directions on the off-diagonal. If None, it may indicate that these values\nare incorporated into the coupling_constant, or simply that the software used uses a fixed value that is not available in\nthe input/output files.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3,
                  3
                ],
                "unit": "1 / pascal"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 18,
            "m_parent_sub_section": "section_definitions",
            "name": "IntegrationParameters",
            "description": "Section containing the parameters for the molecular dynamics integrator.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "integrator_type",
                "description": "Name of the integrator.\n\nAllowed values are:\n\n| Integrator Name          | Description                               |\n\n| ---------------------- | ----------------------------------------- |\n\n| `\"langevin_goga\"`           | N. Goga, A. J. Rzepiela, A. H. de Vries,\nS. J. Marrink, and H. J. C. Berendsen, [J. Chem. Theory Comput. **8**, 3637 (2012)]\n(https://doi.org/10.1021/ct3000876) |\n\n| `\"langevin_schneider\"`           | T. Schneider and E. Stoll,\n[Phys. Rev. B **17**, 1302](https://doi.org/10.1103/PhysRevB.17.1302) |\n\n| `\"leap_frog\"`          | R.W. Hockney, S.P. Goel, and J. Eastwood,\n[J. Comp. Phys. **14**, 148 (1974)](https://doi.org/10.1016/0021-9991(74)90010-2) |\n\n| `\"velocity_verlet\"` | W.C. Swope, H.C. Andersen, P.H. Berens, and K.R. Wilson,\n[J. Chem. Phys. **76**, 637 (1982)](https://doi.org/10.1063/1.442716) |\n\n| `\"rRESPA_multitimescale\"` | M. Tuckerman, B. J. Berne, and G. J. Martyna\n[J. Chem. Phys. **97**, 1990 (1992)](https://doi.org/10.1063/1.463137) |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "brownian",
                    "conjugant_gradient",
                    "langevin_goga",
                    "langevin_schneider",
                    "leap_frog",
                    "rRESPA_multitimescale",
                    "velocity_verlet"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "integration_timestep",
                "description": "The timestep at which the numerical integration is performed.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_steps",
                "description": "Number of timesteps performed.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "coordinate_save_frequency",
                "description": "The number of timesteps between saving the coordinates.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "velocity_save_frequency",
                "description": "The number of timesteps between saving the velocities.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "force_save_frequency",
                "description": "The number of timesteps between saving the forces.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "thermodynamics_save_frequency",
                "description": "The number of timesteps between saving the thermodynamic quantities.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "thermostat_parameters",
                "sub_section": "/packages/7/section_definitions/16",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "barostat_parameters",
                "sub_section": "/packages/7/section_definitions/17",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 19,
            "m_parent_sub_section": "section_definitions",
            "name": "MolecularDynamicsResults",
            "description": "Section containing the parameters for sampling via molecular dynamics using a force field model.",
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "radial_distribution_functions",
                "sub_section": "/packages/7/section_definitions/25",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "mean_squared_displacements",
                "sub_section": "/packages/7/section_definitions/30",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 20,
            "m_parent_sub_section": "section_definitions",
            "name": "MolecularDynamics",
            "description": "Section containing results of molecular dynamics workflow.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "thermodynamic_ensemble",
                "description": "The type of thermodynamic ensemble that was simulated.\n\nAllowed values are:\n\n| Thermodynamic Ensemble          | Description                               |\n\n| ---------------------- | ----------------------------------------- |\n\n| `\"NVE\"`           | Constant number of particles, volume, and energy |\n\n| `\"NVT\"`           | Constant number of particles, volume, and temperature |\n\n| `\"NPT\"`           | Constant number of particles, pressure, and temperature |\n\n| `\"NPH\"`           | Constant number of particles, pressure, and enthalpy |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "NPH",
                    "NPT",
                    "NVE",
                    "NVT"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "finished_normally",
                "description": "Indicates if calculation terminated normally.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "with_trajectory",
                "description": "Indicates if calculation includes trajectory data.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "with_thermodynamics",
                "description": "Indicates if calculation contains thermodynamic data.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "integration_parameters",
                "sub_section": "/packages/7/section_definitions/18",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "results",
                "sub_section": "/packages/7/section_definitions/19",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 21,
            "m_parent_sub_section": "section_definitions",
            "name": "TrajectoryProperty",
            "description": "Generic section containing information about a calculation of any observable defined and stored at each individual frame of a trajectory.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "Describes if the observable is calculated at the molecular or atomic level.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "atomic",
                    "molecular"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "error_type",
                "description": "Describes the type of error reported for this observable.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 22,
            "m_parent_sub_section": "section_definitions",
            "name": "EnsemblePropertyValues",
            "description": "Generic section containing information regarding the values of an ensemble property.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "label",
                "description": "Describes the group of atoms/molecule/groups of molecules involved in determining the property.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "atomsgroup_ref",
                "description": "References to the atoms_group section containing the group of atoms/molecule/groups of molecules for which the property was calculated.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/3/section_definitions/0"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_bins",
                "description": "Number of bins.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "frame_start",
                "description": "Trajectory frame number where the ensemble averaging starts.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "frame_end",
                "description": "Trajectory frame number where the ensemble averaging ends.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 23,
            "m_parent_sub_section": "section_definitions",
            "name": "EnsembleProperty",
            "description": "Generic section containing information about a calculation of any static observable from a trajectory (i.e., from an ensemble average).",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "Describes if the observable is calculated at the molecular or atomic level.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "atomic",
                    "molecular"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_smooth",
                "description": "Number of bins over which the running average was computed for\nthe observable `values'.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "error_type",
                "description": "Describes the type of error reported for this observable.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "n_variables",
                "description": "Number of variables along which the property is determined.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "variables_name",
                "description": "Name/description of the independent variables along which the observable is defined.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "n_variables"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 24,
            "m_parent_sub_section": "section_definitions",
            "name": "RadialDistributionFunctionValues",
            "description": "Section containing information regarding the values of radial distribution functions (rdfs).",
            "base_sections": [
              "/packages/7/section_definitions/22"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "bins",
                "description": "Distances along which the rdf was calculated.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_bins"
                ],
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Values of the property.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_bins"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 25,
            "m_parent_sub_section": "section_definitions",
            "name": "RadialDistributionFunction",
            "description": "Section containing information about the calculation of radial distribution functions (rdfs).",
            "base_sections": [
              "/packages/7/section_definitions/23"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "radial_distribution_function_values",
                "sub_section": "/packages/7/section_definitions/24",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 26,
            "m_parent_sub_section": "section_definitions",
            "name": "CorrelationFunctionValues",
            "description": "Generic section containing information regarding the values of a correlation function.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "label",
                "description": "Describes the group of atoms/molecule/groups of molecules involved in determining the property.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "atomsgroup_ref",
                "description": "References to the atoms_group section containing the group of atoms/molecule/groups of molecules for which the property was calculated.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/3/section_definitions/0"
                },
                "shape": [
                  1
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_times",
                "description": "Number of times windows for the calculation of the correlation function.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 27,
            "m_parent_sub_section": "section_definitions",
            "name": "CorrelationFunction",
            "description": "Generic section containing information about a calculation of any time correlation function from a trajectory.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "Describes if the correlation function is calculated at the molecular or atomic level.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "atomic",
                    "molecular"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "direction",
                "description": "Describes the direction in which the correlation function was calculated.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "x",
                    "xy",
                    "xyz",
                    "xz",
                    "y",
                    "yz",
                    "z"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "error_type",
                "description": "Describes the type of error reported for this correlation function.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 28,
            "m_parent_sub_section": "section_definitions",
            "name": "DiffusionConstantValues",
            "description": "Section containing information regarding the diffusion constants.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Values of the diffusion constants.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter ** 2 / second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "error_type",
                "description": "Describes the type of error reported for this observable.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "errors",
                "description": "Error associated with the determination of the diffusion constant.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 29,
            "m_parent_sub_section": "section_definitions",
            "name": "MeanSquaredDisplacementValues",
            "description": "Section containing information regarding the values of a mean squared displacements (msds).",
            "base_sections": [
              "/packages/7/section_definitions/26"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "times",
                "description": "Time windows used for the calculation of the msds.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_times"
                ],
                "unit": "second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Msd values.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_times"
                ],
                "unit": "meter ** 2"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "errors",
                "description": "Error associated with the determination of the msds.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "diffusion_constant",
                "sub_section": "/packages/7/section_definitions/28",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 30,
            "m_parent_sub_section": "section_definitions",
            "name": "MeanSquaredDisplacement",
            "description": "Section containing information about a calculation of any mean squared displacements (msds).",
            "base_sections": [
              "/packages/7/section_definitions/27"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "mean_squared_displacement_values",
                "sub_section": "/packages/7/section_definitions/29",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 31,
            "m_parent_sub_section": "section_definitions",
            "name": "GW",
            "description": "Section containing results of a GW workflow",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "dos_dft",
                "description": "DFT density of states",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/17"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "dos_gw",
                "description": "GW density of states",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/17"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "band_structure_dft",
                "description": "DFT density of states",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/14"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "band_structure_gw",
                "description": "DFT density of states",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/14"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 32,
            "m_parent_sub_section": "section_definitions",
            "name": "SinglePoint",
            "description": "Section containing results of a single point workflow.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "method",
                "description": "Calculation method used.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_scf_steps",
                "description": "Number of self-consistent steps in the calculation",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "final_scf_energy_difference",
                "description": "The difference in the energy between the last two scf steps.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "is_converged",
                "description": "Indicates if the convergence criteria were fullfilled",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "with_density_of_states",
                "description": "Indicates if the calculation contains density of states data",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "with_bandstructure",
                "description": "Indicates if the calculation contains bandstructure data",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "with_eigenvalues",
                "description": "Indicates if the calculation contains eigenvalue data",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "with_volumetric_data",
                "description": "Indicates if the calculation contains volumetric data",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "with_excited_states",
                "description": "Indicates if the calculation contains excited states data",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 33,
            "m_parent_sub_section": "section_definitions",
            "name": "Task",
            "description": "Section defining a specific task in the workflow chain. It has an input and an output, both can either be a workflow or a calculation and their relation is noted in the\ndescription.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "input_workflow",
                "description": "Reference to the input workflow.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/7/section_definitions/34"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "output_workflow",
                "description": "Reference to the output workflow.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/7/section_definitions/34"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "input_calculation",
                "description": "Reference to the input calculation.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/36"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "output_calculation",
                "description": "Reference to the output calculation.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/36"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "description",
                "description": "Descibes the relationship between the input and output workflows. For example, if\na single_point workflow uses the relaxed structure from a geometry_optimization as\nan input, the description may be \"relaxed structure from geometry_optimization\nused to calucalate single_point properties\"",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 34,
            "m_parent_sub_section": "section_definitions",
            "name": "Workflow",
            "description": "Section containing the  results of a workflow.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "The workflow type.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "GW",
                    "adsorption",
                    "convex_hull",
                    "debye_model",
                    "elastic",
                    "equation_of_state",
                    "geometry_optimization",
                    "interface",
                    "magnetic_ordering",
                    "molecular_dynamics",
                    "nudged_elastic_band",
                    "phonon",
                    "raman",
                    "single_point",
                    "thermodynamics"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "initial_structure",
                "description": "Starting structure for geometry optimization.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/3/section_definitions/1"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "calculator",
                "description": "Energy and force calculator.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "calculation_result_ref",
                "description": "Reference to calculation result. In the case of geometry_optimization and\nmolecular dynamics, this corresponds to the final step in the simulation. For the\nrest of the workflow types, it refers to the original system.",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/36"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "n_calculations",
                "description": "Number of calculations in workflow",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "calculations_ref",
                "description": "List of references to each section single_configuration_calculation in the\nsimulation.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/4/section_definitions/36"
                },
                "shape": [
                  "n_calculations"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "run_ref",
                "description": "Links the section workflow to the section run that contains the calculations.",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/5/section_definitions/3"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "n_references",
                "description": "Number of references to the current section workflow.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "workflows_ref",
                "description": "Links the the current section to other workflow sections. Such a link is necessary\nfor example between an Debye model that uses a the poisson ratio calculated\nfrom an elastic workflow.",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/7/section_definitions/34"
                },
                "shape": [
                  "n_references"
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "task",
                "sub_section": "/packages/7/section_definitions/33",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "single_point",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/7/section_definitions/32",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "gw",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/7/section_definitions/31",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 3,
                "m_parent_sub_section": "sub_sections",
                "name": "geometry_optimization",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/7/section_definitions/9",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 4,
                "m_parent_sub_section": "sub_sections",
                "name": "phonon",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/7/section_definitions/10",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 5,
                "m_parent_sub_section": "sub_sections",
                "name": "elastic",
                "sub_section": "/packages/7/section_definitions/12",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 6,
                "m_parent_sub_section": "sub_sections",
                "name": "molecular_dynamics",
                "sub_section": "/packages/7/section_definitions/20",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 7,
                "m_parent_sub_section": "sub_sections",
                "name": "debye_model",
                "sub_section": "/packages/7/section_definitions/8",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 8,
                "m_parent_sub_section": "sub_sections",
                "name": "equation_of_state",
                "sub_section": "/packages/7/section_definitions/7",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 9,
                "m_parent_sub_section": "sub_sections",
                "name": "nudged_elastic_band",
                "sub_section": "/packages/7/section_definitions/5",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 10,
                "m_parent_sub_section": "sub_sections",
                "name": "convex_hull",
                "sub_section": "/packages/7/section_definitions/4",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 11,
                "m_parent_sub_section": "sub_sections",
                "name": "adsorption",
                "sub_section": "/packages/7/section_definitions/3",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 12,
                "m_parent_sub_section": "sub_sections",
                "name": "magnetic_ordering",
                "sub_section": "/packages/7/section_definitions/2",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 13,
                "m_parent_sub_section": "sub_sections",
                "name": "raman",
                "sub_section": "/packages/7/section_definitions/1",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 14,
                "m_parent_sub_section": "sub_sections",
                "name": "interface",
                "sub_section": "/packages/7/section_definitions/0",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 15,
                "m_parent_sub_section": "sub_sections",
                "name": "thermodynamics",
                "sub_section": "/packages/7/section_definitions/15",
                "repeats": false
              }
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 8,
        "m_parent_sub_section": "packages",
        "name": "runschema.method",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "Mesh",
            "description": "Contains the settings for a sampling mesh. Supports uniformly-spaced meshes and symmetry-reduced representations.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "dimensionality",
                "description": "Dimensionality of the mesh.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "sampling_method",
                "description": "Method used to generate the mesh:\n\n| Name      | Description                      | Reference             |\n\n| --------- | -------------------------------- | --------------------- |\n\n| `'Gamma-centered'` | Regular mesh is centered around Gamma. No offset. |\n\n| `'Monkhorst-Pack'` | Regular mesh with an offset of half the reciprocal lattice vector. |\n\n| `'Gamma-offcenter'` | Regular mesh with an offset that is neither `'Gamma-centered'`, nor `'Monkhorst-Pack'`. |\n\n| `'Line-path'` | Line path along high-symmetry points. Typically employed for simualting band structures. |\n\n| `'Equidistant'`  | Equidistant 1D grid (also known as 'Newton-Cotes')                      |\n\n| `'Logarithmic'`  | log distance 1D grid               |\n\n| `'Tan'`  | Non-uniform tan mesh for 1D grids. More dense at low abs values of the points, while less dense for higher values |\n\n| `'Gauss-Legendre'` | Quadrature rule for integration using Legendre polynomials |\n\n| `'Gauss-Laguerre'` | Quadrature rule for integration using Laguerre polynomials |\n\n| `'Clenshaw-Curtis'`  | Quadrature rule for integration using Chebyshev polynomials using discrete cosine transformations |\n\n| `'Gauss-Hermite'`  | Quadrature rule for integration using Hermite polynomials |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "Clenshaw-Curtis",
                    "Equidistant",
                    "Gamma-centered",
                    "Gamma-offcenter",
                    "Gauss-Hermite",
                    "Gauss-Laguerre",
                    "Gauss-Legendre",
                    "Line-path",
                    "Logarithmic",
                    "Monkhorst-Pack",
                    "Newton-Cotes",
                    "Tan"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_points",
                "description": "Total number of points in the mesh, accounting for the multiplicities.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "grid",
                "description": "Amount of mesh point sampling along each axis, i.e. [nx, ny, nz].",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "dimensionality"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "points",
                "description": "List of all the points in the mesh.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "complex128"
                },
                "shape": [
                  "*",
                  "dimensionality"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "multiplicities",
                "description": "The amount of times the same point reappears. These are accounted for in `n_points`.\nA value larger than 1, typically indicates a symmtery operation that was applied to the mesh.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "weights",
                "description": "The frequency of times the same point reappears.\nA value larger than 1, typically indicates a symmtery operation that was applied to the mesh.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "LinePathSegment",
            "description": "Contains the settings for a single line path segment in a mesh.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "start_point",
                "description": "Name of the hihg-symmetry starting point of the line path segment.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "end_point",
                "description": "Name of the high-symmetry end point of the line path segment.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_points",
                "description": "Number of points in the line path segment.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "points",
                "description": "List of all the points in the line path segment.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*",
                  3
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "name": "KMesh",
            "description": "Contains the settings for a sampling mesh in 3D reciprocal space. Supports uniformly-spaced meshes, line paths along high-symmetry points,\nas well as symmetry-reduced and full representations.",
            "base_sections": [
              "/packages/8/section_definitions/0"
            ],
            "extending_sections": [
              "/packages/19/section_definitions/2"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "offset",
                "description": "Offset vector shifting the mesh with respect to a Gamma-centered case.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "all_points",
                "description": "Full list of the mesh points without any symmetry operations.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*",
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "high_symmetry_points",
                "description": "Named high symmetry points in the mesh.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "line_path_segments",
                "sub_section": "/packages/8/section_definitions/1",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 3,
            "m_parent_sub_section": "section_definitions",
            "name": "FrequencyMesh",
            "description": "Contains the settings for a sampling mesh in 1D frequency space, either real or imaginary.",
            "base_sections": [
              "/packages/8/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "points",
                "description": "List of all the points in the mesh in joules.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "complex128"
                },
                "shape": [
                  "n_points",
                  "dimensionality"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "smearing",
                "description": "Numerical smearing parameter used for convolutions.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 4,
            "m_parent_sub_section": "section_definitions",
            "name": "TimeMesh",
            "description": "Contains the settings for a sampling mesh in 1D time space, either real or imaginary.",
            "base_sections": [
              "/packages/8/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "smearing",
                "description": "Numerical smearing parameter used for convolutions.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 5,
            "m_parent_sub_section": "section_definitions",
            "name": "Scf",
            "description": "Section containing the parameters related to self consistency.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "native_tier",
                "description": "The code-specific tag indicating the precision used\nfor the self-consistent cycle.\n\nSupported codes (with hyperlinks to the relevant documentation):\n- `Orca`",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_max_iteration",
                "description": "Specifies the maximum number of allowed self-consistent field (SCF) iterations in\na calculation.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.dft.scf_threshold_energy_change"
                  ]
                },
                "name": "threshold_energy_change",
                "description": "Specifies the threshold for the total energy change between two subsequent\nself-consistent field (SCF) iterations. The SCF is considered converged when the\ntotal-energy change between two SCF cycles is below the threshold (possibly in\ncombination with other criteria).",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "threshold_density_change",
                "description": "Specifies the threshold for the average charge density change between two\nsubsequent self-consistent field (SCF) iterations. The SCF is considered converged\nwhen the density change between two SCF cycles is below the threshold (possibly in\ncombination with other criteria).",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "minimization_algorithm",
                "description": "Specifies the algorithm used for self consistency minimization.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 6,
            "m_parent_sub_section": "section_definitions",
            "name": "HubbardKanamoriModel",
            "description": "Setup of the local Hubbard model.",
            "extending_sections": [
              "/packages/19/section_definitions/4"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "orbital",
                "description": "Orbital label corresponding to the Hubbard model. The typical orbitals with strong\nHubbard interactions have partially filled '3d', '4d' and '4f' orbitals.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_orbital",
                "description": "Number of non-degenerated orbitals of the same type (s, p, d, f, ...).",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.dmft.u"
                  ]
                },
                "name": "u",
                "description": "Value of the (intraorbital) Hubbard interaction",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.dmft.jh"
                  ]
                },
                "name": "jh",
                "description": "Value of the (interorbital) Hund's coupling.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "up",
                "description": "Value of the (interorbital) Coulomb interaction. In rotational invariant\nsystems, up = u - 2 * jh.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.dft.hubbard_kanamori_model.j"
                  ]
                },
                "name": "j",
                "description": "Value of the exchange interaction. In rotational invariant systems, j = jh.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.dft.hubbard_kanamori_model.u_effective"
                  ]
                },
                "name": "u_effective",
                "description": "Value of the effective U parameter (u - j).",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "slater_integrals",
                "description": "Value of the Slater integrals (F0, F2, F4) in spherical harmonics used to derive\nthe local Hubbard interactions:\n\n    u = ((2.0 / 7.0) ** 2) * (F0 + 5.0 * F2 + 9.0 * F4) / (4.0*np.pi)\n\n    up = ((2.0 / 7.0) ** 2) * (F0 - 5.0 * F2 + 3.0 * 0.5 * F4) / (4.0*np.pi)\n\n    jh = ((2.0 / 7.0) ** 2) * (5.0 * F2 + 15.0 * 0.25 * F4) / (4.0*np.pi)\n\nRef.: Elbio Dagotto, Nanoscale Phase Separation and Colossal Magnetoresistance,\nChapter 4, Springer Berlin (2003).",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "umn",
                "description": "Value of the local Coulomb interaction matrix.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_orbital",
                  "n_orbital"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "double_counting_correction",
                "description": "Name of the double counting correction algorithm applied.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 7,
            "m_parent_sub_section": "section_definitions",
            "name": "Pseudopotential",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "name",
                "description": "Native code name of the pseudopotential.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "Pseudopotential classification.\n| abbreviation | description | DOI |\n| ------------ | ----------- | --------- |\n| `'US'`       | Ultra-soft  | |\n| `'PAW'`      | Projector augmented wave | |\n| `'V'`        | Vanderbilt | https://doi.org/10.1103/PhysRevB.47.6728 |\n| `'MBK'`      | Morrison-Bylander-Kleinman | https://doi.org/10.1103/PhysRevB.41.7892 |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "PAW",
                    "US MBK",
                    "US V"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "norm_conserving",
                "description": "Denotes whether the pseudopotential is norm-conserving.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "cutoff",
                "description": "Minimum recommended spherical cutoff energy for any plane-wave basis set\nusing the pseudopotential.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "xc_functional_name",
                "description": "Name of the exchange-correlation functional used to generate the pseudopotential.\nFollows the libxc naming convention.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "l_max",
                "description": "Maximum angular momentum of the pseudopotential projectors.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "lm_max",
                "description": "Maximum magnetic momentum of the pseudopotential projectors.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 8,
            "m_parent_sub_section": "section_definitions",
            "name": "SingleElectronState",
            "description": "An `AtomicOrbitalState` which supports fast notation for single-electron states.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_quantum_number",
                "description": "Principal quantum number $n$.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "l_quantum_number",
                "description": "Orbital angular quantum number $l$.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "ml_quantum_number",
                "description": "Azimuthal projection of the $l$ vector.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "j_quantum_number",
                "description": "Total angular momentum quantum number $j = |l-s| ... l+s$.\n**Necessary with strong L-S coupling or non-collinear spin systems.**",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "1..2"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "mj_quantum_number",
                "description": "Azimuthal projection of the $j$ vector.\n**Necessary with strong L-S coupling or non-collinear spin systems.**",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "ms_quantum_bool",
                "description": "Boolean representation of the spin state $m_s$.\n`False` for spin down, `True` for spin up.\nIn non-collinear spin systems, the projection axis $z$ should also be defined.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "degeneracy",
                "description": "The number of states under the filling constraints applied to the orbital set.\nThis implicitly assumes that all orbitals in the set are degenerate.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 9,
            "m_parent_sub_section": "section_definitions",
            "name": "CoreHole",
            "description": "Describes the quantum state of a single hole in an open-shell core state. This is the physical interpretation. For modelling purposes, the electron charge excited may lie between 0 and 1. This follows a so-called Janak state.\nSometimes, no electron is actually, excited, but just marked for excitation. This is denoted as an `initial` state.\nAny missing quantum numbers indicate some level of arbitrariness in the choice of the core hole, represented in the degeneracy.",
            "base_sections": [
              "/packages/8/section_definitions/8"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_electrons_excited",
                "description": "The electron charge excited for modelling purposes.\nChoices that deviate from 0 or 1 typically leverage Janak composition.\nUnless the `initial` state is chosen, the model corresponds to a single electron being excited in physical reality.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "occupation",
                "description": "The total number of electrons within the state (as defined by degeneracy)\nafter exciting the model charge.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "dscf_state",
                "description": "The $\\Delta$-SCF state tag, used to identify the role in the workflow of the same name.\nAllowed values are `initial` (not to be confused with the _initial-state approximation_) and `final`.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "final",
                    "initial"
                  ]
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 10,
            "m_parent_sub_section": "section_definitions",
            "name": "AtomParameters",
            "description": "Contains method-related information about a kind of atom identified by label. This allows the assignment of an atom-centered basis set or pseudopotential for different\natoms belonging to the same kind.\n\nThrough this section we use the wording \"active\" mainly for defining orbital-related\nquantities. Active refers to the relevant orbital parameters in the atom.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "atom_number",
                "description": "Atomic number (number of protons) of this atom kind, use 0 if not an atom.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "atom_index",
                "description": "The atom index with respect to the parsed system atoms section.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_valence_electrons",
                "description": "Number of valence electrons.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "n_core_electrons",
                "description": "Number of core electrons.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "label",
                "description": "String used to identify the atoms of this kind. This should correspond to the\natom labels of the configuration. It is possible for one atom kind to have\nmultiple labels (in order to allow two atoms of the same kind to have two\ndifferently defined sets of atom-centered basis functions or two different pseudo-\npotentials). Atom kind is typically the symbol of the atomic species but it can be\nalso a ghost or pseudo-atom.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "mass",
                "description": "Mass of the atom.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "kilogram"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "pseudopotential_name",
                "description": "Name identifying the pseudopotential used.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "n_orbitals",
                "description": "Number of active orbitals of the atom.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "orbitals",
                "description": "Label of the active orbitals of the atoms.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "n_orbitals"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "onsite_energies",
                "description": "Values of the atomic onsite energy corresponding to each orbital.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_orbitals"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "charge",
                "description": "Total charge of the atom.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "coulomb"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "name": "charges",
                "description": "Values of the charge corresponding to each orbital.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_orbitals"
                ],
                "unit": "coulomb"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "pseudopotential",
                "sub_section": "/packages/8/section_definitions/7",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "core_hole",
                "sub_section": "/packages/8/section_definitions/9"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "hubbard_kanamori_model",
                "sub_section": "/packages/8/section_definitions/6"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 11,
            "m_parent_sub_section": "section_definitions",
            "name": "MoleculeParameters",
            "description": "Contains method-related information about a kind of atom identified by label. This allows the assignment of an atom-centered basis set or pseudopotential for different\natoms belonging to the same kind.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "label",
                "description": "String to identify the molecule.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_atoms",
                "description": "Number of atoms in the molecule.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "atom_parameters",
                "sub_section": "/packages/8/section_definitions/10",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 12,
            "m_parent_sub_section": "section_definitions",
            "name": "Photon",
            "description": "Section containing the details of the photon field used for spectrum calculations.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "multipole_type",
                "description": "Type used for the multipolar expansion: dipole, quadrupole, NRIXS, Raman, etc.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "polarization",
                "description": "Direction of the photon polarization in cartesian coordinates.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "energy",
                "description": "Photon energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "momentum_transfer",
                "description": "Momentum transfer which would be important for quadrupole or NRIXS or Raman.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 13,
            "m_parent_sub_section": "section_definitions",
            "name": "GaussianBasisGroup",
            "description": "Section that describes a group of Gaussian contractions. Groups allow one to calculate the primitive Gaussian integrals once for several different linear combinations of\nthem. This defines basis functions with radial part $f_i(r) = r^{l_i} \\sum_{j} c_{i j}\nA(l_i, \\alpha_j) exp(-\\alpha_j r^2)$ where $A(l_i, \\alpha_j)$ is a the normalization\ncoefficient for primitive Gaussian basis functions. Here, $\\alpha_j$ is defined in\ngaussian_basis_group_exponents, $l_i$ is given in gaussian_basis_group_ls, and $c_{i\nj}$ is given in gaussian_basis_group_contractions, whereas the radial part is given by\nthe spherical harmonics $Y_{l m}$.\n\nThis section is defined only if the original basis function uses Gaussian basis\nfunctions, and the sequence of radial functions $f_i$ across all\nsection_gaussian_basis_group in section_basis_set_atom_centered should match the one\nof basis_set_atom_centered_radial_functions.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_contractions",
                "description": "Gives the number of different contractions, i.e. resulting basis functions in a\ngaussian_basis_group section.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_exponents",
                "description": "Gives the number of different Gaussian exponents in a section_gaussian_basis_group\nsection.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "contractions",
                "description": "contraction coefficients $c_{i j}$ defining the contracted basis functions with\nrespect to *normalized* primitive Gaussian functions. They define the Gaussian\nbasis functions as described in section_gaussian_basis_group.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_contractions",
                  "n_exponents"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "exponents",
                "description": "Exponents $\\alpha_j$ of the Gaussian functions defining this basis set\n$exp(-\\alpha_j r^2)$. One should be careful about the units of the coefficients.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_exponents"
                ],
                "unit": "1 / meter ** 2"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "ls",
                "description": "Azimuthal quantum number ($l$) values (of the angular part given by the spherical\nharmonic $Y_{l m}$ of the various contracted basis functions).",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_contractions"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 14,
            "m_parent_sub_section": "section_definitions",
            "name": "BasisSetAtomCentered",
            "description": "This section describes the atom-centered basis set. The main contained information is a short, non unique but human-interpretable, name for identifying the basis set\n(short_name), a longer unique name, the atomic number of the atomic species the\nbasis set is meant for.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "name",
                "description": "Code-specific, but explicative, base name for the basis set.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "formula",
                "description": "Generalized representation of the basis set, e.g. 'STO-3G', '6-31G(d)', 'cc-pVDZ',\netc.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "atom_number",
                "description": "Atomic number (i.e., number of protons) of the atom for which this basis set is\nconstructed (0 means unspecified or a pseudo atom).",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "n_basis_functions",
                "description": "Gives the number of different basis functions in a basis_set_atom_centered\nsection. This equals the number of actual coefficients that are specified when\nusing this basis set.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "gaussian_basis_group",
                "sub_section": "/packages/8/section_definitions/13",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 15,
            "m_parent_sub_section": "section_definitions",
            "name": "OrbitalAPW",
            "description": "Definiton of a APW wavefunction per orbital.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "State",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "APW",
                    "LAPW",
                    "LO",
                    "spherical Dirac"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_quantum_number",
                "description": "Main quantum number $n$ specifying the orbital.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "l_quantum_number",
                "description": "Angular momentum / azimuthal quantum number $l$ specifying the orbital.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "j_quantum_number",
                "description": "Total angular momentum quantum number $j$ specifying the orbital,\nwhere $j$ ranges from $l-s$ to $l+s$.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "kappa_quantum_number",
                "description": "Relativistic angular momentum quantum number specifying the orbital\n$\\kappa = (l-j)(2j+1)$.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "occupation",
                "description": "Number of electrons populating the orbital.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "core_level",
                "description": "Boolean denoting whether the orbital is treated differently from valence orbitals.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "energy_parameter",
                "description": "Reference energy parameter for the augmented plane wave (APW) basis set.\nIs used to set the energy parameter for each state.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "energy_parameter_n",
                "description": "Reference number of radial nodes for the augmented plane wave (APW) basis set.\nThis is used to derive the `energy_parameter`.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "order",
                "description": "Derivative order of the radial wavefunction term.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "boundary_condition_order",
                "description": "Differential order to which the radial wavefunction is matched at the boundary.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "name": "update",
                "description": "Allow the code to optimize the initial energy parameter.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "name": "updated",
                "description": "Initial energy parameter after code optimization.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 16,
            "m_parent_sub_section": "section_definitions",
            "name": "BasisSetMesh",
            "description": "All geometry-related information of the basis set (mesh).",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "shape",
                "description": "Geometry of the basis set mesh.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "cubic",
                    "cylindrical",
                    "ellipsoidal",
                    "rectangular",
                    "spherical"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "box_lengths",
                "description": "Dimensions of the box containing the basis set mesh.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3
                ],
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "radius",
                "description": "Radius of the sphere.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "grid_spacing",
                "description": "Grid spacing of a Cartesian mesh.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ],
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "radius_lin_spacing",
                "description": "The equidistant spacing of the radial grid.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "radius_log_spacing",
                "description": "The logarithmic spacing of the radial grid.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "n_grid_points",
                "description": "Total number of grid points.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "n_radial_grid_points",
                "description": "Number of grid points on the radial grid.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "n_spherical_grid_points",
                "description": "Number of grid points on the spherical grid.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 17,
            "m_parent_sub_section": "section_definitions",
            "name": "BasisSet",
            "description": "This section contains all basis sets used to represent the wavefunction or electron density.",
            "base_sections": [
              "/packages/8/section_definitions/16"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "The type of basis set used by the program.\n\n| Value                          |                                            Description |\n| ------------------------------ | ------------------------------------------------------ |\n| `'numeric AOs'`                | Numerical atomic orbitals                              |\n| `'gaussians'`                  | Gaussian basis set                                     |\n| `'plane waves'`                | Plane waves                                            |\n| `'psinc functions'`            | Pseudopotential sinc functions                         |\n| `'real-space grid'`            | Real-space grid                                        |\n| `'pbeVaspFit2015'`             | Lobster algorithm for projection plane waves onto LCAO |\n| `'Koga'`                       | Lobster algorithm for projection plane waves onto LCAO |\n| `'Bunge'`                      | Lobster algorithm for projection plane waves onto LCAO |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "Bunge",
                    "Koga",
                    "gaussians",
                    "numeric AOs",
                    "pbeVaspFit2015",
                    "plane waves",
                    "psinc functions",
                    "real-space grid"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "scope",
                "description": "The extent of the electronic structure that the basis set encodes.\nThe partitions could be energetic (e.g. `core`, `valence`) in nature,\nspatial (e.g. `muffin-tin`, `interstitial`), or cover\nHamiltonian components (e.g. `kinetic energy`,\n`electron-electron interaction`), etc.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.precision.planewave_cutoff"
                  ]
                },
                "name": "cutoff",
                "description": "Spherical cutoff in reciprocal space for a plane-wave basis set. It is the energy\nof the highest plane-wave ($\\frac{\\hbar^2|k+G|^2}{2m_e}$) included in the basis\nset.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.precision.apw_cutoff"
                  ]
                },
                "name": "cutoff_fractional",
                "description": "The spherical cutoff parameter for the interstitial plane waves in the LAPW family.\nThis cutoff is unitless, referring to the product of the smallest muffin-tin radius\nand the length of the cutoff reciprocal vector ($r_{MT} * |K_{cut}|$).",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "frozen_core",
                "description": "Boolean denoting whether the frozen-core approximation was applied.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "spherical_harmonics_cutoff",
                "description": "Maximum angular momentum $l$ for the spherical harmonics.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "atom_parameters",
                "description": "Reference to a particular atom parameter setup further specifying the basis set.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/8/section_definitions/10"
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "atom_centered",
                "sub_section": "/packages/8/section_definitions/14",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "orbital",
                "sub_section": "/packages/8/section_definitions/15",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 18,
            "m_parent_sub_section": "section_definitions",
            "name": "BasisSetContainer",
            "description": "Container class for `BasisSet`",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.precision.native_tier"
                  ]
                },
                "name": "native_tier",
                "description": "The code-specific tag indicating the precision used\nfor the basis set and meshes of numerical routines.\n\nSupported codes (with hyperlinks to the relevant documentation):\n- [`VASP`](https://www.vasp.at/wiki/index.php/PREC)\n- `FHI-aims`\n- [`CASTEP`](http://www.tcm.phy.cam.ac.uk/castep/documentation/WebHelp/CASTEP.html#modules/castep/tskcastepsetelecquality.htm?Highlight=ultra-fine)",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.precision.basis_set",
                    "results.method.simulation.precision.basis_set__suggestion"
                  ]
                },
                "name": "type",
                "description": "The type of basis set used by the program.\n\n| Value                          |                       Description |\n| ------------------------------ | --------------------------------- |\n| `'APW'`                        | Augmented plane waves             |\n| `'LAPW'`                       | Linearized augmented plane waves  |\n| `'APW+lo'`             | Augmented plane waves with local orbitals |\n| `'LAPW+lo'` | Linearized augmented plane waves with local orbitals |\n| `'(L)APW'`                     |     A combination of APW and LAPW |\n| `'(L)APW+lo'`  | A combination of APW and LAPW with local orbitals |\n| `'plane waves'`                | Plane waves                       |\n| `'gaussians + plane waves'`    | Basis set of the Quickstep algorithm (DOI: 10.1016/j.cpc.2004.12.014) |\n| `'real-space grid'`            | Real-space grid                   |\n| `'suppport functions'`         | Support functions                 |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "(L)APW",
                    "(L)APW+lo",
                    "APW",
                    "APW+lo",
                    "LAPW",
                    "LAPW+lo",
                    "atom-centered orbitals",
                    "gaussians + plane waves",
                    "not processed",
                    "plane waves",
                    "real-space grid",
                    "support functions",
                    "unavailable"
                  ]
                },
                "default": "unavailable"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "scope",
                "description": "The extent of the electronic structure that the basis set encodes.\nThe partitions could be energetic (e.g. `core`, `valence`) in nature,\nspatial (e.g. `muffin-tin`, `interstitial`), or cover\nHamiltonian components (e.g. `kinetic energy`,\n`electron-electron interaction`), etc.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "basis_set",
                "sub_section": "/packages/8/section_definitions/17",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 19,
            "m_parent_sub_section": "section_definitions",
            "name": "Interaction",
            "description": "Section containing the parameters of a contribution to a force field model.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "Denotes the classification of the potential.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "name",
                "description": "Specifies the name of the potential. Can contain information on the species,\ncut-offs, potential versions.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_interactions",
                "description": "Total number of interactions of this type for interaction groupings.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "n_atoms",
                "description": "Number of atoms included in (each instance of) the interaction.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "atom_labels",
                "description": "Labels of the atoms described by the interaction. Can be a list of lists for interaction groupings.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "str_"
                },
                "shape": [
                  "n_interactions",
                  "n_atoms"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "atom_indices",
                "description": "Indices of the atoms in the system described by the interaction. Can be a list of lists for interaction groupings.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "n_interactions",
                  "n_atoms"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "functional_form",
                "description": "Specifies the functional form of the interaction potential.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "n_parameters",
                "description": "Specifies the number of parameters in the interaction potential.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "parameters",
                "description": "Dictionary of label and parameters of the interaction potential.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Any"
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "contributions",
                "sub_section": "/packages/8/section_definitions/19",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 20,
            "m_parent_sub_section": "section_definitions",
            "name": "Model",
            "description": "Section containing the parameters of a force field model. If specified, the parameters corresponding to the individual contributions to the model are given in contributions.\nOtherwise, the parameters can also be found in a reference to the published model.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "name",
                "description": "Identifies the name of the model.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "reference",
                "description": "Reference to the model e.g. DOI, URL.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "contributions",
                "sub_section": "/packages/8/section_definitions/19",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 21,
            "m_parent_sub_section": "section_definitions",
            "name": "Functional",
            "description": "Section containing the parameters of an exchange or correlation functional.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "name",
                "description": "Provides the name of one of the exchange and/or correlation (XC) functional\nfollowing the libbx convention.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "parameters",
                "description": "Contains an associative list of non-default values of the parameters for the\nfunctional.\n\nFor example, if a calculations using a hybrid XC functional (e.g., HSE06)\nspecifies a user-given value of the mixing parameter between exact and GGA\nexchange, then this non-default value is stored in this metadata.\n\nThe labels and units of these values may be defined in name.\n\nIf this metadata is not given, the default parameter values for the functional\nare assumed.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Any"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "weight",
                "description": "Provides the value of the weight for the functional.\n\nThis weight is used in the linear combination of the different functionals. If not\nspecified then the default is set to 1.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 22,
            "m_parent_sub_section": "section_definitions",
            "name": "XCFunctional",
            "description": "Section describing the exchange-correlation functional used in the DFT calculation. The name of the exchange-correlation functional is given by name and the reference to\nthe published functional is provided by reference. Other contributions to the\nfunctional not covered by exchange, correlation or hybrid types may be specified in\ncontributions.",
            "base_sections": [
              "/packages/8/section_definitions/20"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "exchange",
                "sub_section": "/packages/8/section_definitions/21",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "correlation",
                "sub_section": "/packages/8/section_definitions/21",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "hybrid",
                "sub_section": "/packages/8/section_definitions/21",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 3,
                "m_parent_sub_section": "sub_sections",
                "name": "contributions",
                "sub_section": "/packages/8/section_definitions/21",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 23,
            "m_parent_sub_section": "section_definitions",
            "name": "DFT",
            "description": "Section containing the various parameters that define a DFT calculation. These include settings for the exchange correlation functionals, LDA+U, etc.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "self_interaction_correction_method",
                "description": "Contains the name for the self-interaction correction (SIC) treatment used to\ncalculate the final energy and related quantities. If skipped or empty, no special\ncorrection is applied.\n\nThe following SIC methods are available:\n\n| SIC method                | Description                       |\n\n| ------------------------- | --------------------------------  |\n\n| `\"\"`                      | No correction                     |\n\n| `\"SIC_AD\"`                | The average density correction    |\n\n| `\"SIC_SOSEX\"`             | Second order screened exchange    |\n\n| `\"SIC_EXPLICIT_ORBITALS\"` | (scaled) Perdew-Zunger correction explicitly on a\nset of orbitals |\n\n| `\"SIC_MAURI_SPZ\"`         | (scaled) Perdew-Zunger expression on the spin\ndensity / doublet unpaired orbital |\n\n| `\"SIC_MAURI_US\"`          | A (scaled) correction proposed by Mauri and co-\nworkers on the spin density / doublet unpaired orbital |",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "xc_functional",
                "sub_section": "/packages/8/section_definitions/22"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 24,
            "m_parent_sub_section": "section_definitions",
            "name": "TightBindingOrbital",
            "description": "Section to define an orbital including the name of orbital and shell number and the on-site energy.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "orbital_name",
                "description": "The name of the orbital.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "cell_index",
                "description": "The index of the cell in 3 dimensional.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "atom_index",
                "description": "The index of the atom.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "shell",
                "description": "The shell number.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "onsite_energy",
                "description": "On-site energy of the orbital.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 25,
            "m_parent_sub_section": "section_definitions",
            "name": "TwoCenterBond",
            "description": "Section to define a two-center approximation bond between two atoms.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "bond_label",
                "description": "Name of the Slater-Koster bond to identify the bond.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "center1",
                "description": "Name of the Slater-Koster bond to identify the bond.",
                "sub_section": "/packages/8/section_definitions/24",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "center2",
                "description": "Name of the Slater-Koster bond to identify the bond.",
                "sub_section": "/packages/8/section_definitions/24",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 26,
            "m_parent_sub_section": "section_definitions",
            "name": "SlaterKosterBond",
            "description": "Section to define a two-center approximation bond between two atoms",
            "base_sections": [
              "/packages/8/section_definitions/25"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "sss",
                "description": "The Slater Koster integral of type sigma between two s orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "sps",
                "description": "The Slater Koster integral of type sigma between s and p orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "sds",
                "description": "The Slater Koster integral of type sigma between s and d orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "sfs",
                "description": "The Slater Koster integral of type sigma between s and f orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "pps",
                "description": "The Slater Koster integral of type sigma between two p orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "ppp",
                "description": "The Slater Koster integral of type pi between two p orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "pds",
                "description": "The Slater Koster integral of type sigma between p and d orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "pdp",
                "description": "The Slater Koster integral of type pi between p and d orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "pfs",
                "description": "The Slater Koster integral of type sigma between p and f orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "pfp",
                "description": "The Slater Koster integral of type pi between p and f orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "dds",
                "description": "The Slater Koster integral of type sigma between two d orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "name": "ddp",
                "description": "The Slater Koster integral of type pi between two d orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "name": "ddd",
                "description": "The Slater Koster integral of type delta between two d orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 13,
                "m_parent_sub_section": "quantities",
                "name": "dfs",
                "description": "The Slater Koster integral of type sigma between d and f orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 14,
                "m_parent_sub_section": "quantities",
                "name": "dfp",
                "description": "The Slater Koster integral of type pi between d and f orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 15,
                "m_parent_sub_section": "quantities",
                "name": "dfd",
                "description": "The Slater Koster integral of type delta between d and f orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 16,
                "m_parent_sub_section": "quantities",
                "name": "ffs",
                "description": "The Slater Koster integral of type sigma between two f orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 17,
                "m_parent_sub_section": "quantities",
                "name": "ffp",
                "description": "The Slater Koster integral of type pi between two f orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 18,
                "m_parent_sub_section": "quantities",
                "name": "ffd",
                "description": "The Slater Koster integral of type delta between two f orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 19,
                "m_parent_sub_section": "quantities",
                "name": "fff",
                "description": "The Slater Koster integral of type phi between two f orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 27,
            "m_parent_sub_section": "section_definitions",
            "name": "SlaterKoster",
            "description": "Section containing the various parameters that define a Slater-Koster",
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "orbitals",
                "sub_section": "/packages/8/section_definitions/24",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "bonds",
                "sub_section": "/packages/8/section_definitions/26",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "overlaps",
                "sub_section": "/packages/8/section_definitions/26",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 28,
            "m_parent_sub_section": "section_definitions",
            "name": "xTB",
            "description": "Section containing the parameters pertaining to an extended tight-binding (xTB) calculation.",
            "base_sections": [
              "/packages/8/section_definitions/20"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "hamiltonian",
                "sub_section": "/packages/8/section_definitions/19",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "overlap",
                "sub_section": "/packages/8/section_definitions/19",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "repulsion",
                "sub_section": "/packages/8/section_definitions/19",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 3,
                "m_parent_sub_section": "sub_sections",
                "name": "magnetic",
                "sub_section": "/packages/8/section_definitions/19",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 4,
                "m_parent_sub_section": "sub_sections",
                "name": "coulomb",
                "sub_section": "/packages/8/section_definitions/19",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 29,
            "m_parent_sub_section": "section_definitions",
            "name": "Wannier",
            "description": "Section containing the various parameters that define a Wannier tight-binding method.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_projected_orbitals",
                "description": "Number of Wannier orbitals used to fit the DFT band structure",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_bands",
                "description": "Number of input Bloch bands to calculate the projection matrix.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "is_maximally_localized",
                "description": "Are the projected orbitals maximally localized or just a single-shot projection?",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "convergence_tolerance_max_localization",
                "description": "Convergence tolerance for maximal localization of the projected orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "energy_window_outer",
                "description": "Bottom and top of the outer energy window used for the projection.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  2
                ],
                "unit": "electron_volt"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "energy_window_inner",
                "description": "Bottom and top of the inner energy window used for the projection.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  2
                ],
                "unit": "electron_volt"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 30,
            "m_parent_sub_section": "section_definitions",
            "name": "TB",
            "description": "Section containing the parameters pertaining to a tight-binding calculation. The TB model can be derived from the Slater-Koster integrals, the xTB perturbation theory, or\nthe Wannier projection.",
            "base_sections": [
              "/packages/8/section_definitions/20"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "slater_koster",
                "sub_section": "/packages/8/section_definitions/27",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "xtb",
                "sub_section": "/packages/8/section_definitions/28",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "wannier",
                "sub_section": "/packages/8/section_definitions/29",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 31,
            "m_parent_sub_section": "section_definitions",
            "name": "HoppingMatrix",
            "description": "Section containing the hopping/overlap matrix elements between N projected orbitals. This is also the output of a TB calculation.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_orbitals",
                "description": "Number of projected orbitals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_wigner_seitz_points",
                "description": "Number of Wigner-Seitz real points.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "degeneracy_factors",
                "description": "Degeneracy of each Wigner-Seitz grid point.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "n_wigner_seitz_points"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Real space hopping matrix for each Wigner-Seitz grid point. The elements are\ndefined as follows:\n\n    n_x   n_y   n_z   orb_1   orb_2   real_part + j * imag_part\n\nwhere (n_x, n_y, n_z) define the Wigner-Seitz cell vector in fractional coordinates,\n(orb_1, orb_2) indicates the hopping amplitude between orb_1 and orb_2, and the\nreal and imaginary parts of the hopping in electron_volt.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_wigner_seitz_points",
                  "n_orbitals * n_orbitals",
                  7
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 32,
            "m_parent_sub_section": "section_definitions",
            "name": "LatticeModelHamiltonian",
            "description": "Section containing the parameters of the non-interacting parts of a lattice model Hamiltonian.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "lattice_name",
                "description": "Name of the lattice to identify the model. E.g., 'Square', 'Honeycomb'.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_neighbors",
                "description": "Number of direct neighbors considered for the hopping integrals.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "t_parameters",
                "description": "Hopping parameters for simple models, with [t, t`, t``, etc].",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "complex128"
                },
                "shape": [
                  "n_neighbors"
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "hopping_matrix",
                "sub_section": "/packages/8/section_definitions/31",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "hubbard_kanamori_model",
                "sub_section": "/packages/8/section_definitions/6",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 33,
            "m_parent_sub_section": "section_definitions",
            "name": "CoreHoleSpectra",
            "description": "Section containing the various parameters that define a calculation of core-hole spectra. It can be within BSE as a \"core\" subsection.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "solver",
                "description": "Solver algorithm used for the core-hole spectra.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "edge",
                "description": "Edge to be calculated for the core-hole spectra.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "K",
                    "L1",
                    "L2",
                    "L23",
                    "L3",
                    "M1",
                    "M2",
                    "M23",
                    "M3",
                    "M4",
                    "M45",
                    "M5",
                    "N1",
                    "N2",
                    "N23",
                    "N3",
                    "N4",
                    "N45",
                    "N5"
                  ]
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "mode",
                "description": "Type of spectra to be calculated: absorption or emission.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "absorption",
                    "emission"
                  ]
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "broadening",
                "description": "Core-hole lifetime broadening applied to the edge spectra in full-width at half maximum.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "joule"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 34,
            "m_parent_sub_section": "section_definitions",
            "name": "ExcitedStateMethodology",
            "description": "Base class containing the common numerical parameters typical of excited-state calculations.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "type",
                    "type__suggestion__suggestion"
                  ]
                },
                "name": "type",
                "description": "Type which allows to identify the excited-state calculation with a\ncommon string.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_states",
                "description": "Number of states used to calculate the excitations.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_empty_states",
                "description": "Number of empty states used to calculate the excitations. This quantity is\ncomplementary to `n_states`.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "broadening",
                "description": "Lifetime broadening applied to the spectra in full-width at half maximum.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "joule"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "k_mesh",
                "sub_section": "/packages/8/section_definitions/2"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "q_mesh",
                "sub_section": "/packages/8/section_definitions/2"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "frequency_mesh",
                "sub_section": "/packages/8/section_definitions/3"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 35,
            "m_parent_sub_section": "section_definitions",
            "name": "Screening",
            "description": "Section containing the various parameters that define a screening calculation, as for example, in RPA.",
            "base_sections": [
              "/packages/8/section_definitions/34"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "dielectric_infinity",
                "description": "Value of the static dielectric constant at infinite q. For metals, this is infinite\n(or a very large value), while for insulators is finite.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 36,
            "m_parent_sub_section": "section_definitions",
            "name": "GW",
            "description": "Section containing the various parameters that define a GW calculation.",
            "base_sections": [
              "/packages/8/section_definitions/34"
            ],
            "extending_sections": [
              "/packages/19/section_definitions/5"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.gw.type",
                    "results.method.simulation.gw.type__suggestion"
                  ]
                },
                "name": "type",
                "description": "GW Hedin's self-consistency cycle:\n\n| Name      | Description                      | Reference             |\n\n| --------- | -------------------------------- | --------------------- |\n\n| `'G0W0'`  | single-shot                      | PRB 74, 035101 (2006) |\n\n| `'scGW'`  | self-consistent G and W               | PRB 75, 235102 (2007) |\n\n| `'scGW0'` | self-consistent G with fixed W0  | PRB 54, 8411 (1996)   |\n\n| `'scG0W'` | self-consistent W with fixed G0  | -                     |\n\n| `'ev-scGW0'`  | eigenvalues self-consistent G with fixed W0   | PRB 34, 5390 (1986)   |\n\n| `'ev-scGW'`  | eigenvalues self-consistent G and W   | PRB 74, 045102 (2006)   |\n\n| `'qp-scGW0'`  | quasiparticle self-consistent G with fixed W0 | PRL 99, 115109 (2007) |\n\n| `'qp-scGW'`  | quasiparticle self-consistent G and W | PRL 96, 226402 (2006) |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "G0W0",
                    "ev-scGW",
                    "ev-scGW0",
                    "qp-scGW",
                    "qp-scGW0",
                    "scG0W",
                    "scGW",
                    "scGW0"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "analytical_continuation",
                "description": "Analytical continuation approximations of the GW self-energy:\n\n| Name           | Description         | Reference                        |\n\n| -------------- | ------------------- | -------------------------------- |\n\n| `'pade'` | Pade's approximant  | J. Low Temp. Phys 29, 179 (1977) |\n\n| `'contour_deformation'` | Contour deformation | PRB 67, 155208 (2003) |\n\n| `'ppm_GodbyNeeds'` | Godby-Needs plasmon-pole model | PRL 62, 1169 (1989) |\n\n| `'ppm_HybertsenLouie'` | Hybertsen and Louie plasmon-pole model | PRB 34, 5390 (1986) |\n\n| `'ppm_vonderLindenHorsh'` | von der Linden and P. Horsh plasmon-pole model | PRB 37, 8351 (1988) |\n\n| `'ppm_FaridEngel'` | Farid and Engel plasmon-pole model  | PRB 47, 15931 (1993) |\n\n| `'multi_pole'` | Multi-pole fitting  | PRL 74, 1827 (1995) |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "contour_deformation",
                    "multi_pole",
                    "pade",
                    "ppm_FaridEngel",
                    "ppm_GodbyNeeds",
                    "ppm_HybertsenLouie",
                    "ppm_vonderLindenHorsh"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "interval_qp_corrections",
                "description": "Band indices (in an interval) for which the GW quasiparticle corrections are\ncalculated.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  2
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "screening",
                "sub_section": "/packages/8/section_definitions/35"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 37,
            "m_parent_sub_section": "section_definitions",
            "name": "BSE",
            "description": "Section containing the various parameters that define a BSE calculation.",
            "base_sections": [
              "/packages/8/section_definitions/34"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.bse.type",
                    "results.method.simulation.bse.type__suggestion"
                  ]
                },
                "name": "type",
                "description": "Type of BSE hamiltonian solved:\n\n    H_BSE = H_diagonal + 2 * gx * Hx - gc * Hc\n\nwhere gx, gc specifies the type.\n\nOnline resources for the theory:\n- http://exciting.wikidot.com/carbon-excited-states-from-bse#toc1\n- https://www.vasp.at/wiki/index.php/Bethe-Salpeter-equations_calculations\n- https://docs.abinit.org/theory/bse/\n- https://www.yambo-code.eu/wiki/index.php/Bethe-Salpeter_kernel\n\n| Name | Description |\n\n| --------- | ----------------------- |\n\n| `'Singlet'` | gx = 1, gc = 1 |\n\n| `'Triplet'` | gx = 0, gc = 1 |\n\n| `'IP'` | Independent-particle approach |\n\n| `'RPA'` | Random Phase Approximation |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "IP",
                    "RPA",
                    "Singlet",
                    "Triplet"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.bse.solver",
                    "results.method.simulation.bse.solver__suggestion"
                  ]
                },
                "name": "solver",
                "description": "Solver algotithm used to diagonalize the BSE Hamiltonian.\n\n| Name | Description | Reference |\n\n| --------- | ----------------------- | ----------- |\n\n| `'Full-diagonalization'` | Full diagonalization of the BSE Hamiltonian | - |\n\n| `'Lanczos-Haydock'` | Subspace iterative Lanczos-Haydock algorithm | https://doi.org/10.1103/PhysRevB.59.5441 |\n\n| `'GMRES'` | Generalized minimal residual method | https://doi.org/10.1137/0907058 |\n\n| `'SLEPc'` | Scalable Library for Eigenvalue Problem Computations | https://slepc.upv.es/ |\n\n| `'TDA'` | Tamm-Dancoff approximation | https://doi.org/10.1016/S0009-2614(99)01149-5 |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "Full-diagonalization",
                    "GMRES",
                    "Lanczos-Haydock",
                    "SLEPc",
                    "TDA"
                  ]
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "screening",
                "sub_section": "/packages/8/section_definitions/35"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "core_hole",
                "sub_section": "/packages/8/section_definitions/33"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 38,
            "m_parent_sub_section": "section_definitions",
            "name": "DMFT",
            "description": "Section containing the various parameters that define a DMFT calculation",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_impurities",
                "description": "Number of impurities mapped from the correlated atoms in the unit cell.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_correlated_orbitals",
                "description": "Number of correlated orbitals per impurity.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "n_impurities"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_electrons",
                "description": "Initial number of valence electrons per impurity.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_impurities"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.dmft.inverse_temperature"
                  ]
                },
                "name": "inverse_temperature",
                "description": "Inverse temperature = 1/(kB*T).",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "1 / joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.dmft.magnetic_state",
                    "results.method.simulation.dmft.magnetic_state__suggestion"
                  ]
                },
                "name": "magnetic_state",
                "description": "Magnetic state in which the DMFT calculation is done:\n\n| Name                  | State                   |\n\n| --------------------- | ----------------------- |\n\n| `'paramagnetic'`      | paramagnetic state      |\n\n| `'ferromagnetic'`     | ferromagnetic state     |\n\n| `'antiferromagnetic'` | antiferromagnetic state |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "antiferromagnetic",
                    "ferromagnetic",
                    "paramagnetic"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.dmft.impurity_solver_type",
                    "results.method.simulation.dmft.impurity_solver_type__suggestion"
                  ]
                },
                "name": "impurity_solver",
                "description": "Impurity solver method used in the DMFT loop:\n\n| Name              | Reference                            |\n\n| ----------------- | ------------------------------------ |\n\n| `'CT-INT'`        | Rubtsov et al., JEPT Lett 80 (2004)  |\n\n| `'CT-HYB'`        | Werner et al., PRL 97 (2006)         |\n\n| `'CT-AUX'`        | Gull et al., EPL 82 (2008)           |\n\n| `'ED'`            | Caffarrel et al, PRL 72 (1994)       |\n\n| `'NRG'`           | Bulla et al., RMP 80 (2008)          |\n\n| `'MPS'`           | Ganahl et al., PRB 90 (2014)         |\n\n| `'IPT'`           | Georges et al., PRB 45 (1992)        |\n\n| `'NCA'`           | Pruschke et al., PRB 47 (1993)       |\n\n| `'OCA'`           | Pruschke et al., PRB 47 (1993)       |\n\n| `'slave_bosons'`  | Kotliar et al., PRL 57 (1986)        |\n\n| `'hubbard_I'`     | -                                    |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "CT-AUX",
                    "CT-HYB",
                    "CT-INT",
                    "ED",
                    "IPT",
                    "MPS",
                    "NCA",
                    "NRG",
                    "OCA",
                    "hubbard_I",
                    "slave_bosons"
                  ]
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 39,
            "m_parent_sub_section": "section_definitions",
            "name": "NeighborSearching",
            "description": "Section containing the parameters for neighbor searching/lists during a molecular dynamics run.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "neighbor_update_frequency",
                "description": "Number of timesteps between updating the neighbor list.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "neighbor_update_cutoff",
                "description": "The distance cutoff for determining the neighbor list.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 40,
            "m_parent_sub_section": "section_definitions",
            "name": "ForceCalculations",
            "description": "Section containing the parameters for force calculations according to the referenced force field during a molecular dynamics run.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "vdw_cutoff",
                "description": "Cutoff for calculating VDW forces.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "coulomb_type",
                "description": "Method used for calculating long-ranged Coulomb forces.\n\nAllowed values are:\n\n| Barostat Name          | Description                               |\n\n| ---------------------- | ----------------------------------------- |\n\n| `\"\"`                   | No thermostat               |\n\n| `\"Cutoff\"`          | Simple cutoff scheme. |\n\n| `\"Ewald\"` | Standard Ewald summation as described in any solid-state physics text. |\n\n| `\"Multi-Level Summation\"` |  D. Hardy, J.E. Stone, and K. Schulten,\n[Parallel. Comput. **35**, 164](https://doi.org/10.1016/j.parco.2008.12.005)|\n\n| `\"Particle-Mesh-Ewald\"`        | T. Darden, D. York, and L. Pedersen,\n[J. Chem. Phys. **98**, 10089 (1993)](https://doi.org/10.1063/1.464397) |\n\n| `\"Particle-Particle Particle-Mesh\"` | See e.g. Hockney and Eastwood, Computer Simulation Using Particles,\nAdam Hilger, NY (1989). |\n\n| `\"Reaction-Field\"` | J.A. Barker and R.O. Watts,\n[Mol. Phys. **26**, 789 (1973)](https://doi.org/10.1080/00268977300102101)|",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "cutoff",
                    "ewald",
                    "multilevel_summation",
                    "particle_mesh_ewald",
                    "particle_particle_particle_mesh",
                    "reaction_field"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "coulomb_cutoff",
                "description": "Cutoff for calculating short-ranged Coulomb forces.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "neighbor_searching",
                "sub_section": "/packages/8/section_definitions/39",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 41,
            "m_parent_sub_section": "section_definitions",
            "name": "ForceField",
            "description": "Section containing the parameters pertaining to a force field calculation.",
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "model",
                "sub_section": "/packages/8/section_definitions/20",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "force_calculations",
                "sub_section": "/packages/8/section_definitions/40",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 42,
            "m_parent_sub_section": "section_definitions",
            "name": "Smearing",
            "description": "Section containing the parameters related to the smearing of the electronic density of states at the Fermi level.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.dft.smearing_kind",
                    "results.method.simulation.dft.smearing_kind__suggestion"
                  ]
                },
                "name": "kind",
                "description": "Specifies the kind of smearing on the electron occupation used to calculate the\nfree energy (see energy_free)\n\nValid values are:\n\n| Smearing kind             | Description                       |\n\n| ------------------------- | --------------------------------- |\n\n| `\"empty\"`                 | No smearing is applied            |\n\n| `\"gaussian\"`              | Gaussian smearing                 |\n\n| `\"fermi\"`                 | Fermi smearing                    |\n\n| `\"marzari-vanderbilt\"`    | Marzari-Vanderbilt smearing       |\n\n| `\"methfessel-paxton\"`     | Methfessel-Paxton smearing        |\n\n| `\"tetrahedra\"`            | Interpolation of state energies and occupations\n(ignores smearing_width) |",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.dft.smearing_width"
                  ]
                },
                "name": "width",
                "description": "Specifies the width of the smearing in energy for the electron occupation used to\ncalculate the free energy (see energy_free).\n\n*NOTE:* Not all methods specified in smearing_kind uses this value.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 43,
            "m_parent_sub_section": "section_definitions",
            "name": "Electronic",
            "description": "Section containing the parameters related to the electronic structure.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "spin_target",
                "description": "Stores the target (user-imposed) value of the spin multiplicity $M=2S+1$, where\n$S$ is the total spin. It is an integer number. This value is not necessarily the\nvalue obtained at the end of the calculation. See spin_S2 for the converged value\nof the spin moment.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "charge",
                "description": "Stores the total charge of the system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "coulomb"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_bands",
                "description": "Specifies the number of bands used in the calculation.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "n_spin_channels",
                "description": "Gives the number of spin channels.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "n_electrons",
                "description": "Number of valence electrons in the system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "method",
                "description": "Non-unique string identifying the used electronic structure method. It is not\nunique in the sense that two calculations with the same\nelectronic structure method string may have not been performed with exactly the\nsame method.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.dft.relativity_method",
                    "results.method.simulation.dft.relativity_method__suggestion"
                  ]
                },
                "name": "relativity_method",
                "description": "Describes the relativistic treatment used for the calculation of the final energy\nand related quantities. If skipped or empty, no relativistic treatment is applied.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "pseudo_scalar_relativistic",
                    "scalar_relativistic",
                    "scalar_relativistic_atomic_ZORA"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.dft.van_der_Waals_method",
                    "results.method.simulation.dft.van_der_Waals_method__suggestion"
                  ]
                },
                "name": "van_der_waals_method",
                "description": "Describes the Van der Waals method. If skipped or an empty string is used, it\nmeans no Van der Waals correction is applied.\n\nAllowed values are:\n\n| Van der Waals method  | Description                               |\n\n| --------------------- | ----------------------------------------- |\n\n| `\"\"`                  | No Van der Waals correction               |\n\n| `\"TS\"`                | A. Tkatchenko and M. Scheffler, [Phys. Rev. Lett.\n**102**, 073005 (2009)](http://dx.doi.org/10.1103/PhysRevLett.102.073005) |\n\n| `\"OBS\"`               | F. Ortmann, F. Bechstedt, and W. G. Schmidt, [Phys. Rev.\nB **73**, 205101 (2006)](http://dx.doi.org/10.1103/PhysRevB.73.205101) |\n\n| `\"G06\"`               | S. Grimme, [J. Comput. Chem. **27**, 1787\n(2006)](http://dx.doi.org/10.1002/jcc.20495) |\n\n| `\"JCHS\"`              | P. Jure\u010dka, J. \u010cern\u00fd, P. Hobza, and D. R. Salahub,\n[Journal of Computational Chemistry **28**, 555\n(2007)](http://dx.doi.org/10.1002/jcc.20570) |\n\n| `\"MDB\"`               | Many-body dispersion. A. Tkatchenko, R. A. Di Stasio Jr,\nR. Car, and M. Scheffler, [Physical Review Letters **108**, 236402\n(2012)](http://dx.doi.org/10.1103/PhysRevLett.108.236402) and A. Ambrosetti, A. M.\nReilly, R. A. Di Stasio Jr, and A. Tkatchenko, [The Journal of Chemical Physics\n**140**, 18A508 (2014)](http://dx.doi.org/10.1063/1.4865104) |\n\n| `\"XC\"`                | The method to calculate the Van der Waals energy uses a\nnon-local functional which is described in section_XC_functionals. |",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "smearing",
                "sub_section": "/packages/8/section_definitions/42"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 44,
            "m_parent_sub_section": "section_definitions",
            "name": "Method",
            "description": "Section containing the various parameters that define the theory and the approximations (convergence, thresholds, etc.) behind the calculation.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "extending_sections": [
              "/packages/19/section_definitions/1",
              "/packages/20/section_definitions/0",
              "/packages/21/section_definitions/0",
              "/packages/22/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "label",
                "description": "Label to identify the method applied in the simulation. Allowed values are:\n\n| Label | Name | Reference |\n\n| ----- | ---- | ----------- |\n\n| `'DFT'` | Density Functional Theory | https://en.wikipedia.org/wiki/Density_functional_theory |\n\n| `'TB'` | Tight-Binding models | https://en.wikipedia.org/wiki/Tight_binding |\n\n| `'GW'` | GW approximation | https://en.wikipedia.org/wiki/GW_approximation |\n\n| `'DMFT'` | Dynamical Mean-Field Theory | https://en.wikipedia.org/wiki/GW_approximation |\n\n| `'BSE'` | Bethe-Salpeter Equation | https://en.wikipedia.org/wiki/Bethe-Salpeter_equation |\n\n| `'kMC'` | Kinetic Monte Carlo |https://en.wikipedia.org/wiki/Kinetic_Monte_Carlo |\n\n| `'NMR'` | Nuclear Magnetic Resonance | https://en.wikipedia.org/wiki/Nuclear_magnetic_resonance |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "BSE",
                    "DFT",
                    "DMFT",
                    "GW",
                    "NMR",
                    "TB",
                    "kMC"
                  ]
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "stress_tensor_method",
                "description": "Specifies the method used to calculate stress_tensor for, e.g., molecular dynamics\nand geometry optimization.\n\nThe allowed values are:\n\n* numeric\n\n* analytic",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "starting_method_ref",
                "description": "Links the current section method to a section method containing the starting\nparameters.",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/8/section_definitions/44"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "core_method_ref",
                "description": "Links the current section method to a section method containing the core settings.",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/8/section_definitions/44"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "n_references",
                "description": "Number of references to the current method.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "methods_ref",
                "description": "Links the section method to other method sections. For instance, one calculation\nis a perturbation performed using a self-consistent field (SCF) calculation as\nstarting point, or a simulated system is partitioned in regions with different but\nconnected Hamiltonians (e.g., QM/MM, or a region treated via Kohn-Sham DFT\nembedded into a region treated via orbital-free DFT).",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/8/section_definitions/44"
                },
                "shape": [
                  "n_references"
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "dft",
                "sub_section": "/packages/8/section_definitions/23"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "tb",
                "sub_section": "/packages/8/section_definitions/30"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "lattice_model_hamiltonian",
                "sub_section": "/packages/8/section_definitions/32",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 3,
                "m_parent_sub_section": "sub_sections",
                "name": "gw",
                "sub_section": "/packages/8/section_definitions/36"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 4,
                "m_parent_sub_section": "sub_sections",
                "name": "bse",
                "sub_section": "/packages/8/section_definitions/37"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 5,
                "m_parent_sub_section": "sub_sections",
                "name": "dmft",
                "sub_section": "/packages/8/section_definitions/38"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 6,
                "m_parent_sub_section": "sub_sections",
                "name": "force_field",
                "sub_section": "/packages/8/section_definitions/41"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 7,
                "m_parent_sub_section": "sub_sections",
                "name": "core_hole",
                "sub_section": "/packages/8/section_definitions/33"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 8,
                "m_parent_sub_section": "sub_sections",
                "name": "k_mesh",
                "sub_section": "/packages/8/section_definitions/2"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 9,
                "m_parent_sub_section": "sub_sections",
                "name": "frequency_mesh",
                "sub_section": "/packages/8/section_definitions/3",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 10,
                "m_parent_sub_section": "sub_sections",
                "name": "time_mesh",
                "sub_section": "/packages/8/section_definitions/4",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 11,
                "m_parent_sub_section": "sub_sections",
                "name": "electronic",
                "sub_section": "/packages/8/section_definitions/43"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 12,
                "m_parent_sub_section": "sub_sections",
                "name": "scf",
                "sub_section": "/packages/8/section_definitions/5"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 13,
                "m_parent_sub_section": "sub_sections",
                "name": "atom_parameters",
                "more": {
                  "label_quantity": "label"
                },
                "sub_section": "/packages/8/section_definitions/10",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 14,
                "m_parent_sub_section": "sub_sections",
                "name": "molecule_parameters",
                "more": {
                  "label_quantity": "label"
                },
                "sub_section": "/packages/8/section_definitions/11",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 15,
                "m_parent_sub_section": "sub_sections",
                "name": "electrons_representation",
                "more": {
                  "label_quantity": "type"
                },
                "sub_section": "/packages/8/section_definitions/18",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 16,
                "m_parent_sub_section": "sub_sections",
                "name": "photon",
                "sub_section": "/packages/8/section_definitions/12",
                "repeats": true
              }
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 9,
        "m_parent_sub_section": "packages",
        "name": "runschema.system",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "AtomsGroup",
            "description": "Describes a group of atoms which may constitute a sub system as in the case of a molecule.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "label",
                "description": "Label of the group.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "Type of the group.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "index",
                "description": "Index of the group with respect to its parent group.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "composition_formula",
                "description": "The overall composition of the group with respect to its subgroups.\nThe syntax for a groups composed of X and Y with x and y components of each,\nrespectively, is X(x)Y(y).",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "n_atoms",
                "description": "The total number of atoms in the group.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "atom_indices",
                "description": "Indices of the atoms in the group with respect to the system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "n_atoms"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "is_molecule",
                "description": "Denotes if the atoms in this group represent a molecule. That is, all atoms\nin the group are connected via bonds, and no other atoms contain bonds\nwith these atoms.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "bond_list",
                "description": "List of pairs of atom indices corresponding to bonds (e.g., as defined by a force field) within this atoms_group.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "*",
                  2
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "atoms_group",
                "sub_section": "/packages/9/section_definitions/0",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "Atoms",
            "description": "Describes the atomic structure of the physical system. This includes the atom positions, lattice vectors, etc.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_atoms",
                "description": "The total number of species (atoms, particles) in the system.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "atomic_numbers",
                "description": "List of atomic numbers Z of the atoms identified in labels. If a species cannot\nbe assigned Z, a negative value can also be used to distinguish it.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "n_atoms"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "equivalent_atoms",
                "description": "Gives a mapping table of atoms to symmetrically independent atoms in the\nstandardized cell. This is used to find symmetrically equivalent atoms.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "n_atoms"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "wyckoff_letters",
                "description": "Wyckoff letters corresponding to each atom.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "n_atoms"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "concentrations",
                "description": "Concentrations of the species defined by labels which can be assigned for systems\nwith variable compositions.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_atoms"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "species",
                "description": "Species of the atom (normally the atomic number Z, 0 or negative for unidentifed\nspecies or particles that are not atoms.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "n_atoms"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "labels",
                "description": "List containing the labels of the atoms. In the usual case, these correspond to\nthe chemical symbols of the atoms. One can also append an index if there is a\nneed to distinguish between species with the same symbol, e.g., atoms of the\nsame species assigned to different atom-centered basis sets or pseudo-potentials,\nor simply atoms in different locations in the structure such as those in the bulk\nand on the surface. In the case where a species is not an atom, and therefore\ncannot be representated by a chemical symbol, the label can simply be the name of\nthe particles.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "n_atoms"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "positions",
                "description": "Positions of all the species, in cartesian coordinates. This metadata defines a\nconfiguration and is therefore required. For alloys where concentrations of\nspecies are given for each site in the unit cell, it stores the position of the\nsites.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_atoms",
                  3
                ],
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "velocities",
                "description": "Velocities of the nuclei, defined as the change in cartesian coordinates of the\nnuclei with respect to time.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_atoms",
                  3
                ],
                "unit": "meter / second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "lattice_vectors",
                "description": "Lattice vectors of the simulation cell in cartesian coordinates. The\nlast (fastest) index runs over the $x,y,z$ Cartesian coordinates, and the first\nindex runs over the 3 lattice vectors.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3,
                  3
                ],
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "lattice_vectors_reciprocal",
                "description": "Reciprocal lattice vectors of the simulation cell, in cartesian coordinates and with the 2 $pi$ pre-factor.\nThe first index runs over the $x,y,z$ Cartesian coordinates, and the second index runs\nover the 3 lattice vectors.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3,
                  3
                ],
                "unit": "1 / meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "name": "local_rotations",
                "description": "A rotation matrix defining the orientation of each atom. If the rotation matrix\ncannot be specified for an atom, the remaining atoms should set it to\nthe zero matrix (not the identity!)",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_atoms",
                  3,
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "name": "periodic",
                "description": "Denotes if periodic boundary condition is applied to each of the lattice vectors.'",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": [
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 13,
                "m_parent_sub_section": "quantities",
                "name": "supercell_matrix",
                "description": "Specifies the matrix that transforms the unit-cell into the super-cell in which\nthe actual calculation is performed.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  3,
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 14,
                "m_parent_sub_section": "quantities",
                "name": "symmorphic",
                "description": "Specifies if the space group is symmorphic. Set to True if all translations are\nzero.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 15,
                "m_parent_sub_section": "quantities",
                "name": "bond_list",
                "description": "List of pairs of atom indices corresponding to bonds (e.g., as defined by a force field) within the entire system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "*",
                  2
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "name": "Symmetry",
            "description": "Section containing information about the symmetry properties of the atomic system.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "bravais_lattice",
                "description": "Identifier for the Bravais lattice in Pearson notation. The first lowercase letter\nidentifies the crystal family and can be one of the following: a (triclinic), b\n(monoclinic), o (orthorhombic), t (tetragonal), h (hexagonal) or c (cubic). The\nsecond uppercase letter identifies the centring and can be one of the following: P\n(primitive), S (face centred), I (body centred), R (rhombohedral centring) or F\n(all faces centred).",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "choice",
                "description": "String that specifies the centering, origin and basis vector settings of the 3D\nspace group that defines the symmetry group of the simulated physical system (see\nsection system). Values are as defined by spglib.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "crystal_system",
                "description": "Name of the crystal system. Can be one of the following: triclinic, monoclinic,\northorhombic, tetragonal, trigonal, hexagonal or cubic.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "hall_number",
                "description": "The Hall number for this system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "hall_symbol",
                "description": "The Hall symbol for this system.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "international_short_symbol",
                "description": "Specifies the International Union of Crystallography (IUC) short symbol of the 3D\nspace group of this system",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "origin_shift",
                "description": "Vector $\\mathbf{p}$ from the origin of the standardized system to the origin of\nthe original system. Together with the matrix $\\mathbf{P}$, found in\nspace_group_3D_transformation_matrix, the transformation between the standardized\ncoordinates $\\mathbf{x}_s$ and original coordinates $\\mathbf{x}$ is then given\nby $\\mathbf{x}_s = \\mathbf{P} \\mathbf{x} + \\mathbf{p}$.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "point_group",
                "description": "Symbol of the crystallographic point group in the Hermann-Mauguin notation.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "space_group_number",
                "description": "Specifies the International Union of Crystallography (IUC) number of the 3D space\ngroup of this system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "symmetry_method",
                "description": "Identifies the source of the symmetry information contained within this section.\nIf equal to 'spg_normalized' the information comes from a normalization step.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "transformation_matrix",
                "description": "Matrix $\\mathbf{P}$ that is used to transform the standardized coordinates to the\noriginal coordinates. Together with the vector $\\mathbf{p}$, found in\nspace_group_3D_origin_shift, the transformation between the standardized\ncoordinates $\\mathbf{x}_s$ and original coordinates $\\mathbf{x}$ is then given by\n$\\mathbf{x}_s = \\mathbf{P} \\mathbf{x} + \\mathbf{p}$.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3,
                  3
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "system_original",
                "sub_section": "/packages/9/section_definitions/1",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "system_primitive",
                "sub_section": "/packages/9/section_definitions/1",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "system_std",
                "sub_section": "/packages/9/section_definitions/1",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 3,
            "m_parent_sub_section": "section_definitions",
            "name": "Prototype",
            "description": "Information on the prototype corresponding to the current section.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "aflow_id",
                "description": "AFLOW id of the prototype (see\nhttp://aflowlib.org/CrystalDatabase/prototype_index.html) identified on the basis\nof the space_group and normalized_wyckoff.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "aflow_url",
                "description": "Url to the AFLOW definition of the prototype (see\nhttp://aflowlib.org/CrystalDatabase/prototype_index.html) identified on the basis\nof the space_group and normalized_wyckoff.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "assignment_method",
                "description": "Method used to identify the prototype.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "label",
                "description": "Label of the prototype identified on the basis of the space_group and\nnormalized_wyckoff. The label is in the same format as in the read_prototypes\nfunction: <space_group_number>-<prototype_name>-<Pearson's symbol>).",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 4,
            "m_parent_sub_section": "section_definitions",
            "name": "SpringerMaterial",
            "description": "Contains results of classification of materials with the same formula according to Springer Materials. These include material and compound classsification, formula,\nid, and references from the Springer Materials database.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "id",
                "description": "Id of the classified material according to Springer Materials.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "alphabetical_formula",
                "description": "The alphabetical formula of the material according to Springer Materials Database",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "url",
                "description": "Url to the source page in Springer Materials describing the current entry",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "compound_class",
                "description": "Name of a class of the current compound, as defined in by Springer Materials. This\nis a property of the chemical formula of the compound",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "N"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "classification",
                "description": "Contains the classification name of the current material according to Springer\nMaterials",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "N"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 5,
            "m_parent_sub_section": "section_definitions",
            "name": "Constraint",
            "description": "Section describing a constraint between arbitrary atoms.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "kind",
                "description": "Short and unique name for this constraint type. Could be fix_a where a can be\nx, y, z denoting a constraint along a cartesian direction, xy, xz, yz denoting a\nconstaint along a cartesian plane, xyz denoting a fixed position, distance\ndenoting a fixed distance between two atoms, angle denoting a fixed angle between\nthree atoms, and dihedral denoting a fixed dihedral angle.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_constraints",
                "description": "Number of constraints of this type.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_atoms",
                "description": "Number of atoms involved in this constraint.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "atom_indices",
                "description": "List of the indexes involved in this constraint.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "n_constraints",
                  "n_atoms"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "parameters",
                "description": "Explicit constraint parameters for this kind of constraint (depending on the\nconstraint type, some might be given implicitly through other means).",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Any"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 6,
            "m_parent_sub_section": "section_definitions",
            "name": "MACE",
            "description": "\n        MACE descriptors and representations.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "system_descriptor",
                "description": "MACE descriptors computed using the MACE-MP-0 foundation model and averaged across all atoms in the system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 7,
            "m_parent_sub_section": "section_definitions",
            "name": "SOAP",
            "description": "\n        SOAP descritors and representations\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_max",
                "description": "Number of radial basis functions in density expansion",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "l_max",
                "description": "Order of Spherical harmonics.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "r_cut",
                "description": "Cutoff distance defining each local environment.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "atom_sigma",
                "description": "Width of Gaussians used in density expansion",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "R_mix",
                "description": "If True, the radial basis functions are mixed.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "Z_mix",
                "description": "If True, the elements are mixed.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "sym_mix",
                "description": "If True, use symmetric tensor decomposition, otherwise use tensor sketching.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "coupling",
                "description": "If True, form tensor product between mixed channels, else form element-wise product.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "radial_basis",
                "description": "Radial basis functions to use with SOAP descriptors.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "K",
                "description": "Number of channels to use in tensor decomposition/sketching.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "structural_soap",
                "description": "1. Structure scaled so that the average nearest neighbour distance is 1.54 AA.\nAtoms in the initial structure without a neighbour within 10 AA do not count towards the scaling factor and structures with no neighbours within 10 AA are not scaled at all.\n2. All atoms replaced with C\n3. soap computed using the following argument string\n\nsoap cutoff=5.0 l_max=4 n_max=8 radial_basis=GTO atom_sigma=0.4 average=True n_Z=1 Z=6 n_species=1 species_Z=6 R_mix=True sym_mix=False Z_mix=False K=8 coupling=False\n\nThis has the effect of making the SOAP descriptor `purely structural' in the sense that chemical species and uniform scalings i.e. from different bond lengths not affect the descriptor. The density expansion coefficients c_nlm on different atoms are averaged prior to forming the power spectrum. Tensor sketching is used across the radial channels to reduce the size of the descriptor.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 8,
            "m_parent_sub_section": "section_definitions",
            "name": "Descriptors",
            "description": "\n        Contains atomic descriptors and structural representations\n        ",
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "soap",
                "sub_section": "/packages/9/section_definitions/7",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "mace",
                "sub_section": "/packages/9/section_definitions/6",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 9,
            "m_parent_sub_section": "section_definitions",
            "name": "System",
            "description": "Contains parameters describing a system of atomic configuration. These inclue the compound name, atomic positions, lattice vectors, contraints on the atoms, etc.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "extending_sections": [
              "/packages/19/section_definitions/3"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "name",
                "description": "Specifies the name of the system. This information is provided by the user in some\ncodes and is stored here for debugging or visualization purposes.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "Type of the system (atom, bulk, surface, etc.) which is determined by the\nnormalizer.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "configuration_raw_gid",
                "description": "checksum of the configuration_core, i.e. the geometry of the system. The values\nare not normalized in any way so equivalent configurations might have different\nvalues",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "is_representative",
                "description": "Most systems in a run are only minor variations of each other. Systems marked\nrepresentative where chosen to be representative for all systems in the run.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "n_references",
                "description": "Number of references to the current section system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "sub_system_ref",
                "description": "Links the current section system to a sub system.",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/9/section_definitions/9"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "systems_ref",
                "description": "Links the current section system to other section systems. Such a link is\nnecessary for example between the supercell and the reference unit cell in a phonon\ncalculation. The relationship should be described by kind and the referred section\nsystem is given by value. An external url can also be provided in place of value.",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/9/section_definitions/9"
                },
                "shape": [
                  "n_references"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "chemical_composition",
                "description": "The full chemical composition of the system, based on atom species.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "chemical_composition_hill",
                "description": "The chemical composition in the hill convention of the system, based on atom species.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "chemical_composition_reduced",
                "description": "The chemical composition as reduced formula of the system, based on atom species.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "chemical_composition_anonymous",
                "description": "The chemical composition without explicit element names of the system, based on\natom species.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "atoms",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/9/section_definitions/1"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "atoms_group",
                "sub_section": "/packages/9/section_definitions/0",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "constraint",
                "sub_section": "/packages/9/section_definitions/5",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 3,
                "m_parent_sub_section": "sub_sections",
                "name": "prototype",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/9/section_definitions/3",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 4,
                "m_parent_sub_section": "sub_sections",
                "name": "springer_material",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/9/section_definitions/4",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 5,
                "m_parent_sub_section": "sub_sections",
                "name": "symmetry",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/9/section_definitions/2",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 6,
                "m_parent_sub_section": "sub_sections",
                "name": "descriptors",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/9/section_definitions/8",
                "repeats": false
              }
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 10,
        "m_parent_sub_section": "packages",
        "name": "runschema.calculation",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "Atomic",
            "description": "Generic section containing the values and information reqarding an atomic quantity such as charges, forces, multipoles.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "kind",
                "description": "Kind of the quantity.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_orbitals",
                "description": "Number of orbitals used in the projection.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_atoms",
                "description": "Number of atoms.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "n_spin_channels",
                "description": "Number of spin channels.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "AtomicValues",
            "description": "Generic section containing information regarding the values of an atomic quantity.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "spin",
                "description": "Spin channel corresponding to the atomic quantity.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "atom_label",
                "description": "Label of the atomic species corresponding to the atomic quantity.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "atom_index",
                "description": "Index of the atomic species corresponding to the atomic quantity.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "m_kind",
                "description": "String describing what the integer numbers of $m$ lm mean used in orbital\nprojections. The allowed values are listed in the [m_kind wiki page]\n(https://gitlab.rzg.mpg.de/nomad-lab/nomad-meta-info/wikis/metainfo/m-kind).",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "lm",
                "description": "Tuples of $l$ and $m$ values for which the atomic quantity are given. For\nthe quantum number $l$ the conventional meaning of azimuthal quantum number is\nalways adopted. For the integer number $m$, besides the conventional use as\nmagnetic quantum number ($l+1$ integer values from $-l$ to $l$), a set of\ndifferent conventions is accepted (see the [m_kind wiki\npage](https://gitlab.rzg.mpg.de/nomad-lab/nomad-meta-info/wikis/metainfo/m-kind).\nThe adopted convention is specified by m_kind.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  2
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "orbital",
                "description": "String representation of the of the atomic orbital.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "name": "AtomicGroup",
            "description": "Generic section containing the values and information reqarding a molecular or sub-molecular quantity that is a function of an atomic group such as radius of gyration...",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.structural.radius_of_gyration.kind",
                    "results.properties.structural.radius_of_gyration.kind__suggestion"
                  ]
                },
                "name": "kind",
                "description": "Kind of the quantity.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 3,
            "m_parent_sub_section": "section_definitions",
            "name": "AtomicGroupValues",
            "description": "Generic section containing information regarding the values of a trajectory property.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.structural.radius_of_gyration.label",
                    "results.properties.structural.radius_of_gyration.label__suggestion"
                  ]
                },
                "name": "label",
                "description": "Describes the atoms or molecule types involved in determining the property.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "atomsgroup_ref",
                "description": "References to the atoms_group section containing the molecule for which Rg was calculated.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/9/section_definitions/0"
                },
                "shape": [
                  1
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 4,
            "m_parent_sub_section": "section_definitions",
            "name": "EnergyEntry",
            "description": "Section describing a type of energy or a contribution to the total energy.",
            "base_sections": [
              "/packages/10/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "reference",
                "description": "Value of the reference energy to be subtracted from value to obtain a\ncode-independent value of the energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Value of the energy of the unit cell.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "value_per_atom",
                "description": "Value of the energy normalized by the total number of atoms in the simulation\ncell.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "values_per_atom",
                "description": "Value of the atom-resolved energies.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_atoms"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "potential",
                "description": "Value of the potential energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "kinetic",
                "description": "Value of the kinetic energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "correction",
                "description": "Value of the correction to the energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "short_range",
                "description": "Value of the short range contributions to the energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "long_range",
                "description": "Value of the long range contributions to the energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 5,
            "m_parent_sub_section": "section_definitions",
            "name": "Energy",
            "description": "Section containing all energy types and contributions.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "enthalpy",
                "description": "Value of the calculated enthalpy per cell i.e. energy_total + pressure * volume.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "entropy",
                "description": "Value of the entropy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule / kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "chemical_potential",
                "description": "Value of the chemical potential.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "internal",
                "description": "Value of the internal energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "change",
                "description": "Stores the change of total energy with respect to the previous step.",
                "categories": [
                  "/packages/10/category_definitions/5",
                  "/packages/10/category_definitions/3"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "fermi",
                "description": "Fermi energy (separates occupied from unoccupied single-particle states)",
                "categories": [
                  "/packages/10/category_definitions/4",
                  "/packages/10/category_definitions/3"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "highest_occupied",
                "description": "The highest occupied energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "lowest_unoccupied",
                "description": "The lowest unoccupied energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "total",
                "description": "Contains the value and information regarding the total energy of the system.",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/10/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "current",
                "description": "Contains the value and information regarding the energy calculated with\ncalculation_method_current. energy_current is equal to energy_total for\nnon-perturbative methods. For perturbative methods, energy_current is equal to the\ncorrection: energy_total minus energy_total of the calculation_to_calculation_ref\nwith calculation_to_calculation_kind = starting_point",
                "sub_section": "/packages/10/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "zero_point",
                "description": "Contains the value and information regarding the converged zero-point\nvibrations energy calculated using the method described in zero_point_method.",
                "sub_section": "/packages/10/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 3,
                "m_parent_sub_section": "sub_sections",
                "name": "kinetic_electronic",
                "description": "Contains the value and information regarding the self-consistent electronic\nkinetic energy.",
                "sub_section": "/packages/10/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 4,
                "m_parent_sub_section": "sub_sections",
                "name": "electronic",
                "description": "Contains the value and information regarding the self-consistent electronic\nenergy.",
                "sub_section": "/packages/10/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 5,
                "m_parent_sub_section": "sub_sections",
                "name": "correlation",
                "description": "Contains the value and information regarding the correlation energy calculated\nusing the method described in XC_functional.",
                "sub_section": "/packages/10/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 6,
                "m_parent_sub_section": "sub_sections",
                "name": "exchange",
                "description": "Contains the value and information regarding the exchange energy calculated\nusing the method described in XC_functional.",
                "sub_section": "/packages/10/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 7,
                "m_parent_sub_section": "sub_sections",
                "name": "xc",
                "description": "Contains the value and information regarding the exchange-correlation (XC)\nenergy calculated with the functional stored in XC_functional.",
                "sub_section": "/packages/10/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 8,
                "m_parent_sub_section": "sub_sections",
                "name": "xc_potential",
                "description": "Contains the value and information regarding the exchange-correlation (XC)\npotential energy: the integral of the first order derivative of the functional\nstored in XC_functional (integral of v_xc*electron_density), i.e., the component\nof XC that is in the sum of the eigenvalues. Value associated with the\nconfiguration, should be the most converged value..",
                "sub_section": "/packages/10/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 9,
                "m_parent_sub_section": "sub_sections",
                "name": "electrostatic",
                "description": "Contains the value and information regarding the total electrostatic energy\n(nuclei + electrons), defined consistently with calculation_method.",
                "sub_section": "/packages/10/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 10,
                "m_parent_sub_section": "sub_sections",
                "name": "nuclear_repulsion",
                "description": "Contains the value and information regarding the total nuclear-nuclear repulsion\nenergy.",
                "sub_section": "/packages/10/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 11,
                "m_parent_sub_section": "sub_sections",
                "name": "coulomb",
                "description": "Contains the value and information regarding the Coulomb energy.",
                "sub_section": "/packages/10/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 12,
                "m_parent_sub_section": "sub_sections",
                "name": "madelung",
                "description": "Contains the value and information regarding the Madelung energy.",
                "sub_section": "/packages/10/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 13,
                "m_parent_sub_section": "sub_sections",
                "name": "ewald",
                "description": "Contains the value and information regarding the Ewald energy.",
                "sub_section": "/packages/10/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 14,
                "m_parent_sub_section": "sub_sections",
                "name": "free",
                "description": "Contains the value and information regarding the free energy (nuclei + electrons)\n(whose minimum gives the smeared occupation density calculated with\nsmearing_kind).",
                "sub_section": "/packages/10/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 15,
                "m_parent_sub_section": "sub_sections",
                "name": "sum_eigenvalues",
                "description": "Contains the value and information regarding the sum of the eigenvalues of the\nHamiltonian matrix.",
                "sub_section": "/packages/10/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 16,
                "m_parent_sub_section": "sub_sections",
                "name": "total_t0",
                "description": "Contains the value and information regarding the total energy extrapolated to\n$T=0$, based on a free-electron gas argument.",
                "sub_section": "/packages/10/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 17,
                "m_parent_sub_section": "sub_sections",
                "name": "van_der_waals",
                "description": "Contains the value and information regarding the Van der Waals energy. A multiple\noccurence is expected when more than one van der Waals methods are defined. The\nvan der Waals kind should be specified in Energy.kind",
                "sub_section": "/packages/10/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 18,
                "m_parent_sub_section": "sub_sections",
                "name": "hartree_fock_x_scaled",
                "description": "Scaled exact-exchange energy that depends on the mixing parameter of the\nfunctional. For example in hybrid functionals, the exchange energy is given as a\nlinear combination of exact-energy and exchange energy of an approximate DFT\nfunctional; the exact exchange energy multiplied by the mixing coefficient of the\nhybrid functional would be stored in this metadata. Defined consistently with\nXC_method.",
                "sub_section": "/packages/10/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 19,
                "m_parent_sub_section": "sub_sections",
                "name": "contributions",
                "description": "Contains other energy contributions to the total energy not already defined.",
                "sub_section": "/packages/10/section_definitions/4",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 20,
                "m_parent_sub_section": "sub_sections",
                "name": "types",
                "description": "Contains other energy types not already defined.",
                "sub_section": "/packages/10/section_definitions/4",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 21,
                "m_parent_sub_section": "sub_sections",
                "name": "double_counting",
                "description": "Double counting correction when performing Hubbard model calculations.",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/10/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 22,
                "m_parent_sub_section": "sub_sections",
                "name": "correction_entropy",
                "description": "Entropy correction to the potential energy to compensate for the change in\noccupation so that forces at finite T do not need to keep the change of occupation\nin account. Defined consistently with XC_method.",
                "sub_section": "/packages/10/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 23,
                "m_parent_sub_section": "sub_sections",
                "name": "correction_hartree",
                "description": "Correction to the density-density electrostatic energy in the sum of eigenvalues\n(that uses the mixed density on one side), and the fully consistent density-\ndensity electrostatic energy. Defined consistently with XC_method.",
                "sub_section": "/packages/10/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 24,
                "m_parent_sub_section": "sub_sections",
                "name": "correction_xc",
                "description": "Correction to energy_XC.",
                "sub_section": "/packages/10/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 25,
                "m_parent_sub_section": "sub_sections",
                "name": "kinetic",
                "description": "Contains the value and information regarding the kinetic energy.",
                "sub_section": "/packages/10/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 26,
                "m_parent_sub_section": "sub_sections",
                "name": "potential",
                "description": "Contains the value and information regarding the potential energy.",
                "sub_section": "/packages/10/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 27,
                "m_parent_sub_section": "sub_sections",
                "name": "pressure_volume_work",
                "description": "Contains the value and information regarding the instantaneous pV work.",
                "sub_section": "/packages/10/section_definitions/4"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 6,
            "m_parent_sub_section": "section_definitions",
            "name": "ForcesEntry",
            "description": "Section describing a contribution to or type of atomic forces.",
            "base_sections": [
              "/packages/10/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Value of the forces acting on the atoms. This is calculated as minus gradient of\nthe corresponding energy type or contribution **including** constraints, if\npresent. The derivatives with respect to displacements of nuclei are evaluated in\nCartesian coordinates.  In addition, these are obtained by filtering out the\nunitary transformations (center-of-mass translations and rigid rotations for\nnon-periodic systems, see value_raw for the unfiltered counterpart).",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_atoms",
                  3
                ],
                "unit": "newton"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "value_raw",
                "description": "Value of the forces acting on the atoms **not including** such as fixed atoms,\ndistances, angles, dihedrals, etc.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_atoms",
                  3
                ],
                "unit": "newton"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 7,
            "m_parent_sub_section": "section_definitions",
            "name": "Forces",
            "description": "Section containing all forces types and contributions.",
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "total",
                "description": "Contains the value and information regarding the total forces on the atoms\ncalculated as minus gradient of energy_total.",
                "sub_section": "/packages/10/section_definitions/6"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "free",
                "description": "Contains the value and information regarding the forces on the atoms\ncorresponding to the minus gradient of energy_free. The (electronic) energy_free\ncontains the information on the change in (fractional) occupation of the\nelectronic eigenstates, which are accounted for in the derivatives, yielding a\ntruly energy-conserved quantity.",
                "sub_section": "/packages/10/section_definitions/6"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "t0",
                "description": "Contains the value and information regarding the forces on the atoms\ncorresponding to the minus gradient of energy_T0.",
                "sub_section": "/packages/10/section_definitions/6"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 3,
                "m_parent_sub_section": "sub_sections",
                "name": "contributions",
                "description": "Contains other forces contributions to the total atomic forces not already\ndefined.",
                "sub_section": "/packages/10/section_definitions/6",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 4,
                "m_parent_sub_section": "sub_sections",
                "name": "types",
                "description": "Contains other types of forces not already defined.",
                "sub_section": "/packages/10/section_definitions/6",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 8,
            "m_parent_sub_section": "section_definitions",
            "name": "StressEntry",
            "description": "Section describing a contribution to or a type of stress.",
            "base_sections": [
              "/packages/10/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Value of the stress on the simulation cell. It is given as the functional\nderivative of the corresponding energy with respect to the deformation tensor.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3,
                  3
                ],
                "unit": "joule / meter ** 3"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "values_per_atom",
                "description": "Value of the atom-resolved stresses.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "number_of_atoms",
                  3,
                  3
                ],
                "unit": "joule / meter ** 3"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 9,
            "m_parent_sub_section": "section_definitions",
            "name": "Stress",
            "description": "Section containing all stress types and contributions.",
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "total",
                "description": "Contains the value and information regarding the stress on the simulation cell\nand the atomic stresses corresponding to energy_total.",
                "sub_section": "/packages/10/section_definitions/8"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "contributions",
                "description": "Contains contributions for the total stress.",
                "sub_section": "/packages/10/section_definitions/8",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "types",
                "description": "Contains other types of stress.",
                "sub_section": "/packages/10/section_definitions/8",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 10,
            "m_parent_sub_section": "section_definitions",
            "name": "ChargesValue",
            "description": "Contains information on the charge on an atom or projected onto an orbital.",
            "base_sections": [
              "/packages/10/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Value of the charge projected on atom and orbital.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "coulomb"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_electrons",
                "description": "Value of the number of electrons projected on atom and orbital.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "spin_z",
                "description": "Value of the azimuthal spin projected on atom and orbital.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 11,
            "m_parent_sub_section": "section_definitions",
            "name": "Charges",
            "description": "Section describing the charges on the atoms obtained through a given analysis method. Also contains information on the orbital projection of charges.",
            "base_sections": [
              "/packages/10/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "analysis_method",
                "description": "Analysis method employed in evaluating the atom and partial charges.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Value of the atomic charges calculated through analysis_method.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_atoms"
                ],
                "unit": "coulomb"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_electrons",
                "description": "Value of the number of electrons on the atoms.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_atoms"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "spins",
                "description": "Value of the atomic spins.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_atoms"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "total",
                "description": "Value of the total charge of the system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "coulomb"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "spin_projected",
                "sub_section": "/packages/10/section_definitions/10",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "orbital_projected",
                "sub_section": "/packages/10/section_definitions/10",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 12,
            "m_parent_sub_section": "section_definitions",
            "name": "BandGapDeprecated",
            "description": "Base class for breaking up circular dependencies between BandGap, Dos, and BandStructure.",
            "base_sections": [
              "/packages/26/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.electronic.band_structure_electronic.band_gap.index"
                  ]
                },
                "name": "index",
                "description": "The spin channel index.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.electronic.band_structure_electronic.band_gap.value"
                  ]
                },
                "name": "value",
                "description": "The actual value of the band gap. Value of zero indicates a vanishing band gap and\nis distinct from sources lacking any band gap measurement or calculation.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.electronic.band_structure_electronic.band_gap.type"
                  ]
                },
                "name": "type",
                "description": "Band gap type.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "direct",
                    "indirect"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "energy_highest_occupied",
                "description": "The highest occupied energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "energy_lowest_unoccupied",
                "description": "The lowest unoccupied energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 13,
            "m_parent_sub_section": "section_definitions",
            "name": "BandEnergies",
            "description": "This section describes the eigenvalue spectrum for a set of kpoints given by band_energies_kpoints.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_spin_channels",
                "description": "Number of spin channels.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_bands",
                "description": "Number of bands for which the eigenvalues are evaluated.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_kpoints",
                "description": "Number of kpoints for which the eigenvalues are evaluated.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "kpoints",
                "description": "Fractional coordinates of the $k$ or $q$ points (in the basis of the reciprocal-\nlattice vectors) for which the eigenvalues are evaluated.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_kpoints",
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "kpoints_weights",
                "description": "Weights of the $k$ points in the calculation of the band energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_kpoints"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "kpoints_multiplicities",
                "description": "Multiplicities of the $k$ point (i.e., how many distinct points per cell this\nexpands to after applying all symmetries). This defaults to 1. If expansion is\nperformed then each point will have weight\nband_energies_kpoints_weights/band_energies_kpoints_multiplicities.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_kpoints"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "endpoints_labels",
                "description": "Labels of the points along a one-dimensional path sampled in the $k$-space or\n$q$-space, using the conventional symbols, e.g., Gamma, K, L.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  2
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "orbital_labels",
                "description": "Labels corresponding to each band/orbital",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "n_bands"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "occupations",
                "description": "Values of the occupations of the bands.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_spin_channels",
                  "n_kpoints",
                  "n_bands"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "energies",
                "description": "Values of the band energies.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_spin_channels",
                  "n_kpoints",
                  "n_bands"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "qp_linearization_prefactor",
                "description": "Values of the GW quasi particle linearization pre-factor.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_spin_channels",
                  "n_kpoints",
                  "n_bands"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "name": "value_xc_potential",
                "description": "Diagonal matrix elements of the GW exchange-correlation potential.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_spin_channels",
                  "n_kpoints",
                  "n_bands"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "name": "value_correlation",
                "description": "Diagonal matrix elements of the GW correlation energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_spin_channels",
                  "n_kpoints",
                  "n_bands"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 13,
                "m_parent_sub_section": "quantities",
                "name": "value_exchange",
                "description": "Diagonal matrix elements of the GW exchange energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_spin_channels",
                  "n_kpoints",
                  "n_bands"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 14,
                "m_parent_sub_section": "quantities",
                "name": "value_xc",
                "description": "Diagonal matrix elements of the GW exchange-correlation energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_spin_channels",
                  "n_kpoints",
                  "n_bands"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 15,
                "m_parent_sub_section": "quantities",
                "name": "value_qp",
                "description": "Diagonal matrix elements of the GW quasi-particle energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_spin_channels",
                  "n_kpoints",
                  "n_bands"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 16,
                "m_parent_sub_section": "quantities",
                "name": "value_ks",
                "description": "Diagonal matrix elements of the Kohn-Sham energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_spin_channels",
                  "n_kpoints",
                  "n_bands"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 17,
                "m_parent_sub_section": "quantities",
                "name": "value_ks_xc",
                "description": "Diagonal matrix elements of the Kohn-Sham exchange-correlation energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_spin_channels",
                  "n_kpoints",
                  "n_bands"
                ],
                "unit": "joule"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "band_gap",
                "sub_section": "/packages/10/section_definitions/12",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 14,
            "m_parent_sub_section": "section_definitions",
            "name": "BandStructure",
            "description": "This section stores information on a band structure evaluation along one-dimensional pathways in the $k$ or $q$ (reciprocal) space given in section_band_segment.\nEigenvalues calculated at the actual $k$-mesh used for energy_total evaluations,\ncan be found in the eigenvalues section.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "path_standard",
                "description": "String to specify the standard used for the kpoints path within bravais\nlattice.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "reciprocal_cell",
                "description": "The reciprocal cell within which the band structure is calculated.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3,
                  3
                ],
                "unit": "1 / meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "energy_fermi",
                "description": "Fermi energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "band_gap",
                "sub_section": "/packages/10/section_definitions/12",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "segment",
                "sub_section": "/packages/10/section_definitions/13",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 15,
            "m_parent_sub_section": "section_definitions",
            "name": "DosFingerprint",
            "description": "Section for the fingerprint of the electronic density-of-states (DOS). DOS fingerprints are a modification of the D-Fingerprints reported in Chem. Mater. 2015,\n27, 3, 735\u2013743 (doi:10.1021/cm503507h). The fingerprint consists of a binary\nrepresentation of the DOS, that is used to evaluate the similarity of materials based\non their electronic structure.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "bins",
                "description": "Byte representation of the DOS fingerprint.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "indices",
                "description": "Indices used to compare DOS fingerprints of different energy ranges.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  2
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "stepsize",
                "description": "Stepsize of interpolation in the first step of the generation of DOS fingerprints.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "filling_factor",
                "description": "Proportion of 1 bins in the DOS fingerprint.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "grid_id",
                "description": "Identifier of the DOS grid that was used for the creation of the fingerprint.\nSimilarity can only be calculated if the same grid was used for both fingerprints.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 16,
            "m_parent_sub_section": "section_definitions",
            "name": "DosValues",
            "description": "Section containing information regarding the values of the density of states (DOS).",
            "base_sections": [
              "/packages/10/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "phonon_mode",
                "description": "Phonon mode corresponding to the DOS used for phonon projections.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "normalization_factor",
                "description": "Normalization factor for DOS values to get a cell-independent intensive DOS,\ndefined as the DOS integral from the lowest energy state to the Fermi level for a neutrally charged system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Values of DOS, i.e. number of states for a given energy. The set of discrete\nenergy values is given in energies.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_energies"
                ],
                "unit": "1 / joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "value_integrated",
                "description": "A cumulative DOS starting from the mimunum energy available up to the energy level specified in `energies`.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_energies"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 17,
            "m_parent_sub_section": "section_definitions",
            "name": "Dos",
            "description": "Section containing information of an electronic-energy or phonon density of states (DOS) evaluation per spin channel.\n\nIt includes the total DOS and the projected DOS values. We differentiate `species_projected` as the\nprojected DOS for same atomic species, `atom_projected` as the projected DOS for different\natoms in the cell, and `orbital_projected` as the projected DOS for the orbitals of each\natom. These are hierarchically connected as:\n\n    atom_projected = sum_{orbitals} orbital_projected\n\n    species_projected = sum_{atoms} atom_projected\n\n    total = sum_{species} species_projected",
            "base_sections": [
              "/packages/10/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_energies",
                "description": "Gives the number of energy values for the DOS, see energies.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "energies",
                "description": "Contains the set of discrete energy values for the DOS.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_energies"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "energy_fermi",
                "description": "Fermi energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "energy_ref",
                "description": "Energy level denoting the origin along the energy axis, used for comparison and visualization.\nIt is defined as the energy_highest_occupied and does not necessarily coincide with energy_fermi.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "spin_channel",
                "description": "Spin channel of the corresponding DOS. It can take values of 0 or 1.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "total",
                "sub_section": "/packages/10/section_definitions/16",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "species_projected",
                "sub_section": "/packages/10/section_definitions/16",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "atom_projected",
                "sub_section": "/packages/10/section_definitions/16",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 3,
                "m_parent_sub_section": "sub_sections",
                "name": "orbital_projected",
                "sub_section": "/packages/10/section_definitions/16",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 4,
                "m_parent_sub_section": "sub_sections",
                "name": "fingerprint",
                "sub_section": "/packages/10/section_definitions/15",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 5,
                "m_parent_sub_section": "sub_sections",
                "name": "band_gap",
                "sub_section": "/packages/10/section_definitions/12",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 18,
            "m_parent_sub_section": "section_definitions",
            "name": "ElectronicStructureProvenance",
            "description": "\n    ",
            "base_sections": [
              "/packages/26/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "dos",
                "description": "",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/10/section_definitions/16"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "band_structure",
                "description": "",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/10/section_definitions/13"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "methodology",
                "description": "Reference to the specific method section.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/8/section_definitions/44"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 19,
            "m_parent_sub_section": "section_definitions",
            "name": "BandGap",
            "description": "\n        Contains information for each present spin channel.\n        ",
            "base_sections": [
              "/packages/10/section_definitions/12"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "provenance",
                "sub_section": "/packages/10/section_definitions/18",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 20,
            "m_parent_sub_section": "section_definitions",
            "name": "MultipolesValues",
            "description": "Section containing the values of the multipoles projected unto an atom or orbital.",
            "base_sections": [
              "/packages/10/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Value of the multipole.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 21,
            "m_parent_sub_section": "section_definitions",
            "name": "MultipolesEntry",
            "description": "Section describing a multipole term. The unit of the values are given by C * m ^ n, where n = 1 for dipole, 2 for quadrupole, etc.",
            "base_sections": [
              "/packages/10/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "origin",
                "description": "Origin in cartesian space.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3
                ],
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_multipoles",
                "description": "Number of multipoles.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Value of the multipoles projected unto the atoms.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_atoms",
                  "n_multipoles"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "total",
                "description": "Total value of the multipoles.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_multipoles"
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "orbital_projected",
                "sub_section": "/packages/10/section_definitions/20",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 22,
            "m_parent_sub_section": "section_definitions",
            "name": "Multipoles",
            "description": "Section containing the multipoles (dipoles, quadrupoles, ...) for each atom.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "kind",
                "description": "Kind of the multipoles being described.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "dipole",
                "sub_section": "/packages/10/section_definitions/21",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "quadrupole",
                "sub_section": "/packages/10/section_definitions/21",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "octupole",
                "sub_section": "/packages/10/section_definitions/21",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 3,
                "m_parent_sub_section": "sub_sections",
                "name": "higher_order",
                "sub_section": "/packages/10/section_definitions/21",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 23,
            "m_parent_sub_section": "section_definitions",
            "name": "Thermodynamics",
            "description": "Section containing results related to a thermodynamics calculation.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "enthalpy",
                "description": "Value of the calculated enthalpy per cell i.e. energy_total + pressure * volume.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "entropy",
                "description": "Value of the entropy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule / kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "chemical_potential",
                "description": "Value of the chemical potential.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "kinetic_energy",
                "description": "Value of the kinetic energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "potential_energy",
                "description": "Value of the potential energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "internal_energy",
                "description": "Value of the internal energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "vibrational_free_energy_at_constant_volume",
                "description": "Value of the vibrational free energy per cell unit at constant volume.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "pressure",
                "description": "Value of the pressure of the system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "temperature",
                "description": "Value of the temperature of the system at which the properties are calculated.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "volume",
                "description": "Value of the volume of the system at which the properties are calculated.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter ** 3"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "heat_capacity_c_v",
                "description": "Stores the heat capacity per cell unit at constant volume.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule / kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "name": "heat_capacity_c_p",
                "description": "Stores the heat capacity per cell unit at constant pressure.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule / kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "name": "time_step",
                "description": "The number of time steps with respect to the start of the calculation.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 24,
            "m_parent_sub_section": "section_definitions",
            "name": "Volumetric",
            "description": "Section defining a set of volumetric data on a uniform real-space grid. Kind should be specified if the data is not explicitly defined by a metainfo class.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "kind",
                "description": "The kind of function if not already defined.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "multiplicity",
                "description": "Number of functions stored.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_x",
                "description": "number of points along x axis",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "n_y",
                "description": "number of points along y axis",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "n_z",
                "description": "number of points along z axis",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "displacements",
                "description": "displacement vectors between grid points along each axis; same indexing rules as\nlattice_vectors.  In many cases, displacements and number of points are related to\nlattice_vectors through: [displacement] * [number of points + N] =\n[lattice_vector],where N is 1 for periodic directions and 0 for non-periodic ones",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3,
                  3
                ],
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "origin",
                "description": "location of the first grid point; same coordinate system as atom_positions when\napplicable.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3
                ],
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Values of the volumetric data defined by kind.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "multiplicity",
                  "n_x",
                  "n_y",
                  "n_z"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 25,
            "m_parent_sub_section": "section_definitions",
            "name": "PotentialValue",
            "description": "Section containing the values of the potential evaluated on a uniform real-space grid.",
            "base_sections": [
              "/packages/10/section_definitions/24"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Values of the potential evaluated at each grid point.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "multiplicity",
                  "n_x",
                  "n_y",
                  "n_z"
                ],
                "unit": "joule / meter ** 3"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 26,
            "m_parent_sub_section": "section_definitions",
            "name": "Potential",
            "description": "Section containing all potential types.",
            "base_sections": [
              "/packages/10/section_definitions/24"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "effective",
                "sub_section": "/packages/10/section_definitions/25",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "hartree",
                "sub_section": "/packages/10/section_definitions/25",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 27,
            "m_parent_sub_section": "section_definitions",
            "name": "Density",
            "description": "Section containing the values of the density evaluated on a uniform real-space grid.",
            "base_sections": [
              "/packages/10/section_definitions/24"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Values of the potential evaluated at each grid point.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "multiplicity",
                  "n_x",
                  "n_y",
                  "n_z"
                ],
                "unit": "1 / meter ** 3"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "value_hdf5",
                "description": "Value of the charge density written on HDF5.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.datamodel.hdf5.HDF5Dataset"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 28,
            "m_parent_sub_section": "section_definitions",
            "name": "Spectra",
            "description": "Section containing the spectra properties.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "A string identifier for the type of spectrum: XAS, RIXS, XES, ARPES, etc.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_energies",
                "description": "Number of excited states.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "excitation_energies",
                "description": "Excitation energies.",
                "categories": [
                  "/packages/10/category_definitions/3"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_energies"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "energy_zero_ref",
                "description": "Reference energy to set the origin of the spectra to 0 eV.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "intensities",
                "description": "Excitation intensities in arbitrary units.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_energies"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "intensities_units",
                "description": "Units in which the intensities of the spectra are returned by a calculation. The\ntypical units for the dielectric constant are `F/m`.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "oscillator_strengths",
                "description": "Excited states oscillator strengths.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_energies"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "transition_dipole_moments",
                "description": "Transition dipole moments.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_energies",
                  3
                ],
                "unit": "coulomb * meter"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "provenance",
                "sub_section": "/packages/10/section_definitions/18",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 29,
            "m_parent_sub_section": "section_definitions",
            "name": "GreensFunctions",
            "description": "Green's functions properties in different time/frequency basis.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "Type of Green's function calculated from the mapping of the Hubbard-Kanamori model\ninto the Anderson impurity model. These calculations are converged if both types of\nGreen's functions converge to each other (G_impurity == G_lattice).",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "impurity",
                    "lattice"
                  ]
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "matsubara_freq",
                "description": "Matsubara frequencies (imaginary frequencies). Can be either positives or both positives\nand negatives.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "tau",
                "description": "Imaginary times.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_tau"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "frequencies",
                "description": "Real space frequencies.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_frequencies"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "chemical_potential",
                "description": "Chemical potential.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "self_energy_iw",
                "description": "Self-energy tensor in Matsubara frequencies.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "complex128"
                },
                "shape": [
                  "n_atoms_per_unit_cell",
                  2,
                  "n_correlated_orbitals",
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "greens_function_iw",
                "description": "Green's function tensor in Matsubara frequencies.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "complex128"
                },
                "shape": [
                  "n_atoms_per_unit_cell",
                  2,
                  "n_correlated_orbitals",
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "hybridization_function_iw",
                "description": "Hybridization function tensor in Matsubara frequencies.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "complex128"
                },
                "shape": [
                  "n_atoms_per_unit_cell",
                  2,
                  "n_correlated_orbitals",
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "greens_function_tau",
                "description": "Green's function tensor in tau (imaginary time).",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "complex128"
                },
                "shape": [
                  "n_atoms_per_unit_cell",
                  2,
                  "n_correlated_orbitals",
                  "n_tau"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "self_energy_freq",
                "description": "Self-energy tensor in real frequencies.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "complex128"
                },
                "shape": [
                  "n_atoms_per_unit_cell",
                  2,
                  "n_correlated_orbitals",
                  "n_frequencies"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "greens_function_freq",
                "description": "Green's function tensor in real frequencies.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "complex128"
                },
                "shape": [
                  "n_atoms_per_unit_cell",
                  2,
                  "n_correlated_orbitals",
                  "n_frequencies"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "name": "hybridization_function_freq",
                "description": "Hybridization function tensor in real frequencies.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "complex128"
                },
                "shape": [
                  "n_atoms_per_unit_cell",
                  2,
                  "n_correlated_orbitals",
                  "n_frequencies"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "name": "orbital_occupations",
                "description": "Orbital occupation per correlated atom in the unit cell and per spin.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_atoms_per_unit_cell",
                  2,
                  "n_correlated_orbitals"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 13,
                "m_parent_sub_section": "quantities",
                "name": "quasiparticle_weights",
                "description": "Quasiparticle weights of each orbital per site and spin. Calculated from:\n    Z = inv(1.0 - d [Re Sigma] / dw at w=0)\nit takes values \u2208 [0.0, 1.0], being Z=1 non-correlated, and Z=0 in a Mott state.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_atoms_per_unit_cell",
                  2,
                  "n_correlated_orbitals"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 30,
            "m_parent_sub_section": "section_definitions",
            "name": "VibrationalFrequenciesValues",
            "description": "Section describing a vibrational spectrum.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "kind",
                "description": "Kind of the vibration.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "description",
                "description": "Short description of the vibration.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_vibrations",
                "description": "Number of values in the vibration spectrum.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "activity",
                "description": "Describes the activity corresponding to each of the value of the vibration\nspectrum.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "n_vibrations"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "intensity",
                "description": "Intensity of the vibration.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_vibrations"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 31,
            "m_parent_sub_section": "section_definitions",
            "name": "VibrationalFrequencies",
            "description": "Section containing results related to vibrational frequencies.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_frequencies",
                "description": "Number of vibration frequencies",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Values of vibrational frequencies (m-1)",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_frequencies"
                ],
                "unit": "1 / meter"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "raman",
                "sub_section": "/packages/10/section_definitions/30",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "infrared",
                "sub_section": "/packages/10/section_definitions/30",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 32,
            "m_parent_sub_section": "section_definitions",
            "name": "RadiusOfGyrationValues",
            "description": "Section containing information regarding the values of radius of gyration (Rg).",
            "base_sections": [
              "/packages/10/section_definitions/3"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Value of Rg.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 33,
            "m_parent_sub_section": "section_definitions",
            "name": "RadiusOfGyration",
            "description": "Section containing information about the calculation of radius of gyration (Rg).",
            "base_sections": [
              "/packages/10/section_definitions/2"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "radius_of_gyration_values",
                "sub_section": "/packages/10/section_definitions/32",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 34,
            "m_parent_sub_section": "section_definitions",
            "name": "MagneticShielding",
            "description": "Section containing the information of magnetic shielding tensors. This is the nuclear response of a material to shield the effects of an applied external field. It is:\n\n    B_induced = - magnetic_shielding * B_external\n\nThe isotropic part can be calculated as 1 / 3 * Tr(magnetic_shielding).\n\nSee, e.g, https://pubs.acs.org/doi/10.1021/cr300108a.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Value of the magnetic shielding tensor per atom. The first index runs for all the\natoms in the unit cell, while 3x3 refers to each axis direction. This quantity\nrelates with the induced magnetic field in the presence of an external magnetic as:\n\n    B_induced = - magnetic_shielding * B_external",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_atoms",
                  3,
                  3
                ],
                "unit": "dimensionless"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "isotropic_value",
                "description": "Value of the isotropic part of the magnetic shielding tensor per atom. The first\nindex runs for all the atoms in the unit cell. This quantity relates with magnetic\nshielding tensor as:\n\n    isotropic_value = 1 / 3 * Tr(value)\n\nThis part is relevant for solution state NMR or for powdered solids under magnetic\nangle spinning conditions.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_atoms"
                ],
                "unit": "dimensionless"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 35,
            "m_parent_sub_section": "section_definitions",
            "name": "ElectricFieldGradient",
            "description": "Section containing the information of electric field gradient tensors. These tensors are relevant for nuclear magnetic responses and address the interaction between the\nquadrupole moment of the nucleus and the electric field gradient (EFG) at the nucleus\nposition generated by the surrounding charges.\n\nThe eigenvalues of these tensors can be used to compute the quadrupolar coupling constant\nand the asymmetry parameter.\n\nSee, e.g, https://pubs.acs.org/doi/10.1021/cr300108a.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "contribution",
                "description": "Type of contribution to the electric field gradient (EFG). The total EFG is\ncomposed of `local` and `non_local` contributions.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "local",
                    "non_local",
                    "total"
                  ]
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Value of the electric field gradient (EFG) for each `contribution` per unit area.\nThe first index runs for all the atoms in the unit cell, while 3x3 refers to each\naxis direction.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_atoms",
                  3,
                  3
                ],
                "unit": "volt / meter ** 2"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "quadrupolar_coupling_constant",
                "description": "Quadrupolar coupling constant for each atom in the unit cell. It is computed from\nthe eigenvalues of the EFG tensor as:\n\n    quadrupolar_coupling_constant = efg_zz * e * Z / h\n\nwhere efg_zz is the largest eigenvalue of the EFG tensor, Z is the atomic number.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_atoms"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "asymmetry_parameter",
                "description": "Asymmetry parameter for each atom in the unit cell. It is computed from the\neigenvalues of the EFG tensor as:\n\n    asymmetry_parameter = (efg_xx - efg_yy) / efg_zz\n\nwhere efg_xx, efg_yy and efg_zz are the eigenvalues of the EFG tensor ordered\nsuch that |efg_zz| > |efg_yy| > |efg_xx|.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_atoms"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 36,
            "m_parent_sub_section": "section_definitions",
            "name": "SpinSpinCoupling",
            "description": "Section containing the information of spin-spin couplings. These are the indirect interactions between 2 nuclear spins that arises from hyperfine interactions between\nthe nuclei and local electrons.\n\nSynonyms:\n    - IndirectSpinSpinCoupling",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "contribution",
                "description": "Type of contribution to the indirect spin-spin coupling. The total indirect spin-spin\ncoupling is composed of:\n\n    `total` = `direct_dipolar` + J_coupling\n\nWhere the J_coupling is:\n    J_coupling = `fermi_contact`\n                + `spin_dipolar`\n                + `orbital_diamagnetic`\n                + `orbital_paramagnetic`\n\nSee https://pubs.acs.org/doi/full/10.1021/cr300108a.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "direct_dipolar",
                    "fermi_contact",
                    "orbital_diamagnetic",
                    "orbital_paramagnetic",
                    "spin_dipolar",
                    "total"
                  ]
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Value of the indirect spin-spin couplings for each contribution. The first and second\nindices run for all the combinations of pairs of atoms in the unit cell, while\n3x3 refers to each axis direction.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_atoms",
                  "n_atoms",
                  3,
                  3
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "reduced_value",
                "description": "Reduced value of the indirect spin-spin couplings for each contribution. The first and second\nindices run for all the combinations of pairs of atoms in the unit cell, while\n3x3 refers to each axis direction. It relates with the normal value as:\n\n    reduced_value = value / (gyromagnetic_ratio_i * gyromagnetic_ratio_j * 2 * np.pi * hbar)\n\nwhere i, j runs for each atom in the unit cell.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_atoms",
                  "n_atoms",
                  3,
                  3
                ],
                "unit": "kelvin ** 2 / joule"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 37,
            "m_parent_sub_section": "section_definitions",
            "name": "MagneticSusceptibility",
            "description": "Section containing the information of magnetic susceptibility tensor. Degree of magnetization of a material in the presence of a magnetic field.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "scale_dimension",
                "description": "Identifier of the scale dimension of the magnetic susceptibility tensor.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "macroscopic",
                    "microscopic"
                  ]
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Value of the magnetic susceptibility. The 3x3 refers to each axis direction.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3,
                  3
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 38,
            "m_parent_sub_section": "section_definitions",
            "name": "BaseCalculation",
            "description": "Contains computed properties of a configuration as defined by the corresponding section system and with the simulation method defined by section method. The\nreferences to the system and method sections are given by system_ref and method_ref,\nrespectively.\n\nProperties derived from a group of configurations are not included in this section but\ncan be accessed in section workflow.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "system_ref",
                "description": "Links the calculation to a section system.",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/9/section_definitions/9"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "method_ref",
                "description": "Links the calculation to a section method.",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/8/section_definitions/44"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "starting_calculation_ref",
                "description": "Links the current section calculation to the starting calculation.",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/10/section_definitions/40"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "n_references",
                "description": "Number of references to the current section calculation.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "calculations_ref",
                "description": "Links the current section calculation to other section calculations. Such a link\nis necessary for example if the referenced calculation is a self-consistent\ncalculation that serves as a starting point or a calculation is part of a domain\ndecomposed simulation that needs to be connected.",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/10/section_definitions/40"
                },
                "shape": [
                  "n_references"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "calculations_path",
                "description": "Links the current section calculation to other section calculations. Such a link\nis necessary for example if the referenced calculation is a self-consistent\ncalculation that serves as a starting point or a calculation is part of a domain\ndecomposed simulation that needs to be connected.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "n_references"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "calculation_converged",
                "description": "Indicates whether a the calculation is converged.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "hessian_matrix",
                "description": "The matrix with the second derivative of the energy with respect to atom\ndisplacements.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "number_of_atoms",
                  "number_of_atoms",
                  3,
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "spin_S2",
                "description": "Stores the value of the total spin moment operator $S^2$ for the converged\nwavefunctions calculated with the XC_method. It can be used to calculate the spin\ncontamination in spin-unrestricted calculations.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "time_calculation",
                "description": "Stores the wall-clock time needed to complete the calculation i.e. the real time\nthat has elapsed from start to end of calculation.",
                "categories": [
                  "/packages/10/category_definitions/2",
                  "/packages/10/category_definitions/1"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "time_physical",
                "description": "The elapsed real time at the end of the calculation with respect to the start of\nthe simulation.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "name": "volume",
                "description": "Value of the volume of the system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter ** 3"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "name": "density",
                "description": "Value of the density of the system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "kilogram / meter ** 3"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 13,
                "m_parent_sub_section": "quantities",
                "name": "pressure",
                "description": "Value of the pressure of the system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 14,
                "m_parent_sub_section": "quantities",
                "name": "pressure_tensor",
                "description": "Value of the pressure in terms of the x, y, z components of the simulation cell.\nTypically calculated as the difference between the kinetic energy and the virial.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3,
                  3
                ],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 15,
                "m_parent_sub_section": "quantities",
                "name": "virial_tensor",
                "description": "Value of the virial in terms of the x, y, z components of the simulation cell.\nTypically calculated as the cross product between positions and forces.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3,
                  3
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 16,
                "m_parent_sub_section": "quantities",
                "name": "enthalpy",
                "description": "Value of the calculated enthalpy per cell i.e. energy_total + pressure * volume.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 17,
                "m_parent_sub_section": "quantities",
                "name": "temperature",
                "description": "Value of the temperature of the system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 18,
                "m_parent_sub_section": "quantities",
                "name": "step",
                "description": "The number of time steps with respect to the start of the simulation.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 19,
                "m_parent_sub_section": "quantities",
                "name": "time",
                "description": "The elapsed simulated physical time since the start of the simulation.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "second"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "energy",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/10/section_definitions/5"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "forces",
                "sub_section": "/packages/10/section_definitions/7"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "stress",
                "sub_section": "/packages/10/section_definitions/9"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 3,
                "m_parent_sub_section": "sub_sections",
                "name": "band_gap",
                "sub_section": "/packages/10/section_definitions/19",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 4,
                "m_parent_sub_section": "sub_sections",
                "name": "dos_electronic",
                "sub_section": "/packages/10/section_definitions/17",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 5,
                "m_parent_sub_section": "sub_sections",
                "name": "dos_phonon",
                "sub_section": "/packages/10/section_definitions/17",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 6,
                "m_parent_sub_section": "sub_sections",
                "name": "eigenvalues",
                "sub_section": "/packages/10/section_definitions/13",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 7,
                "m_parent_sub_section": "sub_sections",
                "name": "band_structure_electronic",
                "sub_section": "/packages/10/section_definitions/14",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 8,
                "m_parent_sub_section": "sub_sections",
                "name": "band_structure_phonon",
                "sub_section": "/packages/10/section_definitions/14",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 9,
                "m_parent_sub_section": "sub_sections",
                "name": "thermodynamics",
                "sub_section": "/packages/10/section_definitions/23",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 10,
                "m_parent_sub_section": "sub_sections",
                "name": "hopping_matrix",
                "sub_section": "/packages/8/section_definitions/31",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 11,
                "m_parent_sub_section": "sub_sections",
                "name": "spectra",
                "sub_section": "/packages/10/section_definitions/28",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 12,
                "m_parent_sub_section": "sub_sections",
                "name": "greens_functions",
                "sub_section": "/packages/10/section_definitions/29",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 13,
                "m_parent_sub_section": "sub_sections",
                "name": "vibrational_frequencies",
                "sub_section": "/packages/10/section_definitions/31",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 14,
                "m_parent_sub_section": "sub_sections",
                "name": "potential",
                "sub_section": "/packages/10/section_definitions/26",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 15,
                "m_parent_sub_section": "sub_sections",
                "name": "multipoles",
                "sub_section": "/packages/10/section_definitions/22",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 16,
                "m_parent_sub_section": "sub_sections",
                "name": "charges",
                "sub_section": "/packages/10/section_definitions/11",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 17,
                "m_parent_sub_section": "sub_sections",
                "name": "density_charge",
                "sub_section": "/packages/10/section_definitions/27",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 18,
                "m_parent_sub_section": "sub_sections",
                "name": "radius_of_gyration",
                "sub_section": "/packages/10/section_definitions/33",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 19,
                "m_parent_sub_section": "sub_sections",
                "name": "magnetic_shielding",
                "sub_section": "/packages/10/section_definitions/34",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 20,
                "m_parent_sub_section": "sub_sections",
                "name": "electric_field_gradient",
                "sub_section": "/packages/10/section_definitions/35",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 21,
                "m_parent_sub_section": "sub_sections",
                "name": "spin_spin_coupling",
                "sub_section": "/packages/10/section_definitions/36",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 22,
                "m_parent_sub_section": "sub_sections",
                "name": "magnetic_susceptibility",
                "sub_section": "/packages/10/section_definitions/37",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 39,
            "m_parent_sub_section": "section_definitions",
            "name": "ScfIteration",
            "description": "Every scf_iteration section represents a self-consistent field (SCF) iteration, and gives detailed information on the SCF procedure of the specified quantities.",
            "base_sections": [
              "/packages/10/section_definitions/38"
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 40,
            "m_parent_sub_section": "section_definitions",
            "name": "Calculation",
            "description": "Every calculation section contains the values computed during a *single configuration calculation*, i.e. a calculation performed on a given\nconfiguration of the system (as defined in section_system) and a given computational\nmethod (e.g., exchange-correlation method, basis sets, as defined in section_method).\n\nThe link between the current section calculation and the related\nsystem and method sections is established by the values stored in system_ref and\nmethod_ref, respectively.\n\nThe reason why information on the system configuration and computational method is\nstored separately is that several *single configuration calculations* can be performed\non the same system configuration, viz. several system configurations can be evaluated\nwith the same computational method. This storage strategy avoids redundancies.",
            "base_sections": [
              "/packages/10/section_definitions/38"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_scf_iterations",
                "description": "Gives the number of performed self-consistent field (SCF) iterations.",
                "categories": [
                  "/packages/10/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "scf_iteration",
                "sub_section": "/packages/10/section_definitions/39",
                "repeats": true
              }
            ]
          }
        ],
        "category_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Category",
            "m_parent_index": 0,
            "m_parent_sub_section": "category_definitions",
            "name": "ScfInfo",
            "description": "Contains information on the self-consistent field (SCF) procedure, i.e. the number of\nSCF iterations (number_of_scf_iterations) or a section_scf_iteration section with\ndetailed information on the SCF procedure of specified quantities."
          },
          {
            "m_def": "nomad.metainfo.metainfo.Category",
            "m_parent_index": 1,
            "m_parent_sub_section": "category_definitions",
            "name": "AccessoryInfo",
            "description": "Information that *in theory* should not affect the results of the calculations (e.g.,\ntiming)."
          },
          {
            "m_def": "nomad.metainfo.metainfo.Category",
            "m_parent_index": 2,
            "m_parent_sub_section": "category_definitions",
            "name": "TimeInfo",
            "description": "Stores information on the date and timings of the calculation. They are useful for,\ne.g., debugging or visualization purposes.",
            "categories": [
              "/packages/10/category_definitions/1"
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Category",
            "m_parent_index": 3,
            "m_parent_sub_section": "category_definitions",
            "name": "EnergyValue",
            "description": "This metadata stores an energy value."
          },
          {
            "m_def": "nomad.metainfo.metainfo.Category",
            "m_parent_index": 4,
            "m_parent_sub_section": "category_definitions",
            "name": "EnergyTypeReference",
            "description": "This metadata stores an energy used as reference point.",
            "categories": [
              "/packages/10/category_definitions/3"
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Category",
            "m_parent_index": 5,
            "m_parent_sub_section": "category_definitions",
            "name": "ErrorEstimateContribution",
            "description": "An estimate of a partial quantity contributing to the error for a given quantity."
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 11,
        "m_parent_sub_section": "packages",
        "name": "runschema.run",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "Program",
            "description": "Contains the specifications of the program.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "name",
                "description": "Specifies the name of the program that generated the data.",
                "categories": [
                  "/packages/11/category_definitions/0",
                  "/packages/11/category_definitions/1"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "version",
                "description": "Specifies the official release version of the program that was used.",
                "categories": [
                  "/packages/11/category_definitions/0",
                  "/packages/11/category_definitions/1"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "version_internal",
                "description": "Specifies a program version tag used internally for development purposes.\nAny kind of tagging system is supported, including git commit hashes.",
                "categories": [
                  "/packages/11/category_definitions/1"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "compilation_datetime",
                "description": "Contains the program compilation date and time from *Unix epoch* (00:00:00 UTC on\n1 January 1970) in seconds. For date and times without a timezone, the default\ntimezone GMT is used.",
                "categories": [
                  "/packages/11/category_definitions/0",
                  "/packages/11/category_definitions/1"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "compilation_host",
                "description": "Specifies the host on which the program was compiled.",
                "categories": [
                  "/packages/11/category_definitions/0",
                  "/packages/11/category_definitions/1"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "TimeRun",
            "description": "Contains information on timing information of the run.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "date_end",
                "description": "Stores the end date of the run as time since the *Unix epoch* (00:00:00 UTC on 1\nJanuary 1970) in seconds. For date and times without a timezone, the default\ntimezone GMT is used.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "date_start",
                "description": "Stores the start date of the run as time since the *Unix epoch* (00:00:00 UTC on 1\nJanuary 1970) in seconds. For date and times without a timezone, the default\ntimezone GMT is used.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "cpu1_end",
                "description": "Stores the end time of the run on CPU 1.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "cpu1_start",
                "description": "Stores the start time of the run on CPU 1.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "wall_end",
                "description": "Stores the internal wall-clock time at the end of the run.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "wall_start",
                "description": "Stores the internal wall-clock time from the start of the run.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "second"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "name": "MessageRun",
            "description": "Contains warning, error, and info messages of the run.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "Type of the message. Can be one of warning, error, info, debug.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Value of the message of the computational program, given by type.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 3,
            "m_parent_sub_section": "section_definitions",
            "name": "Run",
            "description": "Every section run represents a single call of a program.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "extending_sections": [
              "/packages/19/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "calculation_file_uri",
                "description": "Contains the nomad uri of a raw the data file connected to the current run. There\nshould be an value for the main_file_uri and all ancillary files.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "clean_end",
                "description": "Indicates whether this run terminated properly (true), or if it was killed or\nexited with an error code unequal to zero (false).",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "raw_id",
                "description": "An optional calculation id, if one is found in the code input/output files.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "starting_run_ref",
                "description": "Links the current section run to a section run containing the calculations from\nwhich the current section starts.",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/11/section_definitions/3"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "n_references",
                "description": "Number of references to the current section calculation.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "runs_ref",
                "description": "Links the the current section to other run sections. Such a link is necessary for\nexample for workflows that may contain a series of runs.",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/11/section_definitions/3"
                },
                "shape": [
                  "n_references"
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "program",
                "sub_section": "/packages/11/section_definitions/0"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "time_run",
                "sub_section": "/packages/11/section_definitions/1"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "message",
                "sub_section": "/packages/11/section_definitions/2"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 3,
                "m_parent_sub_section": "sub_sections",
                "name": "method",
                "sub_section": "/packages/8/section_definitions/44",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 4,
                "m_parent_sub_section": "sub_sections",
                "name": "system",
                "sub_section": "/packages/9/section_definitions/9",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 5,
                "m_parent_sub_section": "sub_sections",
                "name": "calculation",
                "sub_section": "/packages/10/section_definitions/40",
                "repeats": true
              }
            ]
          }
        ],
        "category_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Category",
            "m_parent_index": 0,
            "m_parent_sub_section": "category_definitions",
            "name": "AccessoryInfo",
            "description": "Information that *in theory* should not affect the results of the calculations (e.g.,\ntiming)."
          },
          {
            "m_def": "nomad.metainfo.metainfo.Category",
            "m_parent_index": 1,
            "m_parent_sub_section": "category_definitions",
            "name": "ProgramInfo",
            "description": "Contains information on the program that generated the data, i.e. the program_name,\nprogram_version, program_compilation_host and program_compilation_datetime as direct\nchildren of this field.",
            "categories": [
              "/packages/11/category_definitions/0"
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 12,
        "m_parent_sub_section": "packages",
        "name": "simulationworkflowschema.general",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "SimulationWorkflowMethod",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "SimulationWorkflowResults",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "calculation_result_ref",
                "description": "Reference to calculation result. In the case of serial workflows, this corresponds\nto the final step in the simulation. For the parallel case, it refers to the reference calculation.",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/10/section_definitions/40"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_calculations",
                "description": "Number of calculations in workflow.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "calculations_ref",
                "description": "List of references to each calculation section in the simulation.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/10/section_definitions/40"
                },
                "shape": [
                  "n_calculations"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "name": "SimulationWorkflow",
            "base_sections": [
              "/packages/27/section_definitions/3"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "method",
                "sub_section": "/packages/12/section_definitions/0"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "results",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/12/section_definitions/1"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 3,
            "m_parent_sub_section": "section_definitions",
            "name": "ParallelSimulation",
            "base_sections": [
              "/packages/12/section_definitions/2"
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 4,
            "m_parent_sub_section": "section_definitions",
            "name": "SerialSimulation",
            "base_sections": [
              "/packages/12/section_definitions/2"
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 5,
            "m_parent_sub_section": "section_definitions",
            "name": "BeyondDFT",
            "description": "Base class used to normalize standard workflows beyond DFT containing two specific SinglePoint tasks (GWWorkflow = DFT + GW, DMFTWorkflow = DFT + DMFT,\nMaxEntWorkflow = DMFT + MaxEnt, and so on) and store the outputs in the self.results\nsection.",
            "base_sections": [
              "/packages/12/section_definitions/4"
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 6,
            "m_parent_sub_section": "section_definitions",
            "name": "DFTMethod",
            "description": "Base class defining the DFT input methodologies: starting XC functional and electrons representation (basis set).",
            "base_sections": [
              "/packages/12/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "starting_point",
                "description": "Reference to the starting point (XC functional or HF) used.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/8/section_definitions/22"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "electrons_representation",
                "description": "Reference to the basis set used.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/8/section_definitions/18"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 7,
            "m_parent_sub_section": "section_definitions",
            "name": "ElectronicStructureOutputs",
            "description": "Base class defining the typical output properties of any electronic structure SinglePoint calculation: DFT, TB, DMFT, GW, MaxEnt, XS.",
            "base_sections": [
              "/packages/12/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "band_gap",
                "description": "Reference to the band gap section.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/10/section_definitions/19"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "dos",
                "description": "Reference to the density of states section.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/10/section_definitions/17"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "band_structure",
                "description": "Reference to the band structure section.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/10/section_definitions/14"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "greens_functions",
                "description": "Ref to the Green functions section.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/10/section_definitions/29"
                },
                "shape": [
                  "*"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 8,
            "m_parent_sub_section": "section_definitions",
            "name": "MagneticOutputs",
            "description": "Base class defining the typical output properties of magnetic SinglePoint calculations.",
            "base_sections": [
              "/packages/12/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "magnetic_shielding",
                "description": "Reference to the magnetic shielding tensors.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/10/section_definitions/34"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "electric_field_gradient",
                "description": "Reference to the electric field gradient tensors.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/10/section_definitions/35"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "spin_spin_coupling",
                "description": "Reference to the spin-spin coupling tensors.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/10/section_definitions/36"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "magnetic_susceptibility_nmr",
                "description": "Reference to the magnetic susceptibility tensors.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/10/section_definitions/37"
                },
                "shape": [
                  "*"
                ]
              }
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 13,
        "m_parent_sub_section": "packages",
        "name": "nomad.datamodel.results",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "SourceInformation",
            "description": "\n        Base class used to easy identification of a property obtained from an experimental\n        setup or from performing a computational simulation.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.magnetic.magnetic_susceptibility.source",
                    "results.properties.magnetic.magnetic_susceptibility.source__suggestion"
                  ]
                },
                "name": "source",
                "description": "Identifier for the source of the data: 'experiment' or 'simulation'.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "experiment",
                    "simulation"
                  ]
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "ElementalComposition",
            "description": "\n        Section containing information about the concentration of an element,\n        given by its atomic and mass fraction within the system or material.\n        ",
            "more": {
              "label_quantity": "element"
            },
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.elemental_composition.element",
                    "results.material.topology.elemental_composition.element__suggestion.suggestion"
                  ]
                },
                "name": "element",
                "description": "The symbol of the element, e.g. 'Pb'.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "Ac",
                    "Ag",
                    "Al",
                    "Am",
                    "Ar",
                    "As",
                    "At",
                    "Au",
                    "B",
                    "Ba",
                    "Be",
                    "Bh",
                    "Bi",
                    "Bk",
                    "Br",
                    "C",
                    "Ca",
                    "Cd",
                    "Ce",
                    "Cf",
                    "Cl",
                    "Cm",
                    "Cn",
                    "Co",
                    "Cr",
                    "Cs",
                    "Cu",
                    "Db",
                    "Ds",
                    "Dy",
                    "Er",
                    "Es",
                    "Eu",
                    "F",
                    "Fe",
                    "Fl",
                    "Fm",
                    "Fr",
                    "Ga",
                    "Gd",
                    "Ge",
                    "H",
                    "He",
                    "Hf",
                    "Hg",
                    "Ho",
                    "Hs",
                    "I",
                    "In",
                    "Ir",
                    "K",
                    "Kr",
                    "La",
                    "Li",
                    "Lr",
                    "Lu",
                    "Lv",
                    "Mc",
                    "Md",
                    "Mg",
                    "Mn",
                    "Mo",
                    "Mt",
                    "N",
                    "Na",
                    "Nb",
                    "Nd",
                    "Ne",
                    "Nh",
                    "Ni",
                    "No",
                    "Np",
                    "O",
                    "Og",
                    "Os",
                    "P",
                    "Pa",
                    "Pb",
                    "Pd",
                    "Pm",
                    "Po",
                    "Pr",
                    "Pt",
                    "Pu",
                    "Ra",
                    "Rb",
                    "Re",
                    "Rf",
                    "Rg",
                    "Rh",
                    "Rn",
                    "Ru",
                    "S",
                    "Sb",
                    "Sc",
                    "Se",
                    "Sg",
                    "Si",
                    "Sm",
                    "Sn",
                    "Sr",
                    "Ta",
                    "Tb",
                    "Tc",
                    "Te",
                    "Th",
                    "Ti",
                    "Tl",
                    "Tm",
                    "Ts",
                    "U",
                    "V",
                    "W",
                    "Xe",
                    "Y",
                    "Yb",
                    "Zn",
                    "Zr"
                  ]
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "mass",
                "description": "The (average) mass of the element.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "kilogram"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.elemental_composition.atomic_fraction"
                  ]
                },
                "name": "atomic_fraction",
                "description": "The atomic fraction of the element in the system it is contained within.\nPer definition a positive value less than or equal to 1.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.elemental_composition.mass_fraction"
                  ]
                },
                "name": "mass_fraction",
                "description": "The mass fraction of the element in the system it is contained within.\nPer definition a positive value less than or equal to 1.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "name": "LatticeParameters",
            "description": "\n        Lattice parameters of a cell.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.structures.structure_primitive.lattice_parameters.a"
                  ]
                },
                "name": "a",
                "description": "Length of the first basis vector.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.structures.structure_primitive.lattice_parameters.b"
                  ]
                },
                "name": "b",
                "description": "Length of the second basis vector.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.structures.structure_primitive.lattice_parameters.c"
                  ]
                },
                "name": "c",
                "description": "Length of the third basis vector.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.structures.structure_primitive.lattice_parameters.alpha"
                  ]
                },
                "name": "alpha",
                "description": "Angle between second and third basis vector.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "radian"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.structures.structure_primitive.lattice_parameters.beta"
                  ]
                },
                "name": "beta",
                "description": "Angle between first and third basis vector.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "radian"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.structures.structure_primitive.lattice_parameters.gamma"
                  ]
                },
                "name": "gamma",
                "description": "Angle between first and second basis vector.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "radian"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 3,
            "m_parent_sub_section": "section_definitions",
            "name": "WyckoffSet",
            "description": "\n        Section for storing Wyckoff set information. Only available for\n        conventional cells that have undergone symmetry analysis.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "wyckoff_letter",
                "description": "The Wyckoff letter for this set.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "indices",
                "description": "Indices of the atoms belonging to this group.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "1..*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "element",
                "description": "Chemical element at this Wyckoff position.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "x",
                "description": "The free parameter x if present.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "y",
                "description": "The free parameter y if present.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "z",
                "description": "The free parameter z if present.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 4,
            "m_parent_sub_section": "section_definitions",
            "name": "Structure",
            "description": "\n        Describes an atomistic structure.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "dimension_types",
                "description": "List of three integers. For each of the three directions indicated by\nthe three lattice vectors (see property lattice_vectors). This list\nindicates if the direction is periodic (value 1) or non-periodic (value\n0). Note: the elements in this list each refer to the direction of the\ncorresponding entry in lattice_vectors and not the Cartesian x, y, z\ndirections.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": [
                  3
                ],
                "default": [
                  0,
                  0,
                  0
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.structures.structure_primitive.nperiodic_dimensions"
                  ]
                },
                "name": "nperiodic_dimensions",
                "description": "An integer specifying the number of periodic dimensions in the\nstructure, equivalent to the number of non-zero entries in\ndimension_types.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "lattice_vectors",
                "description": "The three lattice vectors in Cartesian coordinates.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3,
                  3
                ],
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "cartesian_site_positions",
                "description": "Cartesian positions of each site. A site is an atom, a site potentially\noccupied by an atom, or a placeholder for a virtual mixture of atoms\n(e.g., in a virtual crystal approximation).",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_sites",
                  3
                ],
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.structures.structure_primitive.n_sites"
                  ]
                },
                "name": "n_sites",
                "description": "An integer specifying the length of the cartesian_site_positions property.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "default": 0,
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "species_at_sites",
                "description": "Name of the species at each site (where values for sites are specified with the same\norder of the cartesian_site_positions property). The properties of the species are\nfound in the species property.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "n_sites"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.structures.structure_primitive.cell_volume"
                  ]
                },
                "name": "cell_volume",
                "description": "Volume of the cell.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "meter ** 3"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "atomic_density",
                "description": "Atomic density of the material (atoms/volume).'",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "1 / meter ** 3"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "mass_density",
                "description": "Mass density of the material.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "kilogram / meter ** 3"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "species",
                "sub_section": "/packages/28/section_definitions/0",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "lattice_parameters",
                "sub_section": "/packages/13/section_definitions/2"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "wyckoff_sets",
                "sub_section": "/packages/13/section_definitions/3",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 5,
            "m_parent_sub_section": "section_definitions",
            "name": "Structures",
            "description": "\n        Contains full atomistic representations of the material in different\n        forms.\n        ",
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "structure_original",
                "description": "Contains a selected representative structure from the the original\ndata.",
                "sub_section": "/packages/13/section_definitions/4",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "structure_conventional",
                "description": "Contains the conventional structure that is derived from\nstructure_original. This conventional stucture has been idealized and\nthe conventions employed by spglib are used.",
                "sub_section": "/packages/13/section_definitions/4",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "structure_primitive",
                "description": "Contains the primitive structure that is derived from\nstructure_original. This primitive stucture has been idealized and the\nconventions employed by spglib are used.",
                "sub_section": "/packages/13/section_definitions/4",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 6,
            "m_parent_sub_section": "section_definitions",
            "name": "Symmetry",
            "description": "\n        Section containing information about the symmetry of the material. All\n        of these properties are derived by running a symmetry analysis on a\n        representative geometry from the original data. This original geometry\n        is stored in results.properties together with the primitive and\n        conventional structures.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.symmetry.bravais_lattice",
                    "results.material.symmetry.bravais_lattice__suggestion.suggestion"
                  ]
                },
                "name": "bravais_lattice",
                "description": "Identifier for the Bravais lattice in Pearson notation. The first lowercase letter\nidentifies the crystal family and can be one of the following: a (triclinic), b\n(monoclinic), o (orthorhombic), t (tetragonal), h (hexagonal) or c (cubic). The\nsecond uppercase letter identifies the centring and can be one of the following: P\n(primitive), S (face centred), I (body centred), R (rhombohedral centring) or F\n(all faces centred).",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "aP",
                    "cF",
                    "cI",
                    "cP",
                    "hP",
                    "hR",
                    "mP",
                    "mS",
                    "oF",
                    "oI",
                    "oP",
                    "oS",
                    "tI",
                    "tP"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.symmetry.crystal_system",
                    "results.material.symmetry.crystal_system__suggestion.suggestion"
                  ]
                },
                "name": "crystal_system",
                "description": "Name of the crystal system.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "cubic",
                    "hexagonal",
                    "monoclinic",
                    "orthorhombic",
                    "tetragonal",
                    "triclinic",
                    "trigonal"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.symmetry.hall_number"
                  ]
                },
                "name": "hall_number",
                "description": "The Hall number for this system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.symmetry.hall_symbol",
                    "results.material.symmetry.hall_symbol__suggestion.suggestion"
                  ]
                },
                "name": "hall_symbol",
                "description": "The Hall symbol for this system.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.symmetry.point_group",
                    "results.material.symmetry.point_group__suggestion.suggestion"
                  ]
                },
                "name": "point_group",
                "description": "Symbol of the crystallographic point group in the Hermann-Mauguin notation.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.symmetry.space_group_number"
                  ]
                },
                "name": "space_group_number",
                "description": "Specifies the International Union of Crystallography (IUC) number of the 3D space\ngroup of this system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.symmetry.space_group_symbol",
                    "results.material.symmetry.space_group_symbol__suggestion.suggestion"
                  ]
                },
                "name": "space_group_symbol",
                "description": "The International Union of Crystallography (IUC) short symbol of the 3D\nspace group of this system.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.symmetry.prototype_formula"
                  ]
                },
                "name": "prototype_formula",
                "description": "The formula of the prototypical material for this structure.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.symmetry.prototype_aflow_id",
                    "results.material.symmetry.prototype_aflow_id__suggestion.suggestion"
                  ]
                },
                "name": "prototype_aflow_id",
                "description": "The identifier of this structure in the AFLOW encyclopedia of\ncrystallographic prototypes:\nhttp://www.aflowlib.org/prototype-encyclopedia/index.html",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.symmetry.structure_name",
                    "results.material.symmetry.structure_name__suggestion"
                  ]
                },
                "name": "structure_name",
                "description": "A common name for this structure, e.g. fcc, bcc.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "4-member ring",
                    "Heusler",
                    "bcc",
                    "bct",
                    "bct5",
                    "clathrate",
                    "cuprite",
                    "diamond",
                    "fcc",
                    "fct",
                    "half-Heusler",
                    "hcp",
                    "perovskite",
                    "rock salt",
                    "rutile",
                    "simple cubic",
                    "wurtzite",
                    "zincblende"
                  ]
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.symmetry.strukturbericht_designation",
                    "results.material.symmetry.strukturbericht_designation__suggestion.suggestion"
                  ]
                },
                "name": "strukturbericht_designation",
                "description": "Classification of the material according to the historically grown\n'strukturbericht'.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 7,
            "m_parent_sub_section": "section_definitions",
            "name": "Cell",
            "description": "\n        Properties of a unit cell.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.cell.a"
                  ]
                },
                "name": "a",
                "description": "Length of the first basis vector.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.cell.b"
                  ]
                },
                "name": "b",
                "description": "Length of the second basis vector.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.cell.c"
                  ]
                },
                "name": "c",
                "description": "Length of the third basis vector.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.cell.alpha"
                  ]
                },
                "name": "alpha",
                "description": "Angle between second and third basis vector.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "radian"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.cell.beta"
                  ]
                },
                "name": "beta",
                "description": "Angle between first and third basis vector.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "radian"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.cell.gamma"
                  ]
                },
                "name": "gamma",
                "description": "Angle between first and second basis vector.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "radian"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.cell.volume"
                  ]
                },
                "name": "volume",
                "description": "Volume of the cell.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "meter ** 3"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.cell.atomic_density"
                  ]
                },
                "name": "atomic_density",
                "description": "Atomic density of the material (atoms/volume).'",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "1 / meter ** 3"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.cell.mass_density"
                  ]
                },
                "name": "mass_density",
                "description": "Mass density of the material.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "kilogram / meter ** 3"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 8,
            "m_parent_sub_section": "section_definitions",
            "name": "SymmetryNew",
            "description": "\n        Section containing information about the symmetry properties of a\n        conventional cell related to a system.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.symmetry.bravais_lattice",
                    "results.material.topology.symmetry.bravais_lattice__suggestion.suggestion"
                  ]
                },
                "name": "bravais_lattice",
                "description": "Identifier for the Bravais lattice in Pearson notation. The first lowercase letter\nidentifies the crystal family and can be one of the following: a (triclinic), b\n(monoclinic), o (orthorhombic), t (tetragonal), h (hexagonal) or c (cubic). The\nsecond uppercase letter identifies the centring and can be one of the following: P\n(primitive), S (face centred), I (body centred), R (rhombohedral centring) or F\n(all faces centred).",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "aP",
                    "cF",
                    "cI",
                    "cP",
                    "hP",
                    "hR",
                    "mP",
                    "mS",
                    "oF",
                    "oI",
                    "oP",
                    "oS",
                    "tI",
                    "tP"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.symmetry.crystal_system",
                    "results.material.topology.symmetry.crystal_system__suggestion.suggestion"
                  ]
                },
                "name": "crystal_system",
                "description": "Name of the crystal system.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "cubic",
                    "hexagonal",
                    "monoclinic",
                    "orthorhombic",
                    "tetragonal",
                    "triclinic",
                    "trigonal"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.symmetry.hall_number"
                  ]
                },
                "name": "hall_number",
                "description": "The Hall number for this system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.symmetry.hall_symbol",
                    "results.material.topology.symmetry.hall_symbol__suggestion.suggestion"
                  ]
                },
                "name": "hall_symbol",
                "description": "The Hall symbol for this system.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.symmetry.point_group",
                    "results.material.topology.symmetry.point_group__suggestion.suggestion"
                  ]
                },
                "name": "point_group",
                "description": "Symbol of the crystallographic point group in the Hermann-Mauguin notation.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.symmetry.space_group_number"
                  ]
                },
                "name": "space_group_number",
                "description": "Specifies the International Union of Crystallography (IUC) number of the 3D space\ngroup of this system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.symmetry.space_group_symbol",
                    "results.material.topology.symmetry.space_group_symbol__suggestion.suggestion"
                  ]
                },
                "name": "space_group_symbol",
                "description": "The International Union of Crystallography (IUC) short symbol of the 3D\nspace group of this system.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "choice",
                "description": "String that specifies the centering, origin and basis vector settings of the 3D\nspace group that defines the symmetry group of the simulated physical system (see\nsection system). Values are as defined by spglib.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.symmetry.strukturbericht_designation",
                    "results.material.topology.symmetry.strukturbericht_designation__suggestion.suggestion"
                  ]
                },
                "name": "strukturbericht_designation",
                "description": "Classification of the material according to the historically grown\n'strukturbericht'.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "symmetry_method",
                "description": "Identifies the source of the symmetry information contained within this\nsection. If equal to 'spg_normalized' the information comes from a\nnormalization step.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "origin_shift",
                "description": "Vector $\\mathbf{p}$ from the origin of the standardized system to the origin of\nthe original system. Together with the matrix $\\mathbf{P}$, found in\nspace_group_3D_transformation_matrix, the transformation between the standardized\ncoordinates $\\mathbf{x}_s$ and original coordinates $\\mathbf{x}$ is then given\nby $\\mathbf{x}_s = \\mathbf{P} \\mathbf{x} + \\mathbf{p}$.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "name": "transformation_matrix",
                "description": "Matrix $\\mathbf{P}$ that is used to transform the standardized coordinates to the\noriginal coordinates. Together with the vector $\\mathbf{p}$, found in\nspace_group_3D_origin_shift, the transformation between the standardized\ncoordinates $\\mathbf{x}_s$ and original coordinates $\\mathbf{x}$ is then given by\n$\\mathbf{x}_s = \\mathbf{P} \\mathbf{x} + \\mathbf{p}$.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3,
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "name": "symmorphic",
                "description": "Specifies if the space group is symmorphic. Set to True if all\ntranslations are zero.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 13,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.symmetry.prototype_label_aflow",
                    "results.material.topology.symmetry.prototype_label_aflow__suggestion.suggestion"
                  ]
                },
                "name": "prototype_label_aflow",
                "description": "AFLOW label of the prototype (see\nhttp://aflowlib.org/CrystalDatabase/prototype_index.html) identified on the basis\nof the space_group and normalized_wyckoff.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 14,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.symmetry.prototype_name",
                    "results.material.topology.symmetry.prototype_name__suggestion"
                  ]
                },
                "name": "prototype_name",
                "description": "A common name for this prototypical structure, e.g. fcc, bcc.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "4-member ring",
                    "Heusler",
                    "bcc",
                    "bct",
                    "bct5",
                    "clathrate",
                    "cuprite",
                    "diamond",
                    "fcc",
                    "fct",
                    "half-Heusler",
                    "hcp",
                    "perovskite",
                    "rock salt",
                    "rutile",
                    "simple cubic",
                    "wurtzite",
                    "zincblende"
                  ]
                }
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "wyckoff_sets",
                "sub_section": "/packages/13/section_definitions/3",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 9,
            "m_parent_sub_section": "section_definitions",
            "name": "CoreHole",
            "base_sections": [
              "/packages/2/section_definitions/9"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.active_orbitals.n_quantum_number"
                  ]
                },
                "name": "n_quantum_number",
                "description": "Principal quantum number $n$.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.active_orbitals.j_quantum_number"
                  ]
                },
                "name": "j_quantum_number",
                "description": "Total angular momentum quantum number $j = |l-s| ... l+s$.\n**Necessary with strong L-S coupling or non-collinear spin systems.**",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "1..2"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.active_orbitals.mj_quantum_number"
                  ]
                },
                "name": "mj_quantum_number",
                "description": "Azimuthal projection of the $j$ vector.\n**Necessary with strong L-S coupling or non-collinear spin systems.**",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.active_orbitals.occupation"
                  ]
                },
                "name": "occupation",
                "description": "The total number of electrons within the state (as defined by degeneracy)\nafter exciting the model charge.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.active_orbitals.n_electrons_excited"
                  ]
                },
                "name": "n_electrons_excited",
                "description": "The electron charge excited for modelling purposes.\nChoices that deviate from 0 or 1 typically leverage Janak composition.\nUnless the `initial` state is chosen, the model corresponds to a single electron being excited in physical reality.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.active_orbitals.degeneracy"
                  ]
                },
                "name": "degeneracy",
                "description": "The number of states under the filling constraints applied to the orbital set.\nThis implicitly assumes that all orbitals in the set are degenerate.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.active_orbitals.l_quantum_symbol"
                  ]
                },
                "name": "l_quantum_symbol",
                "description": "Azimuthal $l$ in symbolic form.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.active_orbitals.ml_quantum_symbol"
                  ]
                },
                "name": "ml_quantum_symbol",
                "description": "Magnetic quantum number $m_l$ in symbolic form.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.active_orbitals.ms_quantum_symbol"
                  ]
                },
                "name": "ms_quantum_symbol",
                "description": "Spin quantum number $m_s$ in symbolic form.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 10,
            "m_parent_sub_section": "section_definitions",
            "name": "Relation",
            "description": "Contains information about the relation between two different systems.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.system_relation.type",
                    "results.material.topology.system_relation.type__suggestion"
                  ]
                },
                "name": "type",
                "description": "The type of relation between a system and it's parent.\n\n| Value | Description |\n| --------- | ----------------------- |\n| `'root'` | System representing the entire structure, has no parent system. |\n| `'subsystem'` | A single logical entity extracted from the parent system. |\n| `'group'` | A logical group of subsystems within the parent, e.g. a group of molecules in MD. |\n| `'primitive_cell'` | The conventional cell from which the parent is constructed from. |\n| `'conventional_cell'` | The primitive cell from which the parent is constructed from. |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "conventional_cell",
                    "group",
                    "primitive_cell",
                    "root",
                    "subsystem"
                  ]
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 11,
            "m_parent_sub_section": "section_definitions",
            "name": "Coordination",
            "description": "Coordination number of an element, which represents the number of atoms directly bonded to the element.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "element",
                "description": "Chemical symbol of element, whose coordination number is being determined.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "Ac",
                    "Ag",
                    "Al",
                    "Am",
                    "Ar",
                    "As",
                    "At",
                    "Au",
                    "B",
                    "Ba",
                    "Be",
                    "Bh",
                    "Bi",
                    "Bk",
                    "Br",
                    "C",
                    "Ca",
                    "Cd",
                    "Ce",
                    "Cf",
                    "Cl",
                    "Cm",
                    "Cn",
                    "Co",
                    "Cr",
                    "Cs",
                    "Cu",
                    "Db",
                    "Ds",
                    "Dy",
                    "Er",
                    "Es",
                    "Eu",
                    "F",
                    "Fe",
                    "Fl",
                    "Fm",
                    "Fr",
                    "Ga",
                    "Gd",
                    "Ge",
                    "H",
                    "He",
                    "Hf",
                    "Hg",
                    "Ho",
                    "Hs",
                    "I",
                    "In",
                    "Ir",
                    "K",
                    "Kr",
                    "La",
                    "Li",
                    "Lr",
                    "Lu",
                    "Lv",
                    "Mc",
                    "Md",
                    "Mg",
                    "Mn",
                    "Mo",
                    "Mt",
                    "N",
                    "Na",
                    "Nb",
                    "Nd",
                    "Ne",
                    "Nh",
                    "Ni",
                    "No",
                    "Np",
                    "O",
                    "Og",
                    "Os",
                    "P",
                    "Pa",
                    "Pb",
                    "Pd",
                    "Pm",
                    "Po",
                    "Pr",
                    "Pt",
                    "Pu",
                    "Ra",
                    "Rb",
                    "Re",
                    "Rf",
                    "Rg",
                    "Rh",
                    "Rn",
                    "Ru",
                    "S",
                    "Sb",
                    "Sc",
                    "Se",
                    "Sg",
                    "Si",
                    "Sm",
                    "Sn",
                    "Sr",
                    "Ta",
                    "Tb",
                    "Tc",
                    "Te",
                    "Th",
                    "Ti",
                    "Tl",
                    "Tm",
                    "Ts",
                    "U",
                    "V",
                    "W",
                    "X",
                    "Xe",
                    "Y",
                    "Yb",
                    "Zn",
                    "Zr"
                  ]
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "coordination_number",
                "description": "The number of neighbours directly connected to an atom",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 12,
            "m_parent_sub_section": "section_definitions",
            "name": "System",
            "description": "\n        Describes a a structural part that has been identified within the entry.\n        May be related to other systems.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.system_id"
                  ]
                },
                "name": "system_id",
                "description": "That path of this section within the metainfo that is used as a unique\nidentifier.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.label",
                    "results.material.topology.label__suggestion"
                  ]
                },
                "name": "label",
                "description": "Descriptive label that identifies this structural part.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.method",
                    "results.material.topology.method__suggestion"
                  ]
                },
                "name": "method",
                "description": "The method used for identifying this system.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "matid",
                    "parser",
                    "porosity",
                    "user"
                  ]
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.description"
                  ]
                },
                "name": "description",
                "description": "A short description about this part of the topology.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.material_id"
                  ]
                },
                "name": "material_id",
                "description": "A fixed length, unique material identifier in the form of a hash\ndigest.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.material_name",
                    "results.material.topology.material_name__suggestion"
                  ]
                },
                "name": "material_name",
                "description": "Meaningful names for this a material if any can be assigned.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.structural_type",
                    "results.material.topology.structural_type__suggestion"
                  ]
                },
                "name": "structural_type",
                "description": "Structural class determined from the atomic structure.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "1D",
                    "2D",
                    "active orbitals",
                    "atom",
                    "bulk",
                    "group",
                    "molecule",
                    "molecule / cluster",
                    "monomer",
                    "not processed",
                    "surface",
                    "unavailable"
                  ]
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.dimensionality",
                    "results.material.topology.dimensionality__suggestion"
                  ]
                },
                "name": "dimensionality",
                "description": "Dimensionality of the system. For atomistic systems this is\nautomatically evaluated by using the topology-scaling algorithm:\nhttps://doi.org/10.1103/PhysRevLett.118.106101.\n\n| Value | Description |\n| --------- | ----------------------- |\n| `'0D'` | Not connected periodically |\n| `'1D'` | Periodically connected in one dimension |\n| `'2D'` | Periodically connected in two dimensions |\n| `'3D'` | Periodically connected in three dimensions |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "0D",
                    "1D",
                    "2D",
                    "3D"
                  ]
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.building_block",
                    "results.material.topology.building_block__suggestion"
                  ]
                },
                "name": "building_block",
                "description": "More exact classification for this system, i.e. the type of \"building\nblock\" it represents.\n\n| Value | Description |\n| --------- | ----------------------- |\n| `'surface'` | Structure built from a unit cell that repeats periodically in two directions and at least twice, but not infinitely in a third direction. |\n| `'2D material'` | Structure built from a unit cell that repeats periodically in two directions and only once in a third direction. |\n| `'molecule'` | Molecule defined in the force-field topology |\n| `'monomer'` | Monomer defined in the force-field topology |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "2D material",
                    "molecule",
                    "monomer",
                    "surface"
                  ]
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.functional_type",
                    "results.material.topology.functional_type__suggestion"
                  ]
                },
                "name": "functional_type",
                "description": "Classification based on the functional properties.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "0..*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.compound_type",
                    "results.material.topology.compound_type__suggestion"
                  ]
                },
                "name": "compound_type",
                "description": "Classification based on the chemical formula.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "0..*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.elements",
                    "results.material.topology.elements__suggestion.suggestion"
                  ]
                },
                "name": "elements",
                "description": "Names of the different elements present in the structure.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "Ac",
                    "Ag",
                    "Al",
                    "Am",
                    "Ar",
                    "As",
                    "At",
                    "Au",
                    "B",
                    "Ba",
                    "Be",
                    "Bh",
                    "Bi",
                    "Bk",
                    "Br",
                    "C",
                    "Ca",
                    "Cd",
                    "Ce",
                    "Cf",
                    "Cl",
                    "Cm",
                    "Cn",
                    "Co",
                    "Cr",
                    "Cs",
                    "Cu",
                    "Db",
                    "Ds",
                    "Dy",
                    "Er",
                    "Es",
                    "Eu",
                    "F",
                    "Fe",
                    "Fl",
                    "Fm",
                    "Fr",
                    "Ga",
                    "Gd",
                    "Ge",
                    "H",
                    "He",
                    "Hf",
                    "Hg",
                    "Ho",
                    "Hs",
                    "I",
                    "In",
                    "Ir",
                    "K",
                    "Kr",
                    "La",
                    "Li",
                    "Lr",
                    "Lu",
                    "Lv",
                    "Mc",
                    "Md",
                    "Mg",
                    "Mn",
                    "Mo",
                    "Mt",
                    "N",
                    "Na",
                    "Nb",
                    "Nd",
                    "Ne",
                    "Nh",
                    "Ni",
                    "No",
                    "Np",
                    "O",
                    "Og",
                    "Os",
                    "P",
                    "Pa",
                    "Pb",
                    "Pd",
                    "Pm",
                    "Po",
                    "Pr",
                    "Pt",
                    "Pu",
                    "Ra",
                    "Rb",
                    "Re",
                    "Rf",
                    "Rg",
                    "Rh",
                    "Rn",
                    "Ru",
                    "S",
                    "Sb",
                    "Sc",
                    "Se",
                    "Sg",
                    "Si",
                    "Sm",
                    "Sn",
                    "Sr",
                    "Ta",
                    "Tb",
                    "Tc",
                    "Te",
                    "Th",
                    "Ti",
                    "Tl",
                    "Tm",
                    "Ts",
                    "U",
                    "V",
                    "W",
                    "X",
                    "Xe",
                    "Y",
                    "Yb",
                    "Zn",
                    "Zr"
                  ]
                },
                "shape": [
                  "0..*"
                ],
                "default": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.n_elements"
                  ]
                },
                "name": "n_elements",
                "description": "Number of different elements in the structure as an integer.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "default": 0,
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 13,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.elements_exclusive"
                  ]
                },
                "name": "elements_exclusive",
                "description": "String containing the chemical elements in alphabetical order and\nseparated by a single whitespace. This quantity can be used for\nexclusive element searches where you want to find entries/materials\nwith only certain given elements.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 14,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.chemical_formula_descriptive",
                    "results.material.topology.chemical_formula_descriptive__suggestion"
                  ]
                },
                "name": "chemical_formula_descriptive",
                "description": "The chemical formula for a structure as a string in a form chosen by the API\nimplementation.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 15,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.chemical_formula_reduced",
                    "results.material.topology.chemical_formula_reduced__suggestion"
                  ]
                },
                "name": "chemical_formula_reduced",
                "description": "Alphabetically sorted chemical formula with reduced integer chemical\nproportion numbers. The proportion number is omitted if it is 1.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 16,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.chemical_formula_hill",
                    "results.material.topology.chemical_formula_hill__suggestion"
                  ]
                },
                "name": "chemical_formula_hill",
                "description": "The chemical formula for a structure in Hill form with element\nsymbols followed by non-reduced integer chemical proportion numbers.\nThe proportion number is omitted if it is 1.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 17,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.chemical_formula_iupac",
                    "results.material.topology.chemical_formula_iupac__suggestion"
                  ]
                },
                "name": "chemical_formula_iupac",
                "description": "Formula where the elements are ordered using a formal list loosely\nbased on electronegativity as defined in the IUPAC nomenclature of\ninorganic chemistry (2005). Contains reduced integer chemical\nproportion numbers where the proportion number is omitted if it is\n1.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 18,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.chemical_formula_anonymous",
                    "results.material.topology.chemical_formula_anonymous__suggestion"
                  ]
                },
                "name": "chemical_formula_anonymous",
                "description": "Formula with the elements ordered by their reduced integer chemical\nproportion number, and the chemical species replaced by\nalphabetically ordered letters. The proportion number is omitted if\nit is 1. E.g.  H2O becomes A2B and H2O2 becomes AB. The letters are\ndrawn from the english alphabet that may be extended by increasing\nthe number of letters, e.g. A, B, ..., Z, Aa, Ab and so on. This\ndefinition is in line with the similarly named OPTIMADE definition.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 19,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.chemical_formula_reduced_fragments"
                  ]
                },
                "name": "chemical_formula_reduced_fragments",
                "description": "Alphabetically sorted chemical formula with reduced integer chemical\nproportion numbers. The proportion number is omitted if it is 1.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 20,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.parent_system"
                  ]
                },
                "name": "parent_system",
                "description": "Reference to the parent system.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 21,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.child_systems"
                  ]
                },
                "name": "child_systems",
                "description": "References to the child systems.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 22,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.atomic_fraction"
                  ]
                },
                "name": "atomic_fraction",
                "description": "The atomic fraction of this system in the full structure it is contained in.\nPer definition a positive value less than or equal to 1.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 23,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.mass_fraction"
                  ]
                },
                "name": "mass_fraction",
                "description": "The mass fraction of this system in the full structure it is contained within.\nPer definition a positive value less than or equal to 1.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 24,
                "m_parent_sub_section": "quantities",
                "name": "atoms_ref",
                "description": "Reference to an atomistic structure that is associated with this\nsystem.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/9/section_definitions/1"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 25,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.n_atoms"
                  ]
                },
                "name": "n_atoms",
                "description": "The total number of species (atoms, particles) in the system.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 26,
                "m_parent_sub_section": "quantities",
                "name": "indices",
                "description": "Indices of the atoms belonging to this group. These indices refer to the\nsystem specified in atoms_ref. Each row represents a new instance.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int64"
                },
                "shape": [
                  "*",
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 27,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.sbu_type",
                    "results.material.topology.sbu_type__suggestion"
                  ]
                },
                "name": "sbu_type",
                "description": "The topological representation of the metal secondary building units (sbus).\nThe shape of most metal sbus are well defined and form the basis of most\n popular MOFs. The most common example is the paddlewheel, rodlike mofs,\n irmofs, uio66",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 28,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.largest_cavity_diameter"
                  ]
                },
                "name": "largest_cavity_diameter",
                "description": "The largest cavity diameter is the largest sphere that can be inserted in a porous\nsystem without overlapping with any of the atoms in the system.",
                "more": {
                  "alias": [
                    "lcd",
                    "largest_included_sphere"
                  ]
                },
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 29,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.pore_limiting_diameter"
                  ]
                },
                "name": "pore_limiting_diameter",
                "description": "The pore limiting diameter is the largest sphere that can freely\ndiffuse through the porous network without overlapping with any of the\natoms in the system.",
                "more": {
                  "alias": [
                    "pld",
                    "free_sphere"
                  ]
                },
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 30,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.largest_included_sphere_along_free_sphere_path"
                  ]
                },
                "name": "largest_included_sphere_along_free_sphere_path",
                "description": "The largest included sphere along free sphere path is\nlargest sphere that can be inserted in the pore.",
                "more": {
                  "alias": [
                    "lfpd"
                  ]
                },
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 31,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.accessible_surface_area"
                  ]
                },
                "name": "accessible_surface_area",
                "description": "The surface area accessible is the area that is accessible to guest molecules\nin a porous system. It is generally considered to be the entire surface area\nthat can be spanned by a probe of a specific radius. In NOMAD, by default we use\na probe that has a radius of 1.86 Angstrom, which correspond to the\ncovalent radii of nitrogen gas. For biomolecular system, a radii of\n1.4 Angstrom can be used, which correspond to the covalent radii\nof water.",
                "more": {
                  "alias": [
                    "asa",
                    "sasa",
                    "solvent_accessible_surface_area"
                  ]
                },
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "meter ** 2"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 32,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.accessible_volume"
                  ]
                },
                "name": "accessible_volume",
                "description": "Volume of unoccupied space in a system that can be accessible to\nguest molecules, like solvents.",
                "more": {
                  "alias": [
                    "common_solvent_accessible_volume",
                    "csav",
                    "solvent_accessible_volume",
                    "sav"
                  ]
                },
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "meter ** 3"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 33,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.void_fraction"
                  ]
                },
                "name": "void_fraction",
                "description": "Ratio of the the volume of the unoccupied space in the system\nto the volume of the entire system. It is a good proxy to\ndetermine how porous a system is. Highly porous systems\noften have a larger void fraction, meanwhile compact or dense\nsystems have smaller void fractions.",
                "more": {
                  "alias": [
                    "void_ratio"
                  ]
                },
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 34,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.n_channels"
                  ]
                },
                "name": "n_channels",
                "description": "Number of channels present in the porous system, which correspond to the number of\npores within the system.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 35,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.sbu_coordination_number"
                  ]
                },
                "name": "sbu_coordination_number",
                "description": "The number of connecting point in the secondary building units(sbu), which corresponds to\nthe to the number of point of extension in the secondary building unit. Some common\nterminology include\n1 : monotopic\n2 : ditopic\n3 : tritopic\n4 : tetratopic\n5 : pentatopic",
                "more": {
                  "alias": [
                    "n_point_of_extensions"
                  ]
                },
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                }
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "atoms",
                "description": "The atomistic structure that is associated with this\nsystem.",
                "sub_section": "/packages/9/section_definitions/1",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "m_annotations": {
                  "elasticsearch": [
                    "elemental_composition"
                  ]
                },
                "name": "elemental_composition",
                "sub_section": "/packages/13/section_definitions/1",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "system_relation",
                "sub_section": "/packages/13/section_definitions/10",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 3,
                "m_parent_sub_section": "sub_sections",
                "name": "cell",
                "sub_section": "/packages/13/section_definitions/7",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 4,
                "m_parent_sub_section": "sub_sections",
                "name": "symmetry",
                "sub_section": "/packages/13/section_definitions/8",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 5,
                "m_parent_sub_section": "sub_sections",
                "name": "metal_coordination",
                "sub_section": "/packages/13/section_definitions/11",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 6,
                "m_parent_sub_section": "sub_sections",
                "name": "active_orbitals",
                "more": {
                  "nested": false
                },
                "sub_section": "/packages/13/section_definitions/9"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 13,
            "m_parent_sub_section": "section_definitions",
            "name": "Material",
            "description": "\n        Section containing information on the material composition and structure.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.material_id"
                  ]
                },
                "name": "material_id",
                "description": "A fixed length, unique material identifier in the form of a hash\ndigest.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.material_name",
                    "results.material.material_name__suggestion"
                  ]
                },
                "name": "material_name",
                "description": "Meaningful names for this a material if any can be assigned.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.structural_type",
                    "results.material.structural_type__suggestion"
                  ]
                },
                "name": "structural_type",
                "description": "Structural class determined from the atomic structure.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "1D",
                    "2D",
                    "atom",
                    "bulk",
                    "molecule / cluster",
                    "not processed",
                    "surface",
                    "unavailable"
                  ]
                },
                "default": "not processed"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.dimensionality",
                    "results.material.topology.dimensionality__suggestion"
                  ]
                },
                "name": "dimensionality",
                "description": "Dimensionality of the system. For atomistic systems this is\nautomatically evaluated by using the topology-scaling algorithm:\nhttps://doi.org/10.1103/PhysRevLett.118.106101.\n\n| Value | Description |\n| --------- | ----------------------- |\n| `'0D'` | Not connected periodically |\n| `'1D'` | Periodically connected in one dimension |\n| `'2D'` | Periodically connected in two dimensions |\n| `'3D'` | Periodically connected in three dimensions |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "0D",
                    "1D",
                    "2D",
                    "3D"
                  ]
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.topology.building_block",
                    "results.material.topology.building_block__suggestion"
                  ]
                },
                "name": "building_block",
                "description": "More exact classification for this system, i.e. the type of \"building\nblock\" it represents.\n\n| Value | Description |\n| --------- | ----------------------- |\n| `'surface'` | Structure built from a unit cell that repeats periodically in two directions and at least twice, but not infinitely in a third direction. |\n| `'2D material'` | Structure built from a unit cell that repeats periodically in two directions and only once in a third direction. |\n| `'molecule'` | Molecule defined in the force-field topology |\n| `'monomer'` | Monomer defined in the force-field topology |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "2D material",
                    "molecule",
                    "monomer",
                    "surface"
                  ]
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.functional_type",
                    "results.material.functional_type__suggestion"
                  ]
                },
                "name": "functional_type",
                "description": "Classification based on the functional properties.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "0..*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.compound_type",
                    "results.material.compound_type__suggestion"
                  ]
                },
                "name": "compound_type",
                "description": "Classification based on the chemical formula.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "0..*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.elements",
                    "results.material.elements__suggestion.suggestion"
                  ]
                },
                "name": "elements",
                "description": "Names of the different elements present in the structure.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "Ac",
                    "Ag",
                    "Al",
                    "Am",
                    "Ar",
                    "As",
                    "At",
                    "Au",
                    "B",
                    "Ba",
                    "Be",
                    "Bh",
                    "Bi",
                    "Bk",
                    "Br",
                    "C",
                    "Ca",
                    "Cd",
                    "Ce",
                    "Cf",
                    "Cl",
                    "Cm",
                    "Cn",
                    "Co",
                    "Cr",
                    "Cs",
                    "Cu",
                    "Db",
                    "Ds",
                    "Dy",
                    "Er",
                    "Es",
                    "Eu",
                    "F",
                    "Fe",
                    "Fl",
                    "Fm",
                    "Fr",
                    "Ga",
                    "Gd",
                    "Ge",
                    "H",
                    "He",
                    "Hf",
                    "Hg",
                    "Ho",
                    "Hs",
                    "I",
                    "In",
                    "Ir",
                    "K",
                    "Kr",
                    "La",
                    "Li",
                    "Lr",
                    "Lu",
                    "Lv",
                    "Mc",
                    "Md",
                    "Mg",
                    "Mn",
                    "Mo",
                    "Mt",
                    "N",
                    "Na",
                    "Nb",
                    "Nd",
                    "Ne",
                    "Nh",
                    "Ni",
                    "No",
                    "Np",
                    "O",
                    "Og",
                    "Os",
                    "P",
                    "Pa",
                    "Pb",
                    "Pd",
                    "Pm",
                    "Po",
                    "Pr",
                    "Pt",
                    "Pu",
                    "Ra",
                    "Rb",
                    "Re",
                    "Rf",
                    "Rg",
                    "Rh",
                    "Rn",
                    "Ru",
                    "S",
                    "Sb",
                    "Sc",
                    "Se",
                    "Sg",
                    "Si",
                    "Sm",
                    "Sn",
                    "Sr",
                    "Ta",
                    "Tb",
                    "Tc",
                    "Te",
                    "Th",
                    "Ti",
                    "Tl",
                    "Tm",
                    "Ts",
                    "U",
                    "V",
                    "W",
                    "X",
                    "Xe",
                    "Y",
                    "Yb",
                    "Zn",
                    "Zr"
                  ]
                },
                "shape": [
                  "0..*"
                ],
                "default": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.n_elements"
                  ]
                },
                "name": "n_elements",
                "description": "Number of different elements in the structure as an integer.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "default": 0,
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.elements_exclusive"
                  ]
                },
                "name": "elements_exclusive",
                "description": "String containing the chemical elements in alphabetical order and\nseparated by a single whitespace. This quantity can be used for\nexclusive element searches where you want to find entries/materials\nwith only certain given elements.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.chemical_formula_descriptive",
                    "results.material.chemical_formula_descriptive__suggestion"
                  ]
                },
                "name": "chemical_formula_descriptive",
                "description": "The chemical formula for a structure as a string in a form chosen by the API\nimplementation.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.chemical_formula_reduced",
                    "results.material.chemical_formula_reduced__suggestion"
                  ]
                },
                "name": "chemical_formula_reduced",
                "description": "Alphabetically sorted chemical formula with reduced integer chemical\nproportion numbers. The proportion number is omitted if it is 1.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.chemical_formula_hill",
                    "results.material.chemical_formula_hill__suggestion"
                  ]
                },
                "name": "chemical_formula_hill",
                "description": "The chemical formula for a structure in Hill form with element\nsymbols followed by non-reduced integer chemical proportion numbers.\nThe proportion number is omitted if it is 1.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 13,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.chemical_formula_iupac",
                    "results.material.chemical_formula_iupac__suggestion"
                  ]
                },
                "name": "chemical_formula_iupac",
                "description": "Formula where the elements are ordered using a formal list loosely\nbased on electronegativity as defined in the IUPAC nomenclature of\ninorganic chemistry (2005). Contains reduced integer chemical\nproportion numbers where the proportion number is omitted if it is\n1.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 14,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.chemical_formula_anonymous",
                    "results.material.chemical_formula_anonymous__suggestion"
                  ]
                },
                "name": "chemical_formula_anonymous",
                "description": "Formula with the elements ordered by their reduced integer chemical\nproportion number, and the chemical species replaced by\nalphabetically ordered letters. The proportion number is omitted if\nit is 1. E.g.  H2O becomes A2B and H2O2 becomes AB. The letters are\ndrawn from the english alphabet that may be extended by increasing\nthe number of letters, e.g. A, B, ..., Z, Aa, Ab and so on. This\ndefinition is in line with the similarly named OPTIMADE definition.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 15,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.material.chemical_formula_reduced_fragments"
                  ]
                },
                "name": "chemical_formula_reduced_fragments",
                "description": "Alphabetically sorted chemical formula with reduced integer chemical\nproportion numbers. The proportion number is omitted if it is 1.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "m_annotations": {
                  "elasticsearch": [
                    "elemental_composition"
                  ]
                },
                "name": "elemental_composition",
                "sub_section": "/packages/13/section_definitions/1",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "symmetry",
                "sub_section": "/packages/13/section_definitions/6",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "m_annotations": {
                  "elasticsearch": [
                    "topology"
                  ]
                },
                "name": "topology",
                "sub_section": "/packages/13/section_definitions/12",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 14,
            "m_parent_sub_section": "section_definitions",
            "name": "HubbardKanamoriModel",
            "description": "Setup of the Hubbard model used in DFT+U",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "atom_label",
                "description": "String used to identify the atoms of this kind. This should correspond to the\natom labels of the configuration. It is possible for one atom kind to have\nmultiple labels (in order to allow two atoms of the same kind to have two\ndifferently defined sets of atom-centered basis functions or two different pseudo-\npotentials). Atom kind is typically the symbol of the atomic species but it can be\nalso a ghost or pseudo-atom.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "orbital",
                "description": "Orbital label corresponding to the Hubbard model. The typical orbitals with strong\nHubbard interactions have partially filled '3d', '4d' and '4f' orbitals.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.dft.hubbard_kanamori_model.u_effective"
                  ]
                },
                "name": "u_effective",
                "description": "Value of the effective U parameter (u - j).",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.dmft.u"
                  ]
                },
                "name": "u",
                "description": "Value of the (intraorbital) Hubbard interaction",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.dft.hubbard_kanamori_model.j"
                  ]
                },
                "name": "j",
                "description": "Value of the exchange interaction. In rotational invariant systems, j = jh.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "double_counting_correction",
                "description": "Name of the double counting correction algorithm applied.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 15,
            "m_parent_sub_section": "section_definitions",
            "name": "DFT",
            "description": "\n        Methodology for a DFT calculation.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.dft.basis_set_type",
                    "results.method.simulation.dft.basis_set_type__suggestion"
                  ]
                },
                "name": "basis_set_type",
                "description": "The used basis set functions.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "(L)APW+lo",
                    "gaussians",
                    "not processed",
                    "numeric AOs",
                    "plane waves",
                    "psinc functions",
                    "real-space grid",
                    "unavailable"
                  ]
                },
                "default": "unavailable"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.dft.core_electron_treatment",
                    "results.method.simulation.dft.core_electron_treatment__suggestion"
                  ]
                },
                "name": "core_electron_treatment",
                "description": "How the core electrons are described.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "all electron frozen core",
                    "full all electron",
                    "pseudopotential",
                    "unavailable"
                  ]
                },
                "default": "unavailable"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.dft.spin_polarized"
                  ]
                },
                "name": "spin_polarized",
                "description": "Whether the calculation is spin-polarized.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.dft.scf_threshold_energy_change"
                  ]
                },
                "name": "scf_threshold_energy_change",
                "description": "Specifies the threshold for the total energy change between two subsequent\nself-consistent field (SCF) iterations. The SCF is considered converged when the\ntotal-energy change between two SCF cycles is below the threshold (possibly in\ncombination with other criteria).",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.dft.van_der_Waals_method",
                    "results.method.simulation.dft.van_der_Waals_method__suggestion"
                  ]
                },
                "name": "van_der_Waals_method",
                "description": "The used van der Waals method.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.dft.relativity_method",
                    "results.method.simulation.dft.relativity_method__suggestion"
                  ]
                },
                "name": "relativity_method",
                "description": "Describes the relativistic treatment used for the calculation of the final energy\nand related quantities. If skipped or empty, no relativistic treatment is applied.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "pseudo_scalar_relativistic",
                    "scalar_relativistic",
                    "scalar_relativistic_atomic_ZORA"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.dft.smearing_kind",
                    "results.method.simulation.dft.smearing_kind__suggestion"
                  ]
                },
                "name": "smearing_kind",
                "description": "Specifies the kind of smearing on the electron occupation used to calculate the\nfree energy (see energy_free)\n\nValid values are:\n\n| Smearing kind             | Description                       |\n\n| ------------------------- | --------------------------------- |\n\n| `\"empty\"`                 | No smearing is applied            |\n\n| `\"gaussian\"`              | Gaussian smearing                 |\n\n| `\"fermi\"`                 | Fermi smearing                    |\n\n| `\"marzari-vanderbilt\"`    | Marzari-Vanderbilt smearing       |\n\n| `\"methfessel-paxton\"`     | Methfessel-Paxton smearing        |\n\n| `\"tetrahedra\"`            | Interpolation of state energies and occupations\n(ignores smearing_width) |",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.dft.smearing_width"
                  ]
                },
                "name": "smearing_width",
                "description": "Specifies the width of the smearing in energy for the electron occupation used to\ncalculate the free energy (see energy_free).\n\n*NOTE:* Not all methods specified in smearing_kind uses this value.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.dft.jacobs_ladder"
                  ]
                },
                "name": "jacobs_ladder",
                "description": "Functional classification in line with Jacob's Ladder.\nFor more information, see https://doi.org/10.1063/1.1390175 (original paper);\nhttps://doi.org/10.1103/PhysRevLett.91.146401 (meta-GGA);\nand https://doi.org/10.1063/1.1904565 (hyper-GGA).",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "GGA",
                    "LDA",
                    "hybrid",
                    "hyper-GGA",
                    "meta-GGA",
                    "not processed",
                    "unavailable"
                  ]
                },
                "default": "not processed"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.dft.xc_functional_type"
                  ]
                },
                "name": "xc_functional_type",
                "description": "Functional classification in line with Jacob's Ladder.\nFor more information, see https://doi.org/10.1063/1.1390175 (original paper);\nhttps://doi.org/10.1103/PhysRevLett.91.146401 (meta-GGA);\nand https://doi.org/10.1063/1.1904565 (hyper-GGA).",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "GGA",
                    "LDA",
                    "hybrid",
                    "hyper-GGA",
                    "meta-GGA",
                    "not processed",
                    "unavailable"
                  ]
                },
                "default": "not processed"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.dft.xc_functional_names",
                    "results.method.simulation.dft.xc_functional_names__suggestion"
                  ]
                },
                "name": "xc_functional_names",
                "description": "The list of libXC functional names that where used in this entry.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ],
                "default": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.dft.exact_exchange_mixing_factor"
                  ]
                },
                "name": "exact_exchange_mixing_factor",
                "description": "Amount of exact exchange mixed in with the XC functional (value range = [0,1]).",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "m_annotations": {
                  "elasticsearch": [
                    "hubbard_kanamori_model"
                  ]
                },
                "name": "hubbard_kanamori_model",
                "sub_section": "/packages/13/section_definitions/14",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 16,
            "m_parent_sub_section": "section_definitions",
            "name": "TB",
            "description": "\n        Methodology for a Tight-Binding calculation.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.tb.type",
                    "results.method.simulation.tb.type__suggestion"
                  ]
                },
                "name": "type",
                "description": "Tight-binding model type: Slater Koster fitting, DFTB approximation, xTB perturbation\ntheory, or Wannier projection.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "DFTB",
                    "Slater-Koster",
                    "Wannier",
                    "not processed",
                    "xTB"
                  ]
                },
                "default": "not processed"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.tb.localization_type",
                    "results.method.simulation.tb.localization_type__suggestion"
                  ]
                },
                "name": "localization_type",
                "description": "Localization type of the Wannier orbitals.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "maximally_localized",
                    "single_shot"
                  ]
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 17,
            "m_parent_sub_section": "section_definitions",
            "name": "ExcitedStateMethodology",
            "description": "\n        Methodology for a Excited-State calculation.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "type",
                    "type__suggestion__suggestion"
                  ]
                },
                "name": "type",
                "description": "Type which allows to identify the excited-state calculation with a\ncommon string.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.bse.basis_set_type",
                    "results.method.simulation.bse.basis_set_type__suggestion"
                  ]
                },
                "name": "basis_set_type",
                "description": "The used basis set functions.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "(L)APW+lo",
                    "gaussians",
                    "not processed",
                    "numeric AOs",
                    "plane waves",
                    "psinc functions",
                    "real-space grid",
                    "unavailable"
                  ]
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.bse.starting_point_type"
                  ]
                },
                "name": "starting_point_type",
                "description": "The libXC based xc functional classification used in the starting point DFT simulation.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "GGA",
                    "HF",
                    "LDA",
                    "hybrid",
                    "hyper-GGA",
                    "meta-GGA",
                    "not processed",
                    "unavailable"
                  ]
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.bse.starting_point_names",
                    "results.method.simulation.bse.starting_point_names__suggestion"
                  ]
                },
                "name": "starting_point_names",
                "description": "The list of libXC functional names that where used in this entry.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 18,
            "m_parent_sub_section": "section_definitions",
            "name": "GW",
            "description": "\n        Methodology for a GW calculation.\n        ",
            "base_sections": [
              "/packages/13/section_definitions/17"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.gw.type",
                    "results.method.simulation.gw.type__suggestion"
                  ]
                },
                "name": "type",
                "description": "GW Hedin's self-consistency cycle:\n\n| Name      | Description                      | Reference             |\n\n| --------- | -------------------------------- | --------------------- |\n\n| `'G0W0'`  | single-shot                      | PRB 74, 035101 (2006) |\n\n| `'scGW'`  | self-consistent G and W               | PRB 75, 235102 (2007) |\n\n| `'scGW0'` | self-consistent G with fixed W0  | PRB 54, 8411 (1996)   |\n\n| `'scG0W'` | self-consistent W with fixed G0  | -                     |\n\n| `'ev-scGW0'`  | eigenvalues self-consistent G with fixed W0   | PRB 34, 5390 (1986)   |\n\n| `'ev-scGW'`  | eigenvalues self-consistent G and W   | PRB 74, 045102 (2006)   |\n\n| `'qp-scGW0'`  | quasiparticle self-consistent G with fixed W0 | PRL 99, 115109 (2007) |\n\n| `'qp-scGW'`  | quasiparticle self-consistent G and W | PRL 96, 226402 (2006) |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "G0W0",
                    "ev-scGW",
                    "ev-scGW0",
                    "qp-scGW",
                    "qp-scGW0",
                    "scG0W",
                    "scGW",
                    "scGW0"
                  ]
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 19,
            "m_parent_sub_section": "section_definitions",
            "name": "BSE",
            "description": "\n        Methodology for a BSE calculation.\n        ",
            "base_sections": [
              "/packages/13/section_definitions/17"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.bse.type",
                    "results.method.simulation.bse.type__suggestion"
                  ]
                },
                "name": "type",
                "description": "Type of BSE hamiltonian solved:\n\n    H_BSE = H_diagonal + 2 * gx * Hx - gc * Hc\n\nwhere gx, gc specifies the type.\n\nOnline resources for the theory:\n- http://exciting.wikidot.com/carbon-excited-states-from-bse#toc1\n- https://www.vasp.at/wiki/index.php/Bethe-Salpeter-equations_calculations\n- https://docs.abinit.org/theory/bse/\n- https://www.yambo-code.eu/wiki/index.php/Bethe-Salpeter_kernel\n\n| Name | Description |\n\n| --------- | ----------------------- |\n\n| `'Singlet'` | gx = 1, gc = 1 |\n\n| `'Triplet'` | gx = 0, gc = 1 |\n\n| `'IP'` | Independent-particle approach |\n\n| `'RPA'` | Random Phase Approximation |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "IP",
                    "RPA",
                    "Singlet",
                    "Triplet"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.bse.solver",
                    "results.method.simulation.bse.solver__suggestion"
                  ]
                },
                "name": "solver",
                "description": "Solver algotithm used to diagonalize the BSE Hamiltonian.\n\n| Name | Description | Reference |\n\n| --------- | ----------------------- | ----------- |\n\n| `'Full-diagonalization'` | Full diagonalization of the BSE Hamiltonian | - |\n\n| `'Lanczos-Haydock'` | Subspace iterative Lanczos-Haydock algorithm | https://doi.org/10.1103/PhysRevB.59.5441 |\n\n| `'GMRES'` | Generalized minimal residual method | https://doi.org/10.1137/0907058 |\n\n| `'SLEPc'` | Scalable Library for Eigenvalue Problem Computations | https://slepc.upv.es/ |\n\n| `'TDA'` | Tamm-Dancoff approximation | https://doi.org/10.1016/S0009-2614(99)01149-5 |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "Full-diagonalization",
                    "GMRES",
                    "Lanczos-Haydock",
                    "SLEPc",
                    "TDA"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.bse.gw_type",
                    "results.method.simulation.bse.gw_type__suggestion"
                  ]
                },
                "name": "gw_type",
                "description": "GW Hedin's self-consistency cycle:\n\n| Name      | Description                      | Reference             |\n\n| --------- | -------------------------------- | --------------------- |\n\n| `'G0W0'`  | single-shot                      | PRB 74, 035101 (2006) |\n\n| `'scGW'`  | self-consistent G and W               | PRB 75, 235102 (2007) |\n\n| `'scGW0'` | self-consistent G with fixed W0  | PRB 54, 8411 (1996)   |\n\n| `'scG0W'` | self-consistent W with fixed G0  | -                     |\n\n| `'ev-scGW0'`  | eigenvalues self-consistent G with fixed W0   | PRB 34, 5390 (1986)   |\n\n| `'ev-scGW'`  | eigenvalues self-consistent G and W   | PRB 74, 045102 (2006)   |\n\n| `'qp-scGW0'`  | quasiparticle self-consistent G with fixed W0 | PRL 99, 115109 (2007) |\n\n| `'qp-scGW'`  | quasiparticle self-consistent G and W | PRL 96, 226402 (2006) |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "G0W0",
                    "ev-scGW",
                    "ev-scGW0",
                    "qp-scGW",
                    "qp-scGW0",
                    "scG0W",
                    "scGW",
                    "scGW0"
                  ]
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 20,
            "m_parent_sub_section": "section_definitions",
            "name": "DMFT",
            "description": "\n        Methodology for a DMFT calculation.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.dmft.impurity_solver_type",
                    "results.method.simulation.dmft.impurity_solver_type__suggestion"
                  ]
                },
                "name": "impurity_solver_type",
                "description": "Impurity solver method used in the DMFT loop:\n\n| Name              | Reference                            |\n\n| ----------------- | ------------------------------------ |\n\n| `'CT-INT'`        | Rubtsov et al., JEPT Lett 80 (2004)  |\n\n| `'CT-HYB'`        | Werner et al., PRL 97 (2006)         |\n\n| `'CT-AUX'`        | Gull et al., EPL 82 (2008)           |\n\n| `'ED'`            | Caffarrel et al, PRL 72 (1994)       |\n\n| `'NRG'`           | Bulla et al., RMP 80 (2008)          |\n\n| `'MPS'`           | Ganahl et al., PRB 90 (2014)         |\n\n| `'IPT'`           | Georges et al., PRB 45 (1992)        |\n\n| `'NCA'`           | Pruschke et al., PRB 47 (1993)       |\n\n| `'OCA'`           | Pruschke et al., PRB 47 (1993)       |\n\n| `'slave_bosons'`  | Kotliar et al., PRL 57 (1986)        |\n\n| `'hubbard_I'`     | -                                    |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "CT-AUX",
                    "CT-HYB",
                    "CT-INT",
                    "ED",
                    "IPT",
                    "MPS",
                    "NCA",
                    "NRG",
                    "OCA",
                    "hubbard_I",
                    "slave_bosons"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.dmft.inverse_temperature"
                  ]
                },
                "name": "inverse_temperature",
                "description": "Inverse temperature = 1/(kB*T).",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "1 / joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.dmft.magnetic_state",
                    "results.method.simulation.dmft.magnetic_state__suggestion"
                  ]
                },
                "name": "magnetic_state",
                "description": "Magnetic state in which the DMFT calculation is done.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "antiferromagnetic",
                    "ferromagnetic",
                    "paramagnetic"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.dmft.u"
                  ]
                },
                "name": "u",
                "description": "Value of the (intraorbital) Hubbard interaction",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.dmft.jh"
                  ]
                },
                "name": "jh",
                "description": "Value of the (interorbital) Hund's coupling.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.dmft.analytical_continuation"
                  ]
                },
                "name": "analytical_continuation",
                "description": "Analytical continuation used to continuate the imaginary space Green's functions into\nthe real frequencies space.\n\n| Name           | Description         | Reference                        |\n\n| -------------- | ------------------- | -------------------------------- |\n\n| `'Pade'` | Pade's approximant  | https://www.sciencedirect.com/science/article/pii/0021999173901277?via%3Dihub |\n\n| `'MaxEnt'` | Maximum Entropy method | https://journals.aps.org/prb/abstract/10.1103/PhysRevB.41.2380 |\n\n| `'SVD'` | Singular value decomposition | https://journals.aps.org/prl/abstract/10.1103/PhysRevLett.75.517 |\n\n| `'Stochastic'` | Stochastic method | https://journals.aps.org/prb/abstract/10.1103/PhysRevB.57.10287 |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "MaxEnt",
                    "Pade",
                    "SVD",
                    "Stochastic"
                  ]
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 21,
            "m_parent_sub_section": "section_definitions",
            "name": "QuantumCircuit",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "processors",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "0..*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "number_of_registers",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "simulated",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 22,
            "m_parent_sub_section": "section_definitions",
            "name": "QuantumCMS",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "transformation",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "quantum_computer_system",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "quantum_computing_libraries",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "0..*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "computation_datetime",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Datetime"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "number_of_shots",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "quantum_volume",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                }
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "quantum_circuit",
                "sub_section": "/packages/13/section_definitions/21"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 23,
            "m_parent_sub_section": "section_definitions",
            "name": "Precision",
            "description": "\n        Contains parameters for controlling or evaluating the convergence of the electronic structure.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.precision.k_line_density"
                  ]
                },
                "name": "k_line_density",
                "description": "Amount of sampled k-points per unit reciprocal length along each axis.\nContains the least precise density out of all axes.\nShould only be compared between calulations of similar dimensionality.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.precision.native_tier"
                  ]
                },
                "name": "native_tier",
                "description": "The code-specific tag indicating the precision used\nfor the basis set and meshes of numerical routines.\n\nSupported codes (with hyperlinks to the relevant documentation):\n- [`VASP`](https://www.vasp.at/wiki/index.php/PREC)\n- `FHI-aims`\n- [`CASTEP`](http://www.tcm.phy.cam.ac.uk/castep/documentation/WebHelp/CASTEP.html#modules/castep/tskcastepsetelecquality.htm?Highlight=ultra-fine)",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.precision.basis_set",
                    "results.method.simulation.precision.basis_set__suggestion"
                  ]
                },
                "name": "basis_set",
                "description": "The type of basis set used by the program.\n\n| Value                          |                       Description |\n| ------------------------------ | --------------------------------- |\n| `'APW'`                        | Augmented plane waves             |\n| `'LAPW'`                       | Linearized augmented plane waves  |\n| `'APW+lo'`             | Augmented plane waves with local orbitals |\n| `'LAPW+lo'` | Linearized augmented plane waves with local orbitals |\n| `'(L)APW'`                     |     A combination of APW and LAPW |\n| `'(L)APW+lo'`  | A combination of APW and LAPW with local orbitals |\n| `'plane waves'`                | Plane waves                       |\n| `'gaussians + plane waves'`    | Basis set of the Quickstep algorithm (DOI: 10.1016/j.cpc.2004.12.014) |\n| `'real-space grid'`            | Real-space grid                   |\n| `'suppport functions'`         | Support functions                 |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "(L)APW",
                    "(L)APW+lo",
                    "APW",
                    "APW+lo",
                    "LAPW",
                    "LAPW+lo",
                    "atom-centered orbitals",
                    "gaussians + plane waves",
                    "not processed",
                    "plane waves",
                    "real-space grid",
                    "support functions",
                    "unavailable"
                  ]
                },
                "default": "unavailable"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.precision.planewave_cutoff"
                  ]
                },
                "name": "planewave_cutoff",
                "description": "Spherical cutoff in reciprocal space for a plane-wave basis set. It is the energy\nof the highest plane-wave ($\\frac{\\hbar^2|k+G|^2}{2m_e}$) included in the basis\nset.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.precision.apw_cutoff"
                  ]
                },
                "name": "apw_cutoff",
                "description": "The spherical cutoff parameter for the interstitial plane waves in the LAPW family.\nThis cutoff is unitless, referring to the product of the smallest muffin-tin radius\nand the length of the cutoff reciprocal vector ($r_{MT} * |K_{cut}|$).",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 24,
            "m_parent_sub_section": "section_definitions",
            "name": "Simulation",
            "description": "\n        Contains method details for a simulation entry.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.program_name",
                    "results.method.simulation.program_name__suggestion"
                  ]
                },
                "name": "program_name",
                "description": "The name of the used program.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "default": "not processed"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.program_version",
                    "results.method.simulation.program_version__suggestion"
                  ]
                },
                "name": "program_version",
                "description": "The version of the used program.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "default": "not processed"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.simulation.program_version_internal",
                    "results.method.simulation.program_version_internal__suggestion"
                  ]
                },
                "name": "program_version_internal",
                "description": "The version tag used internally by the development team.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "default": "not processed"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "dft",
                "sub_section": "/packages/13/section_definitions/15",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "tb",
                "sub_section": "/packages/13/section_definitions/16",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "gw",
                "sub_section": "/packages/13/section_definitions/18",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 3,
                "m_parent_sub_section": "sub_sections",
                "name": "bse",
                "sub_section": "/packages/13/section_definitions/19",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 4,
                "m_parent_sub_section": "sub_sections",
                "name": "dmft",
                "sub_section": "/packages/13/section_definitions/20",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 5,
                "m_parent_sub_section": "sub_sections",
                "name": "quantum_cms",
                "sub_section": "/packages/13/section_definitions/22",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 6,
                "m_parent_sub_section": "sub_sections",
                "name": "precision",
                "sub_section": "/packages/13/section_definitions/23",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 25,
            "m_parent_sub_section": "section_definitions",
            "name": "XRDMethod",
            "description": "\n        Methodology for an X-Ray Diffraction measurement.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.measurement.xrd.diffraction_method_name",
                    "results.method.measurement.xrd.diffraction_method_name__suggestion"
                  ]
                },
                "name": "diffraction_method_name",
                "description": "The diffraction method used to obtain the diffraction pattern.\n| X-Ray Diffraction Method                                   | Description                                                                                                                                                                                                 |\n|------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Powder X-Ray Diffraction (PXRD)**                        | The term \"powder\" refers more to the random orientation of small crystallites than to the physical form of the sample. Can be used with non-powder samples if they present random crystallite orientations. |\n| **Single Crystal X-Ray Diffraction (SCXRD)**               | Used for determining the atomic structure of a single crystal.                                                                                                                                              |\n| **High-Resolution X-Ray Diffraction (HRXRD)**              | A technique typically used for detailed characterization of epitaxial thin films using precise diffraction measurements.                                                                                    |\n| **Small-Angle X-Ray Scattering (SAXS)**                    | Used for studying nanostructures in the size range of 1-100 nm. Provides information on particle size, shape, and distribution.                                                                             |\n| **X-Ray Reflectivity (XRR)**                               | Used to study thin film layers, interfaces, and multilayers. Provides info on film thickness, density, and roughness.                                                                                       |\n| **Grazing Incidence X-Ray Diffraction (GIXRD)**            | Primarily used for the analysis of thin films with the incident beam at a fixed shallow angle.                                                                                                              |\n| **Reciprocal Space Mapping (RSM)**                         | High-resolution XRD method to measure diffracted intensity in a 2-dimensional region of reciprocal space. Provides information about the real-structure (lattice mismatch, domain structure, stress and defects) in single-crystalline and epitaxial samples.|",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "Grazing Incidence X-Ray Diffraction (GIXRD)",
                    "High-Resolution X-Ray Diffraction (HRXRD)",
                    "Powder X-Ray Diffraction (PXRD)",
                    "Reciprocal Space Mapping (RSM)",
                    "Single Crystal X-Ray Diffraction (SCXRD)",
                    "Small-Angle X-Ray Scattering (SAXS)",
                    "X-Ray Reflectivity (XRR)",
                    "unavailable"
                  ]
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 26,
            "m_parent_sub_section": "section_definitions",
            "name": "MeasurementMethod",
            "description": "\n        Contains method details for a measurement entry.\n        ",
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "xrd",
                "sub_section": "/packages/13/section_definitions/25",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 27,
            "m_parent_sub_section": "section_definitions",
            "name": "Method",
            "description": "\n        Contains a summary of the methodology that has been used in this entry.\n        This methodology applies to all of the reported properties and\n        determines the result of a single energy evalution. The individual\n        properties may be further methodological details affect e.g. the\n        sampling.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.method_id"
                  ]
                },
                "name": "method_id",
                "description": "Identifier for the used method. Only available for a subset of entries\nfor which the methodology has been identified with precision.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "equation_of_state_id",
                "description": "Identifier that can be used to group entries within an equation of\nstate calculation. Only available for a subset of entries for which the\nstructure and methodology have been identified with precision.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "parameter_variation_id",
                "description": "Identifier that can be used to group entries that target the same\nstructure but with varying parameter settings. Only available for a\nsubset of entries for which the structure and methodology have been\nidentified with precision.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.method_name",
                    "results.method.method_name__suggestion"
                  ]
                },
                "name": "method_name",
                "description": "Common name for the used method.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "BSE",
                    "CoreHole",
                    "DFT",
                    "DMFT",
                    "EELS",
                    "GW",
                    "NMR",
                    "TB",
                    "XPS",
                    "XRD",
                    "kMC",
                    "quantum cms",
                    "unavailable"
                  ]
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.method.workflow_name",
                    "results.method.workflow_name__suggestion"
                  ]
                },
                "name": "workflow_name",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "simulation",
                "sub_section": "/packages/13/section_definitions/24",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "measurement",
                "sub_section": "/packages/13/section_definitions/26",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 28,
            "m_parent_sub_section": "section_definitions",
            "name": "MolecularDynamics",
            "description": "\n        Methodology for molecular dynamics.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.thermodynamic.trajectory.provenance.molecular_dynamics.time_step"
                  ]
                },
                "name": "time_step",
                "description": "The timestep at which the numerical integration is performed.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.thermodynamic.trajectory.provenance.molecular_dynamics.ensemble_type"
                  ]
                },
                "name": "ensemble_type",
                "description": "The type of thermodynamic ensemble that was simulated.\n\nAllowed values are:\n\n| Thermodynamic Ensemble          | Description                               |\n\n| ---------------------- | ----------------------------------------- |\n\n| `\"NVE\"`           | Constant number of particles, volume, and energy |\n\n| `\"NVT\"`           | Constant number of particles, volume, and temperature |\n\n| `\"NPT\"`           | Constant number of particles, pressure, and temperature |\n\n| `\"NPH\"`           | Constant number of particles, pressure, and enthalpy |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "NPH",
                    "NPT",
                    "NVE",
                    "NVT"
                  ]
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 29,
            "m_parent_sub_section": "section_definitions",
            "name": "MDProvenance",
            "description": "\n        Contains provenance information for properties derived from molecular\n        dynamics simulations.\n        ",
            "base_sections": [
              "/packages/26/section_definitions/0"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "molecular_dynamics",
                "sub_section": "/packages/13/section_definitions/28",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 30,
            "m_parent_sub_section": "section_definitions",
            "name": "MDPropertySection",
            "description": "\n        Base class for referring to molecular dynamics properties.\n        ",
            "base_sections": [
              "/packages/26/section_definitions/1"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "provenance",
                "sub_section": "/packages/13/section_definitions/29",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 31,
            "m_parent_sub_section": "section_definitions",
            "name": "DOS",
            "description": "\n        Base class for density of states information.\n\n        OLD VERSION: it will eventually be deprecated, please, don't use it!\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "energies",
                "description": "Array containing the set of discrete energy values for the density of\nstates (DOS).",
                "type": {
                  "type_kind": "quantity_reference",
                  "type_data": "/packages/10/section_definitions/17/quantities/1"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "total",
                "description": "Density of states (DOS) values for the entire system and all species.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/10/section_definitions/16"
                },
                "shape": [
                  "*"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 32,
            "m_parent_sub_section": "section_definitions",
            "name": "DOSElectronic",
            "description": "\n        Contains the total electronic density of states.\n\n        OLD VERSION: it will eventually be deprecated.\n        ",
            "base_sections": [
              "/packages/13/section_definitions/31"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "label",
                "description": "Label to identify the DOS data, e.g. the method employed.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.electronic.dos_electronic.spin_polarized"
                  ]
                },
                "name": "spin_polarized",
                "description": "Whether the DOS is spin-polarized, i.e. is contains channels for both\nspin values.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "energy_fermi",
                "description": "Fermi energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "m_annotations": {
                  "elasticsearch": [
                    "band_gap"
                  ]
                },
                "name": "band_gap",
                "sub_section": "/packages/29/section_definitions/8",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 33,
            "m_parent_sub_section": "section_definitions",
            "name": "DOSNew",
            "description": "\n        Section containign the density of states data.\n\n        It includes the total DOS and the projected DOS values. We differentiate `species_projected` as the\n        projected DOS for same atomic species, `atom_projected` as the projected DOS for different\n        atoms in the cell, and `orbital_projected` as the projected DOS for the orbitals of each\n        atom.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "energies",
                "description": "Total DOS values for the entire system and all species.",
                "type": {
                  "type_kind": "quantity_reference",
                  "type_data": "/packages/10/section_definitions/17/quantities/1"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "total",
                "description": "Total DOS values for the entire system and all species.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/10/section_definitions/16"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "species_projected",
                "description": "Projected DOS values per species.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/10/section_definitions/16"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "atom_projected",
                "description": "Projected DOS values per atom.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/10/section_definitions/16"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "orbital_projected",
                "description": "Projected DOS values per orbital and per atom.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/10/section_definitions/16"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "spin_channel",
                "description": "Spin channel of the corresponding DOS. It can take values of 0 or 1.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "energy_fermi",
                "description": "Fermi energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "energy_ref",
                "description": "Energy level denoting the origin along the energy axis, used for comparison and visualization.\nIt is defined as the energy_highest_occupied and does not necessarily coincide with energy_fermi.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "m_annotations": {
                  "elasticsearch": [
                    "band_gap"
                  ]
                },
                "name": "band_gap",
                "sub_section": "/packages/29/section_definitions/8",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 34,
            "m_parent_sub_section": "section_definitions",
            "name": "DOSPhonon",
            "description": "\n        Contains the phonon density of states.\n        ",
            "base_sections": [
              "/packages/13/section_definitions/31"
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 35,
            "m_parent_sub_section": "section_definitions",
            "name": "DOSElectronicNew",
            "description": "\n        Contains the electronic Density of States (DOS). This section can be repeated to refer to\n        different methodologies (e.g., label = 'DFT', 'GW', 'TB', etc.), and it can be spin-polarized\n        or not. The sub-section data points to each (if present) spin channels.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "label",
                "description": "Label to identify the method employed to obtain the DOS data ('DFT', 'GW', etc.).",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.electronic.dos_electronic_new.spin_polarized"
                  ]
                },
                "name": "spin_polarized",
                "description": "Whether the DOS is spin-polarized, i.e. is contains channels for both\nspin values.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.electronic.dos_electronic_new.has_projected"
                  ]
                },
                "name": "has_projected",
                "description": "Whether the DOS has information about projections (species-, atom-, and/or orbital-\nprojected).",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                }
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "data",
                "sub_section": "/packages/13/section_definitions/33",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 36,
            "m_parent_sub_section": "section_definitions",
            "name": "BandStructure",
            "description": "\n        Base class for band structure information.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "label",
                "description": "Label to identify the bandstructure data, e.g. the method employed.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "reciprocal_cell",
                "description": "The reciprocal cell within which the band structure is calculated.",
                "type": {
                  "type_kind": "quantity_reference",
                  "type_data": "/packages/10/section_definitions/14/quantities/1"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "segment",
                "description": "Collection of linear path segments in the reciprocal space. The\nsegments are represented as third-order tensors: one dimension for the\nspin channels, one for the sequence of reciprocal space points for the\nsegment, and one for the sequence of eigenvalues at a given point.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/10/section_definitions/13"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "path_standard",
                "description": "String that identifies the possible standard used in sampling the\nreciprocal space.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 37,
            "m_parent_sub_section": "section_definitions",
            "name": "BandStructurePhonon",
            "description": "\n        This section stores information on a vibrational band structure\n        evaluation along one-dimensional pathways in the reciprocal space.\n        ",
            "base_sections": [
              "/packages/13/section_definitions/36"
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 38,
            "m_parent_sub_section": "section_definitions",
            "name": "BandStructureElectronic",
            "description": "\n        This section stores information on a electonic band structure\n        evaluation along one-dimensional pathways in the reciprocal space.\n        ",
            "base_sections": [
              "/packages/13/section_definitions/36"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.electronic.band_structure_electronic.spin_polarized"
                  ]
                },
                "name": "spin_polarized",
                "description": "Whether the band structure is spin-polarized, i.e. is contains channels\nfor both spin values.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "energy_fermi",
                "description": "Fermi energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "m_annotations": {
                  "elasticsearch": [
                    "band_gap"
                  ]
                },
                "name": "band_gap",
                "sub_section": "/packages/29/section_definitions/8",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 39,
            "m_parent_sub_section": "section_definitions",
            "name": "GreensFunctionsElectronic",
            "description": "\n        Base class for Green's functions information.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "Type of Green's function calculated from the mapping of the Hubbard-Kanamori model\ninto the Anderson impurity model. These calculations are converged if both types of\nGreen's functions converge to each other (G_impurity == G_lattice).",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "impurity",
                    "lattice"
                  ]
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "label",
                "description": "Label to identify the Greens functions data, e.g. the method employed.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "tau",
                "description": "Array containing the set of discrete imaginary times.",
                "type": {
                  "type_kind": "quantity_reference",
                  "type_data": "/packages/10/section_definitions/29/quantities/2"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "matsubara_freq",
                "description": "Array containing the set of discrete imaginary (Matsubara) frequencies.",
                "type": {
                  "type_kind": "quantity_reference",
                  "type_data": "/packages/10/section_definitions/29/quantities/1"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "frequencies",
                "description": "Array containing the set of discrete real frequencies.",
                "type": {
                  "type_kind": "quantity_reference",
                  "type_data": "/packages/10/section_definitions/29/quantities/3"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "greens_function_tau",
                "description": "Green's functions values in imaginary times.",
                "type": {
                  "type_kind": "quantity_reference",
                  "type_data": "/packages/10/section_definitions/29/quantities/8"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "greens_function_iw",
                "description": "Green's functions values in imaginary (Matsubara) frequencies.",
                "type": {
                  "type_kind": "quantity_reference",
                  "type_data": "/packages/10/section_definitions/29/quantities/6"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "self_energy_iw",
                "description": "Self-energy values in imaginary (Matsubara) frequencies.",
                "type": {
                  "type_kind": "quantity_reference",
                  "type_data": "/packages/10/section_definitions/29/quantities/5"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "greens_function_freq",
                "description": "Green's function values in real frequencies.",
                "type": {
                  "type_kind": "quantity_reference",
                  "type_data": "/packages/10/section_definitions/29/quantities/10"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "self_energy_freq",
                "description": "Self-energy values in real frequencies.",
                "type": {
                  "type_kind": "quantity_reference",
                  "type_data": "/packages/10/section_definitions/29/quantities/9"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "hybridization_function_freq",
                "description": "Hybridization function values in real frequencies.",
                "type": {
                  "type_kind": "quantity_reference",
                  "type_data": "/packages/10/section_definitions/29/quantities/11"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "name": "orbital_occupations",
                "description": "Orbital occupation per correlated atom in the unit cell and per spin.",
                "type": {
                  "type_kind": "quantity_reference",
                  "type_data": "/packages/10/section_definitions/29/quantities/12"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "name": "quasiparticle_weights",
                "description": "Quasiparticle weights of each orbital per site and spin. Calculated from:\n    Z = inv(1.0 - d [Re Sigma] / dw at w=0)\nit takes values \u2208 [0.0, 1.0], being Z=1 non-correlated, and Z=0 in a Mott state.",
                "type": {
                  "type_kind": "quantity_reference",
                  "type_data": "/packages/10/section_definitions/29/quantities/13"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 13,
                "m_parent_sub_section": "quantities",
                "name": "chemical_potential",
                "description": "Chemical potential.",
                "type": {
                  "type_kind": "quantity_reference",
                  "type_data": "/packages/10/section_definitions/29/quantities/4"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 40,
            "m_parent_sub_section": "section_definitions",
            "name": "HeatCapacityConstantVolume",
            "description": "\n        Contains the values of the specific (per mass) and isochoric (constant\n        volume) heat capacity at different temperatures.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "heat_capacities",
                "description": "Specific heat capacity values at constant volume.",
                "type": {
                  "type_kind": "quantity_reference",
                  "type_data": "/packages/42/section_definitions/2/quantities/5"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "temperatures",
                "description": "The temperatures at which heat capacities are calculated.",
                "type": {
                  "type_kind": "quantity_reference",
                  "type_data": "/packages/42/section_definitions/2/quantities/1"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 41,
            "m_parent_sub_section": "section_definitions",
            "name": "EnergyFreeHelmholtz",
            "description": "\n        Contains the values of the Helmholtz free energy per atom at constant\n        volume and at different temperatures.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "energies",
                "description": "The Helmholtz free energies per atom at constant volume.",
                "type": {
                  "type_kind": "quantity_reference",
                  "type_data": "/packages/42/section_definitions/2/quantities/7"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "temperatures",
                "description": "The temperatures at which Helmholtz free energies are calculated.",
                "type": {
                  "type_kind": "quantity_reference",
                  "type_data": "/packages/42/section_definitions/2/quantities/1"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 42,
            "m_parent_sub_section": "section_definitions",
            "name": "VibrationalProperties",
            "description": "\n        Vibrational properties.\n        ",
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "band_structure_phonon",
                "sub_section": "/packages/13/section_definitions/37",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "dos_phonon",
                "sub_section": "/packages/13/section_definitions/34",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "heat_capacity_constant_volume",
                "sub_section": "/packages/13/section_definitions/40",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 3,
                "m_parent_sub_section": "sub_sections",
                "name": "energy_free_helmholtz",
                "sub_section": "/packages/13/section_definitions/41",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 43,
            "m_parent_sub_section": "section_definitions",
            "name": "EnergyVolumeCurve",
            "description": "\n        Energy volume curve.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.mechanical.energy_volume_curve.type",
                    "results.properties.mechanical.energy_volume_curve.type__suggestion"
                  ]
                },
                "name": "type",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "birch_euler",
                    "birch_lagrange",
                    "birch_murnaghan",
                    "mie_gruneisen",
                    "murnaghan",
                    "pack_evans_james",
                    "pourier_tarantola",
                    "raw",
                    "tait",
                    "vinet"
                  ]
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "volumes",
                "type": {
                  "type_kind": "quantity_reference",
                  "type_data": "/packages/33/section_definitions/2/quantities/1"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "energies_raw",
                "type": {
                  "type_kind": "quantity_reference",
                  "type_data": "/packages/33/section_definitions/2/quantities/2"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "energies_fit",
                "type": {
                  "type_kind": "quantity_reference",
                  "type_data": "/packages/33/section_definitions/1/quantities/1"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 44,
            "m_parent_sub_section": "section_definitions",
            "name": "BulkModulus",
            "description": "\n        Contains bulk modulus values calculated with different methodologies.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.mechanical.bulk_modulus.type",
                    "results.properties.mechanical.bulk_modulus.type__suggestion"
                  ]
                },
                "name": "type",
                "description": "Describes the methodology for obtaining the value.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "birch_euler",
                    "birch_lagrange",
                    "birch_murnaghan",
                    "mie_gruneisen",
                    "murnaghan",
                    "pack_evans_james",
                    "pourier_tarantola",
                    "reuss_average",
                    "tait",
                    "vinet",
                    "voigt_average",
                    "voigt_reuss_hill_average"
                  ]
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.mechanical.bulk_modulus.value"
                  ]
                },
                "name": "value",
                "description": "Bulk modulus value.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "pascal"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 45,
            "m_parent_sub_section": "section_definitions",
            "name": "ShearModulus",
            "description": "\n        Contains shear modulus values calculated with different methodologies.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.mechanical.shear_modulus.type",
                    "results.properties.mechanical.shear_modulus.type__suggestion"
                  ]
                },
                "name": "type",
                "description": "Describes the methodology for obtaining the value.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "reuss_average",
                    "voigt_average",
                    "voigt_reuss_hill_average"
                  ]
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.mechanical.shear_modulus.value"
                  ]
                },
                "name": "value",
                "description": "Shear modulus value.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "pascal"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 46,
            "m_parent_sub_section": "section_definitions",
            "name": "GeometryOptimization",
            "description": "\n        Geometry optimization results and settings.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "trajectory",
                "description": "List of references to each section_single_configuration_calculation in\nthe optimization trajectory.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/10/section_definitions/40"
                },
                "shape": [
                  "0..*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "system_optimized",
                "description": "Contains the optimized geometry that is the result of a geometry optimization.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/9/section_definitions/9"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "energies",
                "description": "List of energy_total values gathered from the single configuration\ncalculations that are a part of the optimization trajectory.",
                "type": {
                  "type_kind": "quantity_reference",
                  "type_data": "/packages/34/section_definitions/1/quantities/1"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "type",
                "description": "A name of the task. Will be used as a label for the input or output in workflow representations.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.geometry_optimization.convergence_tolerance_energy_difference"
                  ]
                },
                "name": "convergence_tolerance_energy_difference",
                "description": "The input energy difference tolerance criterion.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.geometry_optimization.convergence_tolerance_force_maximum"
                  ]
                },
                "name": "convergence_tolerance_force_maximum",
                "description": "The input maximum net force tolerance criterion.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "newton"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.geometry_optimization.final_force_maximum"
                  ]
                },
                "name": "final_force_maximum",
                "description": "The maximum net force in the last optimization step.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "newton"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.geometry_optimization.final_energy_difference"
                  ]
                },
                "name": "final_energy_difference",
                "description": "The difference in the energy_total between the last two steps during\noptimization.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.geometry_optimization.final_displacement_maximum"
                  ]
                },
                "name": "final_displacement_maximum",
                "description": "The maximum displacement in the last optimization step with respect to previous.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 47,
            "m_parent_sub_section": "section_definitions",
            "name": "MechanicalProperties",
            "description": "\n        Mechanical properties.\n        ",
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "energy_volume_curve",
                "sub_section": "/packages/13/section_definitions/43",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "m_annotations": {
                  "elasticsearch": [
                    "bulk_modulus"
                  ]
                },
                "name": "bulk_modulus",
                "sub_section": "/packages/13/section_definitions/44",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "m_annotations": {
                  "elasticsearch": [
                    "shear_modulus"
                  ]
                },
                "name": "shear_modulus",
                "sub_section": "/packages/13/section_definitions/45",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 48,
            "m_parent_sub_section": "section_definitions",
            "name": "ElectricFieldGradient",
            "description": "\n        Base class for the electric field gradient information. This section is relevant\n        for NMR and describes the potential generated my the nuclei in the system.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "contribution",
                "description": "Type of contribution to the electric field gradient (EFG). The total EFG is\ncomposed of `local` and `non_local` contributions.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "local",
                    "non_local",
                    "total"
                  ]
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "type": {
                  "type_kind": "quantity_reference",
                  "type_data": "/packages/10/section_definitions/35/quantities/1"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 49,
            "m_parent_sub_section": "section_definitions",
            "name": "ElectronicProperties",
            "description": "\n        Electronic properties.\n        ",
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "m_annotations": {
                  "elasticsearch": [
                    "band_gap"
                  ]
                },
                "name": "band_gap",
                "sub_section": "/packages/29/section_definitions/9",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "dos_electronic",
                "sub_section": "/packages/13/section_definitions/32",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "dos_electronic_new",
                "sub_section": "/packages/13/section_definitions/35",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 3,
                "m_parent_sub_section": "sub_sections",
                "name": "band_structure_electronic",
                "sub_section": "/packages/13/section_definitions/38",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 4,
                "m_parent_sub_section": "sub_sections",
                "name": "greens_functions_electronic",
                "sub_section": "/packages/13/section_definitions/39",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 5,
                "m_parent_sub_section": "sub_sections",
                "name": "electric_field_gradient",
                "sub_section": "/packages/13/section_definitions/48",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 50,
            "m_parent_sub_section": "section_definitions",
            "name": "MagneticShielding",
            "description": "\n        Base class for the atomic magnetic shielding information.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "type": {
                  "type_kind": "quantity_reference",
                  "type_data": "/packages/10/section_definitions/34/quantities/0"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 51,
            "m_parent_sub_section": "section_definitions",
            "name": "SpinSpinCoupling",
            "description": "\n        Base class for the spin-spin coupling information.\n        ",
            "base_sections": [
              "/packages/13/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "contribution",
                "description": "Type of contribution to the indirect spin-spin coupling. The total indirect spin-spin\ncoupling is composed of:\n\n    `total` = `direct_dipolar` + J_coupling\n\nWhere the J_coupling is:\n    J_coupling = `fermi_contact`\n                + `spin_dipolar`\n                + `orbital_diamagnetic`\n                + `orbital_paramagnetic`\n\nSee https://pubs.acs.org/doi/full/10.1021/cr300108a.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "direct_dipolar",
                    "fermi_contact",
                    "orbital_diamagnetic",
                    "orbital_paramagnetic",
                    "spin_dipolar",
                    "total"
                  ]
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "type": {
                  "type_kind": "quantity_reference",
                  "type_data": "/packages/10/section_definitions/36/quantities/1"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "reduced_value",
                "type": {
                  "type_kind": "quantity_reference",
                  "type_data": "/packages/10/section_definitions/36/quantities/2"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 52,
            "m_parent_sub_section": "section_definitions",
            "name": "MagneticSusceptibility",
            "description": "\n        Base class for the magnetic susceptibility information.\n        ",
            "base_sections": [
              "/packages/13/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "scale_dimension",
                "description": "Identifier of the scale dimension of the magnetic susceptibility tensor.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "macroscopic",
                    "microscopic"
                  ]
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "type": {
                  "type_kind": "quantity_reference",
                  "type_data": "/packages/10/section_definitions/37/quantities/1"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 53,
            "m_parent_sub_section": "section_definitions",
            "name": "MagneticProperties",
            "description": "\n        Magnetic properties.\n        ",
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "magnetic_shielding",
                "sub_section": "/packages/13/section_definitions/50",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "spin_spin_coupling",
                "sub_section": "/packages/13/section_definitions/51",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "magnetic_susceptibility",
                "sub_section": "/packages/13/section_definitions/52",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 54,
            "m_parent_sub_section": "section_definitions",
            "name": "QuantityDynamic",
            "description": "\n        Contains the values for a quantity at different times.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "time",
                "description": "The explicit times at which the values are evaluated. Provide either\nthis or time_step and time_start.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "time_step",
                "description": "The time step between successive evaluations. Provide either\nthis and time_start or the explicit times.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "time_start",
                "description": "The time at which the evaluation started. Provide either this and\ntime_step or the explicit times.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "second"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 55,
            "m_parent_sub_section": "section_definitions",
            "name": "VolumeDynamic",
            "description": "\n        Contains volume values evaluated at different times.\n        ",
            "base_sections": [
              "/packages/13/section_definitions/54"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "The volume values.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter ** 3"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 56,
            "m_parent_sub_section": "section_definitions",
            "name": "PressureDynamic",
            "description": "\n        Contains pressure values evaluated at different times.\n        ",
            "base_sections": [
              "/packages/13/section_definitions/54"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "The pressure values.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 57,
            "m_parent_sub_section": "section_definitions",
            "name": "TemperatureDynamic",
            "description": "\n        Contains temperature values evaluated at different times.\n        ",
            "base_sections": [
              "/packages/13/section_definitions/54"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "The temperature value.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "kelvin"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 58,
            "m_parent_sub_section": "section_definitions",
            "name": "EnergyDynamic",
            "description": "\n        Contains energy values evaluated at different times.\n        ",
            "base_sections": [
              "/packages/13/section_definitions/54"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "The energy values.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 59,
            "m_parent_sub_section": "section_definitions",
            "name": "Trajectory",
            "description": "\n        Thermodynamic properties reported for an ensemble evolving in time.\n        ",
            "base_sections": [
              "/packages/13/section_definitions/30"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.thermodynamic.trajectory.available_properties"
                  ]
                },
                "name": "available_properties",
                "description": "Subset of the property names that are present in this trajectory.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "energy_potential",
                    "pressure",
                    "temperature",
                    "volume"
                  ]
                },
                "shape": [
                  "0..*"
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "temperature",
                "sub_section": "/packages/13/section_definitions/57",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "pressure",
                "sub_section": "/packages/13/section_definitions/56",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "volume",
                "sub_section": "/packages/13/section_definitions/55",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 3,
                "m_parent_sub_section": "sub_sections",
                "name": "energy_potential",
                "sub_section": "/packages/13/section_definitions/58",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 60,
            "m_parent_sub_section": "section_definitions",
            "name": "ThermodynamicProperties",
            "description": "\n        Thermodynamic properties.\n        ",
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "m_annotations": {
                  "elasticsearch": [
                    "trajectory"
                  ]
                },
                "name": "trajectory",
                "sub_section": "/packages/13/section_definitions/59",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 61,
            "m_parent_sub_section": "section_definitions",
            "name": "RadiusOfGyration",
            "description": "\n        Contains Radius of Gyration values as a trajectory.\n        ",
            "base_sections": [
              "/packages/13/section_definitions/54",
              "/packages/13/section_definitions/30"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.structural.radius_of_gyration.kind",
                    "results.properties.structural.radius_of_gyration.kind__suggestion"
                  ]
                },
                "name": "kind",
                "description": "Kind of the quantity.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.structural.radius_of_gyration.label",
                    "results.properties.structural.radius_of_gyration.label__suggestion"
                  ]
                },
                "name": "label",
                "description": "Describes the atoms or molecule types involved in determining the property.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "atomsgroup_ref",
                "description": "References to the atoms_group section containing the molecule for which Rg was calculated.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/9/section_definitions/0"
                },
                "shape": [
                  1
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Value of Rg.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 62,
            "m_parent_sub_section": "section_definitions",
            "name": "RadialDistributionFunction",
            "description": "\n        Radial distribution function.\n        ",
            "base_sections": [
              "/packages/13/section_definitions/30"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.dynamical.mean_squared_displacement.type",
                    "results.properties.dynamical.mean_squared_displacement.type__suggestion"
                  ]
                },
                "name": "type",
                "description": "Describes if the observable is calculated at the molecular or atomic level.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "atomic",
                    "molecular"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.dynamical.mean_squared_displacement.label",
                    "results.properties.dynamical.mean_squared_displacement.label__suggestion"
                  ]
                },
                "name": "label",
                "description": "Describes the atoms or molecule types involved in determining the property.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "bins",
                "description": "Distances along which the rdf was calculated.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_bins"
                ],
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "n_bins",
                "description": "Number of bins.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Values of the property.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_bins"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "frame_start",
                "description": "Trajectory frame number where the ensemble averaging starts.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "frame_end",
                "description": "Trajectory frame number where the ensemble averaging ends.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 63,
            "m_parent_sub_section": "section_definitions",
            "name": "DiffractionPattern",
            "description": "\n        Diffraction pattern.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.structural.diffraction_pattern.incident_beam_wavelength"
                  ]
                },
                "name": "incident_beam_wavelength",
                "description": "The wavelength of the incident beam.",
                "links": [
                  "https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-incident-wavelength-field"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "two_theta_angles",
                "description": "Array containing the set of 2-theta angles.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ],
                "unit": "degree"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "intensity",
                "description": "Array containing the set of intensities.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "q_vector",
                "description": "The scattering vector *Q*.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ],
                "unit": "1 / meter"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 64,
            "m_parent_sub_section": "section_definitions",
            "name": "StructuralProperties",
            "description": "\n        Structural properties.\n        ",
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "m_annotations": {
                  "elasticsearch": [
                    "radial_distribution_function"
                  ]
                },
                "name": "radial_distribution_function",
                "sub_section": "/packages/13/section_definitions/62",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "m_annotations": {
                  "elasticsearch": [
                    "radius_of_gyration"
                  ]
                },
                "name": "radius_of_gyration",
                "sub_section": "/packages/13/section_definitions/61",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "m_annotations": {
                  "elasticsearch": [
                    "diffraction_pattern"
                  ]
                },
                "name": "diffraction_pattern",
                "sub_section": "/packages/13/section_definitions/63",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 65,
            "m_parent_sub_section": "section_definitions",
            "name": "MeanSquaredDisplacement",
            "description": "\n        Mean Squared Displacements.\n        ",
            "base_sections": [
              "/packages/13/section_definitions/30"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.dynamical.mean_squared_displacement.type",
                    "results.properties.dynamical.mean_squared_displacement.type__suggestion"
                  ]
                },
                "name": "type",
                "description": "Describes if the observable is calculated at the molecular or atomic level.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "atomic",
                    "molecular"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "direction",
                "description": "Describes the direction in which the correlation function was calculated.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "x",
                    "xy",
                    "xyz",
                    "xz",
                    "y",
                    "yz",
                    "z"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "error_type",
                "description": "Describes the type of error reported for this observable.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.dynamical.mean_squared_displacement.label",
                    "results.properties.dynamical.mean_squared_displacement.label__suggestion"
                  ]
                },
                "name": "label",
                "description": "Describes the atoms or molecule types involved in determining the property.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "n_times",
                "description": "Number of times windows for the calculation of the correlation function.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "times",
                "description": "Time windows used for the calculation of the msds.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_times"
                ],
                "unit": "second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Mean squared displacement values.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_times"
                ],
                "unit": "meter ** 2"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "errors",
                "description": "Error associated with the determination of the msds.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "diffusion_constant_value",
                "description": "Values of the diffusion constants.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter ** 2 / second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "diffusion_constant_error_type",
                "description": "Describes the type of error reported for this observable.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "diffusion_constant_errors",
                "description": "Error associated with the determination of the property.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 66,
            "m_parent_sub_section": "section_definitions",
            "name": "DynamicalProperties",
            "description": "\n        Dynamical properties.\n        ",
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "m_annotations": {
                  "elasticsearch": [
                    "mean_squared_displacement"
                  ]
                },
                "name": "mean_squared_displacement",
                "sub_section": "/packages/13/section_definitions/65",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 67,
            "m_parent_sub_section": "section_definitions",
            "name": "SolarCell",
            "description": "\n        Properties of solar cells.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.optoelectronic.solar_cell.efficiency"
                  ]
                },
                "name": "efficiency",
                "description": "Power conversion effciency of a solar cell in percentage %.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.optoelectronic.solar_cell.fill_factor"
                  ]
                },
                "name": "fill_factor",
                "description": "Fill factor of a solar cell in absolute values (from 0 to 1).",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.optoelectronic.solar_cell.open_circuit_voltage"
                  ]
                },
                "name": "open_circuit_voltage",
                "description": "Open circuit voltage of a solar cell.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "volt"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.optoelectronic.solar_cell.short_circuit_current_density"
                  ]
                },
                "name": "short_circuit_current_density",
                "description": "Short circuit current density of a solar cell.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "ampere / meter ** 2"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.optoelectronic.solar_cell.illumination_intensity"
                  ]
                },
                "name": "illumination_intensity",
                "description": "The light intensity during the IV measurement.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "watt / meter ** 2"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.optoelectronic.solar_cell.device_area"
                  ]
                },
                "name": "device_area",
                "description": "The total area of the cell during IV and stability measurements under illumination.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter ** 2"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.optoelectronic.solar_cell.device_architecture",
                    "results.properties.optoelectronic.solar_cell.device_architecture__suggestion"
                  ]
                },
                "name": "device_architecture",
                "description": "Device architecture of the solar cell. Examples are:\n`pn-Heterojunction`, `pin`, `nip`, ...",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.optoelectronic.solar_cell.device_stack",
                    "results.properties.optoelectronic.solar_cell.device_stack__suggestion"
                  ]
                },
                "name": "device_stack",
                "description": "Layers of the entire device.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "0..*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.optoelectronic.solar_cell.absorber",
                    "results.properties.optoelectronic.solar_cell.absorber__suggestion"
                  ]
                },
                "name": "absorber",
                "description": "Absorber layers used in the solar cell.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "0..*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.optoelectronic.solar_cell.absorber_fabrication",
                    "results.properties.optoelectronic.solar_cell.absorber_fabrication__suggestion"
                  ]
                },
                "name": "absorber_fabrication",
                "description": "Technique describing the fabrication of the absorber layer. Examples are:\n`Spin-coating`, `Evaporation`, `Doctor blading`, ...",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "0..*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.optoelectronic.solar_cell.electron_transport_layer",
                    "results.properties.optoelectronic.solar_cell.electron_transport_layer__suggestion"
                  ]
                },
                "name": "electron_transport_layer",
                "description": "Electron selective contact layers used in the solar cell.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "0..*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.optoelectronic.solar_cell.hole_transport_layer",
                    "results.properties.optoelectronic.solar_cell.hole_transport_layer__suggestion"
                  ]
                },
                "name": "hole_transport_layer",
                "description": "Hole selective contact layers used in the solar cell.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "0..*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.optoelectronic.solar_cell.substrate",
                    "results.properties.optoelectronic.solar_cell.substrate__suggestion"
                  ]
                },
                "name": "substrate",
                "description": "Substrate layers used in the solar cell.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "0..*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 13,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.optoelectronic.solar_cell.back_contact",
                    "results.properties.optoelectronic.solar_cell.back_contact__suggestion"
                  ]
                },
                "name": "back_contact",
                "description": "Back contact layers used in the solar cell.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "0..*"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 68,
            "m_parent_sub_section": "section_definitions",
            "name": "OptoelectronicProperties",
            "description": "\n        Optoelectronic properties.\n        ",
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "solar_cell",
                "sub_section": "/packages/13/section_definitions/67",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 69,
            "m_parent_sub_section": "section_definitions",
            "name": "Reagent",
            "description": "\n        A participant in a catalytic reaction\n        ",
            "links": [
              "https://w3id.org/nfdi4cat/voc4cat_0007005"
            ],
            "more": {
              "label_quantity": "name"
            },
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.catalytic.reaction.reactants.name",
                    "results.properties.catalytic.reaction.reactants.name__suggestion"
                  ]
                },
                "name": "name",
                "description": "IUPAC name of the reagent.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.catalytic.reaction.products.gas_concentration_in"
                  ]
                },
                "name": "gas_concentration_in",
                "description": "Volumetric concentration (fraction) of the reagent in the feed gas.\nShould be a value between 0 and 1.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.catalytic.reaction.products.gas_concentration_out"
                  ]
                },
                "name": "gas_concentration_out",
                "description": "Volumetric concentration (fraction) of the reagent after the reactor.\nShould be a value between 0 and 1.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 70,
            "m_parent_sub_section": "section_definitions",
            "name": "Reactant",
            "description": "\n        A reactant in a catalytic test reaction. A reactant\n        is identified by having a conversion.\n        ",
            "links": [
              "https://w3id.org/nfdi4cat/voc4cat_0000101"
            ],
            "more": {
              "label_quantity": "name"
            },
            "base_sections": [
              "/packages/13/section_definitions/69"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.catalytic.reaction.reactants.conversion"
                  ]
                },
                "name": "conversion",
                "description": "Conversion of the reactant, in %.",
                "links": [
                  "https://w3id.org/nfdi4cat/voc4cat_0005002"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 71,
            "m_parent_sub_section": "section_definitions",
            "name": "Product",
            "description": "\n        A product of a catalytic reaction. A product here is usually identified by having\n        a selectivity, or a gas_concentration_out but no/zero gas_concentration_in.\n        ",
            "more": {
              "label_quantity": "name"
            },
            "base_sections": [
              "/packages/13/section_definitions/69"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.catalytic.reaction.products.name",
                    "results.properties.catalytic.reaction.products.name__suggestion"
                  ]
                },
                "name": "name",
                "description": "Name of the product, preferably the IUPAC name.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.catalytic.reaction.products.selectivity"
                  ]
                },
                "name": "selectivity",
                "description": "Selectivity of the product, in %.",
                "links": [
                  "https://w3id.org/nfdi4cat/voc4cat_0000125"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.catalytic.reaction.products.space_time_yield"
                  ]
                },
                "name": "space_time_yield",
                "description": "Space-time-yield of the product, in mass product per mass catalyst per time.",
                "links": [
                  "https://w3id.org/nfdi4cat/voc4cat_0005006"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ],
                "unit": "1 / second"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 72,
            "m_parent_sub_section": "section_definitions",
            "name": "Rate",
            "description": "\n        Section bundling multiple representations of catalytic reaction rates.\n        ",
            "links": [
              "https://w3id.org/nfdi4cat/voc4cat_0007024"
            ],
            "more": {
              "label_quantity": "name"
            },
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.catalytic.reaction.rates.name",
                    "results.properties.catalytic.reaction.rates.name__suggestion"
                  ]
                },
                "name": "name",
                "description": "IUPAC name of the reagent whose rate is captured.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.catalytic.reaction.rates.reaction_rate"
                  ]
                },
                "name": "reaction_rate",
                "description": "The rate of the number of reactant or product molecules converted/produced,\nper mass of total catalyst, per time.",
                "links": [
                  "https://w3id.org/nfdi4cat/voc4cat_0007024"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ],
                "unit": "mole / gram / second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.catalytic.reaction.rates.specific_mass_rate"
                  ]
                },
                "name": "specific_mass_rate",
                "description": "The specific rate of the reactant, per mass of active catalyst component\n(e.g. metal).",
                "links": [
                  "https://w3id.org/nfdi4cat/voc4cat_0007025"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ],
                "unit": "mole / gram / second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.catalytic.reaction.rates.specific_surface_area_rate"
                  ]
                },
                "name": "specific_surface_area_rate",
                "description": "The specific rate of the reactant, per surface area of active catalyst.",
                "links": [
                  "https://w3id.org/nfdi4cat/voc4cat_0007025"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ],
                "unit": "mole / meter ** 2 / second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "rate",
                "description": "The rate calculated from the mass of reactant or product converted/produced,\nper total catalyst mass per time.",
                "links": [
                  "https://w3id.org/nfdi4cat/voc4cat_0007024"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ],
                "unit": "1 / second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.catalytic.reaction.rates.turnover_frequency"
                  ]
                },
                "name": "turnover_frequency",
                "description": "The turnover frequency, calculated from mol of reactant or product per\nnumber of sites over time.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ],
                "unit": "1 / second"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 73,
            "m_parent_sub_section": "section_definitions",
            "name": "ReactionConditions",
            "description": "\n        Conditions under which a catalytic test reaction was performed.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.catalytic.reaction.reaction_conditions.temperature"
                  ]
                },
                "name": "temperature",
                "description": "The reaction temperature(s) in the catalytic reactor during a chemical reaction.",
                "links": [
                  "https://w3id.org/nfdi4cat/voc4cat_0007032"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ],
                "unit": "kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.catalytic.reaction.reaction_conditions.pressure"
                  ]
                },
                "name": "pressure",
                "description": "The pressure during the catalytic test reaction.",
                "links": [
                  "https://w3id.org/nfdi4cat/voc4cat_0000118"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.catalytic.reaction.reaction_conditions.weight_hourly_space_velocity"
                  ]
                },
                "name": "weight_hourly_space_velocity",
                "description": "The weight hourly space velocity in 1/time (gas flow per catalyst mass).",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ],
                "unit": "milliliter / gram / second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.catalytic.reaction.reaction_conditions.gas_hourly_space_velocity"
                  ]
                },
                "name": "gas_hourly_space_velocity",
                "description": "The gas hourly space velocity in 1/time (gas flow per catalyst volume).",
                "links": [
                  "https://w3id.org/nfdi4cat/voc4cat_0007023"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ],
                "unit": "1 / second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.catalytic.reaction.reaction_conditions.flow_rate"
                  ]
                },
                "name": "flow_rate",
                "description": "The volumetric gas flow in volume per time.",
                "links": [
                  "https://w3id.org/nfdi4cat/voc4cat_0000162"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ],
                "unit": "meter ** 3 / second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.catalytic.reaction.reaction_conditions.time_on_stream"
                  ]
                },
                "name": "time_on_stream",
                "description": "The time on stream of the catalyst in the catalytic reaction.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ],
                "unit": "second"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 74,
            "m_parent_sub_section": "section_definitions",
            "name": "ReactionStep",
            "description": "\n        Properties of single steps of a catalytic reaction mechanism.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.catalytic.reaction.reaction_mechanism.initial_states",
                    "results.properties.catalytic.reaction.reaction_mechanism.initial_states__suggestion"
                  ]
                },
                "name": "initial_states",
                "description": "The names of reactants of the reaction or elementary step.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.catalytic.reaction.reaction_mechanism.final_states",
                    "results.properties.catalytic.reaction.reaction_mechanism.final_states__suggestion"
                  ]
                },
                "name": "final_states",
                "description": "The names of products of the reaction or elementary step.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.catalytic.reaction.reaction_mechanism.reaction_enthalpy"
                  ]
                },
                "name": "reaction_enthalpy",
                "description": "The reaction enthalpy of the reaction or reaction step.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.catalytic.reaction.reaction_mechanism.activation_energy"
                  ]
                },
                "name": "activation_energy",
                "description": "The (apparent) activation energy of the catalyzed reaction or reaction step.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 75,
            "m_parent_sub_section": "section_definitions",
            "name": "Reaction",
            "description": "\n        A collection of specifications and properties of a full catalytic reaction.\n        This may include reaction conditions, results and mechanistic aspects of a reaction.\n        ",
            "links": [
              "https://w3id.org/nfdi4cat/voc4cat_0005007"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.catalytic.reaction.name",
                    "results.properties.catalytic.reaction.name__suggestion"
                  ]
                },
                "name": "name",
                "description": "Name of the catalytic test reaction.",
                "links": [
                  "https://w3id.org/nfdi4cat/voc4cat_0007009"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.catalytic.reaction.type",
                    "results.properties.catalytic.reaction.type__suggestion"
                  ]
                },
                "name": "type",
                "description": "Classification of the catalytic test reaction such as Oxidation, Hydrogenation,\nIsomerization, Coupling...",
                "links": [
                  "https://w3id.org/nfdi4cat/voc4cat_0007010"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "m_annotations": {
                  "elasticsearch": [
                    "reactants"
                  ]
                },
                "name": "reactants",
                "sub_section": "/packages/13/section_definitions/70",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "m_annotations": {
                  "elasticsearch": [
                    "products"
                  ]
                },
                "name": "products",
                "sub_section": "/packages/13/section_definitions/71",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "m_annotations": {
                  "elasticsearch": [
                    "rates"
                  ]
                },
                "name": "rates",
                "sub_section": "/packages/13/section_definitions/72",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 3,
                "m_parent_sub_section": "sub_sections",
                "m_annotations": {
                  "elasticsearch": [
                    "reaction_conditions"
                  ]
                },
                "name": "reaction_conditions",
                "sub_section": "/packages/13/section_definitions/73",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 4,
                "m_parent_sub_section": "sub_sections",
                "m_annotations": {
                  "elasticsearch": [
                    "reaction_mechanism"
                  ]
                },
                "name": "reaction_mechanism",
                "sub_section": "/packages/13/section_definitions/74",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 76,
            "m_parent_sub_section": "section_definitions",
            "name": "Catalyst",
            "description": "\n        Properties of a heterogeneous catalyst.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.catalytic.catalyst.catalyst_name",
                    "results.properties.catalytic.catalyst.catalyst_name__suggestion"
                  ]
                },
                "name": "catalyst_name",
                "description": "Custom name of catalyst.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.catalytic.catalyst.preparation_method",
                    "results.properties.catalytic.catalyst.preparation_method__suggestion"
                  ]
                },
                "name": "preparation_method",
                "description": "The main preparation method of the catalyst sample.",
                "links": [
                  "https://w3id.org/nfdi4cat/voc4cat_0007016"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.catalytic.catalyst.catalyst_type",
                    "results.properties.catalytic.catalyst.catalyst_type__suggestion"
                  ]
                },
                "name": "catalyst_type",
                "description": "The type of catalyst, wether metal or oxide, model, bulk, supported, ect.\nMultiple values can apply.",
                "links": [
                  "https://w3id.org/nfdi4cat/voc4cat_0007014"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.catalytic.catalyst.characterization_methods",
                    "results.properties.catalytic.catalyst.characterization_methods__suggestion"
                  ]
                },
                "name": "characterization_methods",
                "description": "A list of methods used to characterize the catalyst sample.",
                "links": [
                  "https://w3id.org/nfdi4cat/voc4cat_0000066"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.catalytic.catalyst.surface_area"
                  ]
                },
                "name": "surface_area",
                "description": "The surface area per catalyst mass.",
                "links": [
                  "https://w3id.org/nfdi4cat/voc4cat_0000013"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter ** 2 / gram"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 77,
            "m_parent_sub_section": "section_definitions",
            "name": "CatalyticProperties",
            "description": "\n        Properties relating to catalysis.\n        ",
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "reaction",
                "sub_section": "/packages/13/section_definitions/75",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "catalyst",
                "sub_section": "/packages/13/section_definitions/76",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 78,
            "m_parent_sub_section": "section_definitions",
            "name": "EELSInstrument",
            "description": "\n        Base class for an EELS instrument.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.spectroscopic.spectra.provenance.eels.detector_type",
                    "results.properties.spectroscopic.spectra.provenance.eels.detector_type__suggestion"
                  ]
                },
                "name": "detector_type",
                "description": "Detector type.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.spectroscopic.spectra.provenance.eels.max_energy"
                  ]
                },
                "name": "max_energy",
                "description": "Maximum energy of the detector.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.spectroscopic.spectra.provenance.eels.min_energy"
                  ]
                },
                "name": "min_energy",
                "description": "Minimum energy of the detector.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "guntype",
                "description": "Gun type of the detector.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "beam_energy",
                "description": "Incoming beam energy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "volt"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "beam_current",
                "description": "Incoming beam current.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.spectroscopic.spectra.provenance.eels.resolution"
                  ]
                },
                "name": "resolution",
                "description": "Energy resolution of the detector.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "step_size",
                "description": "Step size for axes in units of energy / pixel.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "acquisition_mode",
                "description": "Acquisition mode for the counts in the detector.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "dark_current",
                "description": "Is dark current or noise to be substract included in the output?",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 79,
            "m_parent_sub_section": "section_definitions",
            "name": "EELSMethodology",
            "description": "\n        Base class for the EELS methodology.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.spectroscopic.spectra.provenance.eels.detector_type",
                    "results.properties.spectroscopic.spectra.provenance.eels.detector_type__suggestion"
                  ]
                },
                "name": "detector_type",
                "description": "Detector type.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.spectroscopic.spectra.provenance.eels.resolution"
                  ]
                },
                "name": "resolution",
                "description": "Energy resolution of the detector.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.spectroscopic.spectra.provenance.eels.max_energy"
                  ]
                },
                "name": "max_energy",
                "description": "Maximum energy of the detector.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.spectroscopic.spectra.provenance.eels.min_energy"
                  ]
                },
                "name": "min_energy",
                "description": "Minimum energy of the detector.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "joule"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 80,
            "m_parent_sub_section": "section_definitions",
            "name": "SpectraProvenance",
            "description": "\n        Contains provenance information (mainly the methodology section) for spectra properties\n        derived from an experiment or a calculation.\n        ",
            "base_sections": [
              "/packages/26/section_definitions/0"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "eels",
                "sub_section": "/packages/13/section_definitions/79"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "electronic_structure",
                "sub_section": "/packages/10/section_definitions/18",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 81,
            "m_parent_sub_section": "section_definitions",
            "name": "Spectra",
            "description": "\n        Base class for Spectra calculation information as obtained from an experiment or a computation.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.spectroscopic.spectra.type",
                    "results.properties.spectroscopic.spectra.type__suggestion"
                  ]
                },
                "name": "type",
                "description": "Identifier for the methodology done to obtain the spectra data: EELS, XAS, XPS, etc.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "EELS",
                    "EXAFS",
                    "RXIS",
                    "XANES",
                    "XAS",
                    "XES",
                    "XPS",
                    "unavailable"
                  ]
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.spectroscopic.spectra.label",
                    "results.properties.spectroscopic.spectra.label__suggestion"
                  ]
                },
                "name": "label",
                "description": "Identifier for the source of the spectra data, either 'computation' or 'experiment'.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "computation",
                    "experiment"
                  ]
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_energies",
                "description": "Number of excitation energies.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "energies",
                "description": "Excitation energies for which the spectra is obtained.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_energies"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "intensities",
                "description": "Intensitites obtained at each excitation energy. This can be computationally calculated,\nor electron counts coming from an experiment. In arbitrary units.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_energies"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "intensities_units",
                "description": "Units in which the intensities of the spectra are returned. It can be `F/m` as for\nthe dielectric constant, or `counts` for the data of a CCD device.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "provenance",
                "sub_section": "/packages/13/section_definitions/80"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 82,
            "m_parent_sub_section": "section_definitions",
            "name": "SpectroscopicProperties",
            "description": "\n        Spectroscopic properties.\n        ",
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "m_annotations": {
                  "elasticsearch": [
                    "spectra"
                  ]
                },
                "name": "spectra",
                "sub_section": "/packages/13/section_definitions/81",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 83,
            "m_parent_sub_section": "section_definitions",
            "name": "Properties",
            "description": "\n        Contains the physical properties that have been calculated or used in\n        this entry.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.n_calculations"
                  ]
                },
                "name": "n_calculations",
                "description": "The number of performed single configuration calculations.'",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.available_properties"
                  ]
                },
                "name": "available_properties",
                "description": "Subset of the property names that are present in this entry.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "0..*"
                ],
                "default": [],
                "virtual": true
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "structural",
                "sub_section": "/packages/13/section_definitions/64",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "dynamical",
                "sub_section": "/packages/13/section_definitions/66",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "structures",
                "sub_section": "/packages/13/section_definitions/5",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 3,
                "m_parent_sub_section": "sub_sections",
                "name": "vibrational",
                "sub_section": "/packages/13/section_definitions/42",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 4,
                "m_parent_sub_section": "sub_sections",
                "name": "electronic",
                "sub_section": "/packages/13/section_definitions/49",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 5,
                "m_parent_sub_section": "sub_sections",
                "name": "magnetic",
                "sub_section": "/packages/13/section_definitions/53",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 6,
                "m_parent_sub_section": "sub_sections",
                "name": "optoelectronic",
                "sub_section": "/packages/13/section_definitions/68",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 7,
                "m_parent_sub_section": "sub_sections",
                "name": "catalytic",
                "sub_section": "/packages/13/section_definitions/77",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 8,
                "m_parent_sub_section": "sub_sections",
                "name": "mechanical",
                "sub_section": "/packages/13/section_definitions/47",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 9,
                "m_parent_sub_section": "sub_sections",
                "name": "thermodynamic",
                "sub_section": "/packages/13/section_definitions/60",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 10,
                "m_parent_sub_section": "sub_sections",
                "name": "spectroscopic",
                "sub_section": "/packages/13/section_definitions/82",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 11,
                "m_parent_sub_section": "sub_sections",
                "name": "geometry_optimization",
                "sub_section": "/packages/13/section_definitions/46",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 84,
            "m_parent_sub_section": "section_definitions",
            "name": "ELN",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.eln.sections"
                  ]
                },
                "name": "sections",
                "description": "The type of sections used in entries to search for. By default these are the names\nof the used section definitions.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.eln.tags"
                  ]
                },
                "name": "tags",
                "description": "Short tags that are useful to quickly search based on various\nuser defined criteria.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.eln.names"
                  ]
                },
                "name": "names",
                "description": "Short human readable and descriptive names that appear in\nELN entries.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.eln.descriptions"
                  ]
                },
                "name": "descriptions",
                "description": "'Human descriptions that appear in ELN entries.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.eln.instruments"
                  ]
                },
                "name": "instruments",
                "description": "The name or type of instrument used in an activity, e.g. process or\nmeasurement.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.eln.methods"
                  ]
                },
                "name": "methods",
                "description": "The name or the applied method in an activity, e.g. process or measurement",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.eln.lab_ids",
                    "results.eln.lab_ids__suggestion"
                  ]
                },
                "name": "lab_ids",
                "description": "The laboratory specific id for any item, e.g. sample, chemical, instrument.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 85,
            "m_parent_sub_section": "section_definitions",
            "name": "Results",
            "description": "\n        Contains a summary of the entry contents.\n        ",
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "material",
                "sub_section": "/packages/13/section_definitions/13",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "method",
                "sub_section": "/packages/13/section_definitions/27",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "properties",
                "sub_section": "/packages/13/section_definitions/83",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 3,
                "m_parent_sub_section": "sub_sections",
                "name": "eln",
                "sub_section": "/packages/13/section_definitions/84",
                "repeats": false
              }
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 14,
        "m_parent_sub_section": "packages",
        "name": "nomad.datamodel.metainfo.measurements",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "Sample",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "sample_id",
                "description": "Identification number or signatures of the sample used.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "name",
                "description": "A human readable free text name for the sample.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "description",
                "description": "A description of the sample.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "sample_state",
                "description": "The physical state of the sample.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "sample_temperature",
                "description": "The temperature of the sample during the measurement.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "sample_microstructure",
                "description": "The sample microstructure.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "sample_constituents",
                "description": "The constituents.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "elements",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "chemical_formula",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "Experiment",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "name",
                "description": "A human readable free text name for the experiment.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "description",
                "description": "A description of the experiment.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "steps",
                "description": "Human readable experiment steps.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "sample_ref",
                "description": "Reference to the used sample.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/14/section_definitions/0"
                }
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "sample",
                "description": "The used sample.",
                "sub_section": "/packages/14/section_definitions/0"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "measurement",
                "description": "Measurements performed in this experiment.",
                "sub_section": "/packages/14/section_definitions/3",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "name": "Instrument",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "instrument_id",
                "description": "Identification number or signatures of the instrument used.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "name",
                "description": "A human readable free text name for the instrument.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "description",
                "description": "A description of the instrument.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 3,
            "m_parent_sub_section": "section_definitions",
            "name": "Measurement",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "measurement_id",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "name",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "description",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "method_name",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "method_abbreviation",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "start_time",
                "description": "The datetime of the beginning of the measurement.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Datetime"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "end_time",
                "description": "The datetime of the measurement end.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Datetime"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "facility",
                "description": "Description of the facility (e.g. in full or an acronym) where\nthe measurement was conducted.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "sample",
                "sub_section": "/packages/14/section_definitions/0",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "instrument",
                "sub_section": "/packages/14/section_definitions/2",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "inner_section_definitions",
            "name": "SpectrumChannel",
            "description": "Provides the metadata for a generic additional spectrum channel. Do not use it for energy or count; they have their predefined channels.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "channel_id",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "label",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "unit",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 5,
            "m_parent_sub_section": "section_definitions",
            "name": "Spectrum",
            "description": "Generic spectrum data with energies and counts. May include additional channels.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_values",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "count",
                "description": "The count at each energy value, dimensionless",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "energy",
                "description": "The energy range of the spectrum",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "additional_channel_data",
                "description": "Data from additional channels. The channels are described in `additional channels`.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_channels",
                  "n_values"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "n_additional_channels",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "virtual": true
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "additional_channels",
                "description": "Metadata for additional channels. The order is the same as the channel data\nappears in `additional_channel_data`.",
                "sub_section": "/packages/14/section_definitions/5/inner_section_definitions/0",
                "repeats": true
              }
            ],
            "inner_section_definitions": [
              {
                "m_def": "nomad.metainfo.metainfo.Section",
                "m_parent_index": 0,
                "m_parent_sub_section": "inner_section_definitions",
                "name": "SpectrumChannel",
                "description": "Provides the metadata for a generic additional spectrum channel. Do not use it for energy or count; they have their predefined channels.",
                "quantities": [
                  {
                    "m_def": "nomad.metainfo.metainfo.Quantity",
                    "m_parent_index": 0,
                    "m_parent_sub_section": "quantities",
                    "name": "channel_id",
                    "type": {
                      "type_kind": "python",
                      "type_data": "str"
                    }
                  },
                  {
                    "m_def": "nomad.metainfo.metainfo.Quantity",
                    "m_parent_index": 1,
                    "m_parent_sub_section": "quantities",
                    "name": "label",
                    "type": {
                      "type_kind": "python",
                      "type_data": "str"
                    }
                  },
                  {
                    "m_def": "nomad.metainfo.metainfo.Quantity",
                    "m_parent_index": 2,
                    "m_parent_sub_section": "quantities",
                    "name": "unit",
                    "type": {
                      "type_kind": "python",
                      "type_data": "str"
                    }
                  }
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 6,
            "m_parent_sub_section": "section_definitions",
            "name": "EELSMeasurement",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "edges",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "publish_time",
                "description": "The datetime that this was published on EELS DB.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Datetime"
                }
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "spectrum",
                "sub_section": "/packages/14/section_definitions/5"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "authors",
                "more": {
                  "repreats": true
                },
                "sub_section": "/packages/24/section_definitions/2"
              }
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 15,
        "m_parent_sub_section": "packages",
        "name": "nomad.datamodel.metainfo.tabulartree",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "TabularTreeNodeInfo",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Any"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "description",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "unit",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "TabularTreeLevel3",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "name",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "default": "<node name?>"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "info",
                "sub_section": "/packages/15/section_definitions/0"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "name": "TabularTreeLevel2",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "name",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "default": "<node name?>"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "info",
                "sub_section": "/packages/15/section_definitions/0"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "nodes",
                "sub_section": "/packages/15/section_definitions/1",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 3,
            "m_parent_sub_section": "section_definitions",
            "name": "TabularTreeLevel1",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "name",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "default": "<node name?>"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "info",
                "sub_section": "/packages/15/section_definitions/0"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "nodes",
                "sub_section": "/packages/15/section_definitions/2",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 4,
            "m_parent_sub_section": "section_definitions",
            "name": "TabularTree",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "name",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "default": "<node name?>"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "info",
                "sub_section": "/packages/15/section_definitions/0"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "nodes",
                "sub_section": "/packages/15/section_definitions/3",
                "repeats": true
              }
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 16,
        "m_parent_sub_section": "packages",
        "name": "nomad.datamodel.datamodel",
        "description": "All generic entry metadata and related classes.",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "m_annotations": {
              "mongo": [
                "MongoDocument"
              ],
              "pydantic": [
                "PydanticModel"
              ]
            },
            "name": "Dataset",
            "description": "A Dataset is attached to one or many entries to form a set of data.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "mongo": [
                    "Mongo"
                  ],
                  "elasticsearch": [
                    "datasets.dataset_id"
                  ]
                },
                "name": "dataset_id",
                "description": "The unique identifier for this dataset as a string. It should be\na randomly generated UUID, similar to other nomad ids.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "mongo": [
                    "Mongo"
                  ],
                  "elasticsearch": [
                    "datasets.dataset_name",
                    "datasets.dataset_name__suggestion"
                  ]
                },
                "name": "dataset_name",
                "description": "The human-readable name of the dataset as string. The dataset name must be\nunique for the user.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "mongo": [
                    "Mongo"
                  ]
                },
                "name": "user_id",
                "description": "The unique user_id of the owner and creator of this dataset. The owner\nmust not change after creation.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "mongo": [
                    "Mongo"
                  ],
                  "elasticsearch": [
                    "datasets.doi"
                  ]
                },
                "name": "doi",
                "description": "The optional Document Object Identifier (DOI) associated with this dataset.\nNomad can register DOIs that link back to the respective representation of\nthe dataset in the nomad UI. This quantity holds the string representation of\nthis DOI. There is only one per dataset. The DOI is just the DOI name, not its\nfull URL, e.g. \"10.17172/nomad/2019.10.29-1\".",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "mongo": [
                    "Mongo"
                  ]
                },
                "name": "pid",
                "description": "The original NOMAD CoE Repository dataset PID. Old DOIs still reference\ndatasets based on this id. Is not used for new datasets.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "mongo": [
                    "Mongo"
                  ],
                  "elasticsearch": [
                    "datasets.dataset_create_time"
                  ]
                },
                "name": "dataset_create_time",
                "description": "The date when the dataset was first created.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Datetime"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "mongo": [
                    "Mongo"
                  ],
                  "elasticsearch": [
                    "datasets.dataset_modified_time"
                  ]
                },
                "name": "dataset_modified_time",
                "description": "The date when the dataset was last modified. An owned dataset\ncan only be extended after a DOI was assigned. A foreign dataset cannot be changed\nonce a DOI was assigned.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Datetime"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "mongo": [
                    "Mongo"
                  ],
                  "elasticsearch": [
                    "datasets.dataset_type"
                  ]
                },
                "name": "dataset_type",
                "description": "The type determined if a dataset is owned, i.e. was created by\nthe authors of the contained entries; or if a dataset is foreign,\ni.e. it was created by someone not necessarily related to the entries.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "foreign",
                    "owned"
                  ]
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "mongo": [
                    "Mongo"
                  ]
                },
                "name": "query",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.JSON"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "mongo": [
                    "Mongo"
                  ]
                },
                "name": "entries",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "CompatibleSectionDef",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "section_defs.definition_qualified_name"
                  ]
                },
                "name": "definition_qualified_name",
                "description": "The qualified name of the compatible section.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "section_defs.definition_id"
                  ]
                },
                "name": "definition_id",
                "description": "The definition id of the compatible section.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "section_defs.used_directly"
                  ]
                },
                "name": "used_directly",
                "description": "If the compatible section is directly used as base section.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "name": "EntryArchiveReference",
            "label": "ArchiveReference",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "entry_references.target_reference"
                  ]
                },
                "name": "target_reference",
                "description": "The full url like reference of the the target.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "entry_references.target_entry_id"
                  ]
                },
                "name": "target_entry_id",
                "description": "The id of the entry containing the target.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "entry_references.target_mainfile"
                  ]
                },
                "name": "target_mainfile",
                "description": "The mainfile of the entry containing the target.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "entry_references.target_upload_id"
                  ]
                },
                "name": "target_upload_id",
                "description": "The id of the upload containing the target.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "entry_references.target_name"
                  ]
                },
                "name": "target_name",
                "description": "The name of the target quantity/section.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "entry_references.target_path"
                  ]
                },
                "name": "target_path",
                "description": "The path of the target quantity/section in its archive.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "entry_references.source_name"
                  ]
                },
                "name": "source_name",
                "description": "The name of the source (self) quantity/section in its archive.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "entry_references.source_path"
                  ]
                },
                "name": "source_path",
                "description": "The path of the source (self) quantity/section in its archive.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "entry_references.source_quantity"
                  ]
                },
                "name": "source_quantity",
                "description": "A reference to the quantity definition that defines the reference",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 3,
            "m_parent_sub_section": "section_definitions",
            "name": "SearchableQuantity",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "search_quantities.id"
                  ]
                },
                "name": "id",
                "description": "The full identifier for this quantity that contains the path in the schema +\nschema name.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "search_quantities.definition"
                  ]
                },
                "name": "definition",
                "description": "A reference to the quantity definition.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "search_quantities.path_archive"
                  ]
                },
                "name": "path_archive",
                "description": "Path of the value within the archive.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "search_quantities.bool_value"
                  ]
                },
                "name": "bool_value",
                "description": "The value mapped as an ES boolean field.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "search_quantities.str_value",
                    "search_quantities.str_value.keyword"
                  ]
                },
                "name": "str_value",
                "description": "The value mapped as an ES text and keyword field.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "search_quantities.int_value"
                  ]
                },
                "name": "int_value",
                "description": "The value mapped as an ES long number field.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "search_quantities.float_value"
                  ]
                },
                "name": "float_value",
                "description": "The value mapped as an ES double number field.",
                "type": {
                  "type_kind": "python",
                  "type_data": "float"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "search_quantities.datetime_value"
                  ]
                },
                "name": "datetime_value",
                "description": "The value mapped as an ES date field.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Datetime"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 4,
            "m_parent_sub_section": "section_definitions",
            "name": "RFC3161Timestamp",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "token_seed",
                "description": "The entry hash used to get timestamp token.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "token",
                "description": "The token returned by RFC3161 server.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Bytes"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "tsa_server",
                "description": "The address of RFC3161 server.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "timestamp",
                "description": "The RFC3161 timestamp.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Datetime"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 5,
            "m_parent_sub_section": "section_definitions",
            "name": "EntryMetadata",
            "label": "Metadata",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "upload_id"
                  ]
                },
                "name": "upload_id",
                "description": "The persistent and globally unique identifier for the upload of the entry",
                "categories": [
                  "/packages/16/category_definitions/1"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "upload_name",
                    "upload_name__suggestion"
                  ]
                },
                "name": "upload_name",
                "description": "The user provided upload name",
                "categories": [
                  "/packages/16/category_definitions/1",
                  "/packages/16/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "auth_level": [
                    "AuthLevel.admin"
                  ],
                  "elasticsearch": [
                    "upload_create_time"
                  ]
                },
                "name": "upload_create_time",
                "description": "The date and time when the upload was created in nomad",
                "categories": [
                  "/packages/16/category_definitions/1",
                  "/packages/16/category_definitions/0"
                ],
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Datetime"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "entry_id"
                  ]
                },
                "name": "entry_id",
                "description": "A persistent and globally unique identifier for the entry",
                "categories": [
                  "/packages/16/category_definitions/2",
                  "/packages/16/category_definitions/3"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "entry_name",
                    "entry_name__suggestion",
                    "entry_name.prefix"
                  ]
                },
                "name": "entry_name",
                "description": "A brief human readable name for the entry.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "entry_type"
                  ]
                },
                "name": "entry_type",
                "description": "The main schema definition. This is the name of the section used for data.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "calc_id"
                  ]
                },
                "name": "calc_id",
                "description": "Legacy field name, use `entry_id` instead.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "entry_hash",
                "description": "A raw file content based checksum/hash",
                "categories": [
                  "/packages/16/category_definitions/2"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "auth_level": [
                    "AuthLevel.admin"
                  ],
                  "elasticsearch": [
                    "entry_create_time"
                  ]
                },
                "name": "entry_create_time",
                "description": "The date and time when the entry was created in nomad",
                "categories": [
                  "/packages/16/category_definitions/2",
                  "/packages/16/category_definitions/3",
                  "/packages/16/category_definitions/0"
                ],
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Datetime"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "last_edit_time",
                "description": "The date and time the user metadata was last edited.",
                "categories": [
                  "/packages/16/category_definitions/2"
                ],
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Datetime"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "parser_name"
                  ]
                },
                "name": "parser_name",
                "description": "The NOMAD parser used for the last processing",
                "categories": [
                  "/packages/16/category_definitions/2",
                  "/packages/16/category_definitions/3"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "mainfile",
                    "mainfile.path",
                    "mainfile__suggestion"
                  ]
                },
                "name": "mainfile",
                "description": "The path to the mainfile from the root directory of the uploaded files",
                "categories": [
                  "/packages/16/category_definitions/2",
                  "/packages/16/category_definitions/3"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "mainfile_key",
                    "mainfile_key.path"
                  ]
                },
                "name": "mainfile_key",
                "description": "Key used to differentiate between different *child entries* of an entry.\nFor parent entries and entries that do not have any children, the value should\nbe empty.",
                "categories": [
                  "/packages/16/category_definitions/2",
                  "/packages/16/category_definitions/3"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 13,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "text_search_contents"
                  ]
                },
                "name": "text_search_contents",
                "description": "Contains text contents that should be considered when\ndoing free text queries for entries.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 14,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "files",
                    "files.path"
                  ]
                },
                "name": "files",
                "description": "The paths to the files within the upload that belong to this entry.\nAll files within the same directory as the entry's mainfile are considered the\nauxiliary files that belong to the entry.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "0..*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 15,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "pid"
                  ]
                },
                "name": "pid",
                "description": "The unique, sequentially enumerated, integer PID that was used in the legacy\nNOMAD CoE. It allows to resolve URLs of the old NOMAD CoE Repository.",
                "categories": [
                  "/packages/16/category_definitions/2"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 16,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "raw_id"
                  ]
                },
                "name": "raw_id",
                "description": "The code specific identifier extracted from the entry's raw files by the parser,\nif supported.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 17,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "external_id"
                  ]
                },
                "name": "external_id",
                "description": "A user provided external id. Usually the id for an entry in an external database\nwhere the data was imported from.",
                "categories": [
                  "/packages/16/category_definitions/2",
                  "/packages/16/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 18,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "published"
                  ]
                },
                "name": "published",
                "description": "Indicates if the entry is published",
                "categories": [
                  "/packages/16/category_definitions/1"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "default": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 19,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "auth_level": [
                    "AuthLevel.admin"
                  ],
                  "elasticsearch": [
                    "publish_time"
                  ]
                },
                "name": "publish_time",
                "description": "The date and time when the upload was published in nomad",
                "categories": [
                  "/packages/16/category_definitions/1",
                  "/packages/16/category_definitions/0"
                ],
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Datetime"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 20,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "with_embargo"
                  ]
                },
                "name": "with_embargo",
                "description": "Indicated if this entry is under an embargo",
                "categories": [
                  "/packages/16/category_definitions/1",
                  "/packages/16/category_definitions/3"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "default": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 21,
                "m_parent_sub_section": "quantities",
                "name": "embargo_length",
                "description": "The length of the requested embargo period, in months",
                "categories": [
                  "/packages/16/category_definitions/1",
                  "/packages/16/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 22,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "auth_level": [
                    "AuthLevel.admin"
                  ]
                },
                "name": "license",
                "description": "A short license description (e.g. CC BY 4.0), that refers to the\nlicense of this entry.",
                "categories": [
                  "/packages/16/category_definitions/1",
                  "/packages/16/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "default": "CC BY 4.0"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 23,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "processed"
                  ]
                },
                "name": "processed",
                "description": "Indicates that the entry is successfully processed.",
                "categories": [
                  "/packages/16/category_definitions/2",
                  "/packages/16/category_definitions/3"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "default": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 24,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "last_processing_time"
                  ]
                },
                "name": "last_processing_time",
                "description": "The date and time of the last processing.",
                "categories": [
                  "/packages/16/category_definitions/2"
                ],
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Datetime"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 25,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "processing_errors"
                  ]
                },
                "name": "processing_errors",
                "description": "Errors that occurred during processing",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 26,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "nomad_version"
                  ]
                },
                "name": "nomad_version",
                "description": "The NOMAD version used for the last processing",
                "categories": [
                  "/packages/16/category_definitions/2"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 27,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "nomad_commit"
                  ]
                },
                "name": "nomad_commit",
                "description": "The NOMAD commit used for the last processing",
                "categories": [
                  "/packages/16/category_definitions/2"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 28,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "comment"
                  ]
                },
                "name": "comment",
                "description": "A user provided comment for this entry",
                "categories": [
                  "/packages/16/category_definitions/2",
                  "/packages/16/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 29,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "references"
                  ]
                },
                "name": "references",
                "description": "User provided references (URLs) for this entry",
                "categories": [
                  "/packages/16/category_definitions/2",
                  "/packages/16/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "0..*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 30,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "external_db"
                  ]
                },
                "name": "external_db",
                "description": "The repository or external database where the original data resides",
                "categories": [
                  "/packages/16/category_definitions/1",
                  "/packages/16/category_definitions/0"
                ],
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "AFLOW",
                    "EELS Data Base",
                    "Kyoto Phonopy Database",
                    "Materials Project",
                    "OQMD",
                    "The Perovskite Database Project"
                  ]
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 31,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "origin"
                  ]
                },
                "name": "origin",
                "description": "A short human readable description of the entries origin. Usually it is the\nhandle of an external database/repository or the name of the main author.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 32,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "auth_level": [
                    "AuthLevel.admin"
                  ],
                  "elasticsearch": [
                    "main_author"
                  ]
                },
                "name": "main_author",
                "description": "The main author of the entry",
                "categories": [
                  "/packages/16/category_definitions/1",
                  "/packages/16/category_definitions/0"
                ],
                "type": {
                  "type_kind": "User",
                  "type_data": "User"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 33,
                "m_parent_sub_section": "quantities",
                "name": "coauthors",
                "description": "A user provided list of co-authors for the whole upload. These can view and edit the\nupload when in staging, and view it also if it is embargoed.",
                "categories": [
                  "/packages/16/category_definitions/1",
                  "/packages/16/category_definitions/0"
                ],
                "type": {
                  "type_kind": "Author",
                  "type_data": "Author"
                },
                "shape": [
                  "0..*"
                ],
                "default": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 34,
                "m_parent_sub_section": "quantities",
                "name": "coauthor_groups",
                "description": "A list of co-author groups for the whole upload, cf. `coauthors`.",
                "categories": [
                  "/packages/16/category_definitions/1",
                  "/packages/16/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "0..*"
                ],
                "default": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 35,
                "m_parent_sub_section": "quantities",
                "name": "entry_coauthors",
                "description": "A user provided list of co-authors specific for this entry. This is a legacy field,\nfor new uploads, coauthors should be specified on the upload level only.",
                "categories": [
                  "/packages/16/category_definitions/2"
                ],
                "type": {
                  "type_kind": "Author",
                  "type_data": "Author"
                },
                "shape": [
                  "0..*"
                ],
                "default": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 36,
                "m_parent_sub_section": "quantities",
                "name": "reviewers",
                "description": "A user provided list of reviewers. Reviewers can see the whole upload, also if\nit is unpublished or embargoed",
                "categories": [
                  "/packages/16/category_definitions/1",
                  "/packages/16/category_definitions/0"
                ],
                "type": {
                  "type_kind": "User",
                  "type_data": "User"
                },
                "shape": [
                  "0..*"
                ],
                "default": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 37,
                "m_parent_sub_section": "quantities",
                "name": "reviewer_groups",
                "description": "A list of reviewer groups, cf. `reviewers`.",
                "categories": [
                  "/packages/16/category_definitions/1",
                  "/packages/16/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "0..*"
                ],
                "default": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 38,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "authors"
                  ]
                },
                "name": "authors",
                "description": "All authors (main author and co-authors)",
                "type": {
                  "type_kind": "Author",
                  "type_data": "Author"
                },
                "shape": [
                  "0..*"
                ],
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 39,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "writers"
                  ]
                },
                "name": "writers",
                "description": "All writers (main author, upload coauthors)",
                "type": {
                  "type_kind": "User",
                  "type_data": "User"
                },
                "shape": [
                  "0..*"
                ],
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 40,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "writer_groups"
                  ]
                },
                "name": "writer_groups",
                "description": "Groups with write access (= coauthor groups).",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "0..*"
                ],
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 41,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "viewers"
                  ]
                },
                "name": "viewers",
                "description": "All viewers (main author, upload coauthors, and reviewers)",
                "type": {
                  "type_kind": "User",
                  "type_data": "User"
                },
                "shape": [
                  "0..*"
                ],
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 42,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "viewer_groups"
                  ]
                },
                "name": "viewer_groups",
                "description": "Groups with read access (= coauthor groups + reviewer groups).",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "0..*"
                ],
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 43,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "datasets"
                  ]
                },
                "name": "datasets",
                "description": "A list of user curated datasets this entry belongs to.",
                "categories": [
                  "/packages/16/category_definitions/2",
                  "/packages/16/category_definitions/0"
                ],
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/16/section_definitions/0"
                },
                "shape": [
                  "0..*"
                ],
                "default": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 44,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "domain"
                  ]
                },
                "name": "domain",
                "description": "The material science domain",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "dft",
                    "ems",
                    "nexus"
                  ]
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 45,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "n_quantities"
                  ]
                },
                "name": "n_quantities",
                "description": "Number of metainfo quantities parsed from the entry.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "default": 0
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 46,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "quantities",
                    "quantities.path"
                  ]
                },
                "name": "quantities",
                "description": "All quantities that are used by this entry.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "0..*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 47,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "sections"
                  ]
                },
                "name": "sections",
                "description": "All sections that are present in this entry. This field is deprecated and will be removed.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "entry_timestamp",
                "description": "A timestamp based on RFC3161.",
                "sub_section": "/packages/16/section_definitions/4"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "m_annotations": {
                  "elasticsearch": [
                    "optimade"
                  ]
                },
                "name": "optimade",
                "description": "Metadata used for the optimade API.",
                "sub_section": "/packages/28/section_definitions/1"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "m_annotations": {
                  "elasticsearch": [
                    "section_defs"
                  ]
                },
                "name": "section_defs",
                "description": "All sections that are compatible with the present sections in this entry.",
                "sub_section": "/packages/16/section_definitions/1",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 3,
                "m_parent_sub_section": "sub_sections",
                "m_annotations": {
                  "elasticsearch": [
                    "entry_references"
                  ]
                },
                "name": "entry_references",
                "sub_section": "/packages/16/section_definitions/2",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 4,
                "m_parent_sub_section": "sub_sections",
                "m_annotations": {
                  "elasticsearch": [
                    "search_quantities"
                  ]
                },
                "name": "search_quantities",
                "sub_section": "/packages/16/section_definitions/3",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 6,
            "m_parent_sub_section": "section_definitions",
            "name": "EntryArchive",
            "label": "Entry",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "entry_id",
                "description": "The unique primary id for this entry.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "processing_logs",
                "description": "The processing logs for this entry as a list of structlog entries.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Any"
                },
                "shape": [
                  "0..*"
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "run",
                "sub_section": "/packages/11/section_definitions/3",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "measurement",
                "sub_section": "/packages/14/section_definitions/3",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "data",
                "sub_section": "/packages/24/section_definitions/1"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 3,
                "m_parent_sub_section": "sub_sections",
                "name": "workflow",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/7/section_definitions/34",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 4,
                "m_parent_sub_section": "sub_sections",
                "name": "workflow2",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/27/section_definitions/3"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 5,
                "m_parent_sub_section": "sub_sections",
                "m_annotations": {
                  "elasticsearch": [
                    "metadata"
                  ]
                },
                "name": "metadata",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/16/section_definitions/5"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 6,
                "m_parent_sub_section": "sub_sections",
                "m_annotations": {
                  "elasticsearch": [
                    "results"
                  ]
                },
                "name": "results",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/13/section_definitions/85"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 7,
                "m_parent_sub_section": "sub_sections",
                "name": "tabular_tree",
                "sub_section": "/packages/15/section_definitions/4",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 8,
                "m_parent_sub_section": "sub_sections",
                "name": "definitions",
                "sub_section": "/packages/29/section_definitions/4"
              }
            ]
          }
        ],
        "category_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Category",
            "m_parent_index": 0,
            "m_parent_sub_section": "category_definitions",
            "name": "EditableUserMetadata",
            "description": "NOMAD entry metadata quantities that can be edited by the user before or after publish."
          },
          {
            "m_def": "nomad.metainfo.metainfo.Category",
            "m_parent_index": 1,
            "m_parent_sub_section": "category_definitions",
            "name": "MongoUploadMetadata",
            "description": "The field is defined on the Upload mongo document."
          },
          {
            "m_def": "nomad.metainfo.metainfo.Category",
            "m_parent_index": 2,
            "m_parent_sub_section": "category_definitions",
            "name": "MongoEntryMetadata",
            "description": "The field is defined on the Entry mongo document."
          },
          {
            "m_def": "nomad.metainfo.metainfo.Category",
            "m_parent_index": 3,
            "m_parent_sub_section": "category_definitions",
            "name": "MongoSystemMetadata",
            "description": "The field is managed directly by the system/process (or derived from data managed by the\nsystem/process), and should never be updated from an :class:`EntryMetadata` object."
          },
          {
            "m_def": "nomad.metainfo.metainfo.Category",
            "m_parent_index": 4,
            "m_parent_sub_section": "category_definitions",
            "name": "DomainMetadata",
            "description": "NOMAD entry quantities that are determined by the uploaded data."
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 17,
        "m_parent_sub_section": "packages",
        "name": "nomad.parsing.tabular",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "TableData",
            "description": "Table data",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "BoolEditQuantity"
                    }
                  ]
                },
                "name": "fill_archive_from_datafile",
                "description": "While checked, it allows the parser to fill all the Quantities from the data file.\nBe cautious though! as checking this box will cause overwriting your fields with data parsed from the data file",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "default": true
              }
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 18,
        "m_parent_sub_section": "packages",
        "name": "nomad.datamodel.metainfo.eln",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "User",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "AuthorEditQuantity"
                    }
                  ]
                },
                "name": "user",
                "description": "The corresponding user for the activity.",
                "type": {
                  "type_kind": "Author",
                  "type_data": "Author"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "ElnBaseSection",
            "description": "A generic abstract base section for ELNs that provides a few commonly used properties. If you inherit from this section, but do not need some quantities, list those\nquantities in the `eln.hide` annotation of your inheriting section definition.\n\nBesides predefining some quantities, these base sections will add some metadata\nto NOMAD's search. A particular example are `tags`, if you define a string\nor enum quantity in your sections named `tags`, its values will be searchable.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity",
                      "label": "short name"
                    }
                  ]
                },
                "name": "name",
                "description": "A short human readable and descriptive name.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "DateTimeEditQuantity"
                    }
                  ]
                },
                "name": "datetime",
                "description": "The date and time associated with this section.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Datetime"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity",
                      "label": "ID"
                    }
                  ]
                },
                "name": "lab_id",
                "description": "An ID string that is unique at least for the lab that produced this\ndata.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "RichTextEditQuantity"
                    }
                  ]
                },
                "name": "description",
                "description": "Any information that cannot be captured in the other fields.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "m_annotations": {
              "eln": [
                {
                  "lane_width": "600px"
                }
              ]
            },
            "name": "BasicEln",
            "label": "Basic ELN",
            "description": "The most basic ELN to instantiate.",
            "categories": [
              "/packages/24/category_definitions/2"
            ],
            "base_sections": [
              "/packages/18/section_definitions/1",
              "/packages/24/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "tags",
                "description": "Add a tag that can be used for search.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 3,
            "m_parent_sub_section": "section_definitions",
            "m_annotations": {
              "eln": [
                {
                  "lane_width": "600px"
                }
              ],
              "template": [
                {
                  "process_identifiers": {}
                }
              ]
            },
            "name": "ELNProcess",
            "label": "Material Processing ELN",
            "description": "A basic electronic lab notebook for a material processing activity.",
            "categories": [
              "/packages/24/category_definitions/2"
            ],
            "base_sections": [
              "/packages/25/section_definitions/20",
              "/packages/24/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ],
                  "template": [
                    {
                      "process_identifiers": {}
                    }
                  ]
                },
                "name": "tags",
                "description": "Add a tag that can be used for search.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "process_identifiers",
                "sub_section": "/packages/25/section_definitions/32"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 4,
            "m_parent_sub_section": "section_definitions",
            "name": "BasicMeasurementResult",
            "label": "Measurement Result",
            "description": "A basic section for describing the result of a measurement.",
            "base_sections": [
              "/packages/25/section_definitions/25"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "RichTextEditQuantity"
                    }
                  ]
                },
                "name": "result",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 5,
            "m_parent_sub_section": "section_definitions",
            "m_annotations": {
              "eln": [
                {
                  "lane_width": "600px"
                }
              ],
              "template": [
                {
                  "measurement_identifiers": {}
                }
              ]
            },
            "name": "ELNMeasurement",
            "label": "Measurement ELN",
            "description": "A basic electronic lab notebook for a measurement activity.",
            "categories": [
              "/packages/24/category_definitions/2"
            ],
            "base_sections": [
              "/packages/25/section_definitions/26",
              "/packages/24/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "tags",
                "description": "Add a tag that can be used for search.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "measurement_identifiers",
                "sub_section": "/packages/25/section_definitions/32"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "results",
                "description": "The result of the measurement.",
                "sub_section": "/packages/18/section_definitions/4",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 6,
            "m_parent_sub_section": "section_definitions",
            "name": "BasicAnalysisResult",
            "label": "Analysis Result",
            "description": "A basic section for describing the result of an analysis.",
            "base_sections": [
              "/packages/25/section_definitions/22"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "RichTextEditQuantity"
                    }
                  ]
                },
                "name": "result",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 7,
            "m_parent_sub_section": "section_definitions",
            "m_annotations": {
              "eln": [
                {
                  "lane_width": "600px"
                }
              ],
              "template": [
                {
                  "analysis_identifiers": {}
                }
              ]
            },
            "name": "ELNAnalysis",
            "label": "Analysis ELN",
            "description": "A basic electronic lab notebook for an analysis activity.",
            "categories": [
              "/packages/24/category_definitions/2"
            ],
            "base_sections": [
              "/packages/25/section_definitions/23",
              "/packages/24/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "tags",
                "description": "Add a tag that can be used for search.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "analysis_identifiers",
                "sub_section": "/packages/25/section_definitions/32"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "outputs",
                "description": "The input data of the analysis.",
                "sub_section": "/packages/18/section_definitions/6",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 8,
            "m_parent_sub_section": "section_definitions",
            "m_annotations": {
              "eln": [
                {
                  "lane_width": "600px"
                }
              ],
              "template": [
                {
                  "sample_identifiers": {}
                }
              ]
            },
            "name": "ELNSample",
            "label": "Generic Sample ELN",
            "description": "A basic electronic lab notebook for a generic sample.",
            "categories": [
              "/packages/24/category_definitions/2"
            ],
            "base_sections": [
              "/packages/25/section_definitions/17",
              "/packages/24/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "tags",
                "description": "Add a tag that can be used for search.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "sample_identifiers",
                "sub_section": "/packages/25/section_definitions/32"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 9,
            "m_parent_sub_section": "section_definitions",
            "m_annotations": {
              "eln": [
                {
                  "lane_width": "600px"
                }
              ],
              "template": [
                {
                  "substance_identifiers": {},
                  "substance": {
                    "m_def": "nomad.datamodel.metainfo.basesections.PubChemPureSubstanceSection"
                  }
                }
              ]
            },
            "name": "ELNSubstance",
            "label": "Substance ELN",
            "description": "A basic electronic lab notebook for a generic sample.",
            "categories": [
              "/packages/24/category_definitions/2"
            ],
            "base_sections": [
              "/packages/25/section_definitions/27",
              "/packages/24/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "tags",
                "description": "Add a tag that can be used for search.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "substance_identifiers",
                "sub_section": "/packages/25/section_definitions/32"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 10,
            "m_parent_sub_section": "section_definitions",
            "m_annotations": {
              "eln": [
                {
                  "lane_width": "600px"
                }
              ],
              "template": [
                {
                  "instrument_identifiers": {}
                }
              ]
            },
            "name": "ELNInstrument",
            "label": "Instrument ELN",
            "description": "A basic electronic lab notebook for a generic instrument.",
            "categories": [
              "/packages/24/category_definitions/2"
            ],
            "base_sections": [
              "/packages/25/section_definitions/11",
              "/packages/24/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "tags",
                "description": "Add a tag that can be used for search.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "instrument_identifiers",
                "sub_section": "/packages/25/section_definitions/32"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 11,
            "m_parent_sub_section": "section_definitions",
            "m_annotations": {
              "eln": [
                {
                  "lane_width": "600px"
                }
              ],
              "template": [
                {
                  "collection_identifiers": {}
                }
              ]
            },
            "name": "ELNCollection",
            "label": "Collection ELN",
            "description": "A basic electronic lab notebook for a collection of entities.",
            "categories": [
              "/packages/24/category_definitions/2"
            ],
            "base_sections": [
              "/packages/25/section_definitions/8",
              "/packages/24/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "tags",
                "description": "Add a tag that can be used for search.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "collection_identifiers",
                "sub_section": "/packages/25/section_definitions/32"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 12,
            "m_parent_sub_section": "section_definitions",
            "m_annotations": {
              "eln": [
                {
                  "lane_width": "600px"
                }
              ],
              "template": [
                {
                  "experiment_identifiers": {}
                }
              ]
            },
            "name": "ELNExperiment",
            "label": "Experiment ELN",
            "description": "A basic electronic lab notebook for a collection of activities.",
            "categories": [
              "/packages/24/category_definitions/2"
            ],
            "base_sections": [
              "/packages/25/section_definitions/7",
              "/packages/24/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "tags",
                "description": "Add a tag that can be used for search.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "experiment_identifiers",
                "sub_section": "/packages/25/section_definitions/32"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 13,
            "m_parent_sub_section": "section_definitions",
            "name": "SampleID",
            "description": "A base section that can be used for sample IDs. If the `sample_owner`, `sample_short_name`, `institute`, and `creation_datetime`\nquantities are provided, the sample_id will be automatically created as a combination\nof these four quantities.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "institute",
                "description": "Alias/short name of the home institute of the owner, i.e. *HZB*.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "sample_owner",
                "description": "Name or alias of the process operator, e.g. jmp",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "DateTimeEditQuantity"
                    }
                  ]
                },
                "name": "creation_datetime",
                "description": "Creation date of the sample.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Datetime"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "sample_short_name",
                "description": "A short name of the sample (the identifier scribed on the smaple,\nor in the sample container), e.g. 4001-8, YAG-2-34.\nThis is to be managed and decided internally by the labs,\nalthough we recomend to avoid the following characters on it: \"_\", \"/\", \"\" and \".\"",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "sample_id",
                "description": "Full sample id. Ideally a human readable sample id convention,\nwhich is simple, understandable and still having chances of becoming unique.\nIf the `sample_owner`, `sample_short_name`, `\u00ecnstitute`, and `creation_datetime`\nare provided, this will be formed automatically by joining these components by an underscore (_).\nSpaces in any of the individual components will be replaced with hyphens (-).\nAn example would be hzb_oah_20200602_4001-08",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 14,
            "m_parent_sub_section": "section_definitions",
            "name": "CASExperimentalProperty",
            "description": "A section for experimental properties retrieved from the CAS API.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "name",
                "description": "CAS experimental property name.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "property",
                "description": "CAS experimental property.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "sourceNumber",
                "description": "CAS experimental property source.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 15,
            "m_parent_sub_section": "section_definitions",
            "name": "CASPropertyCitation",
            "description": "A section for citations of the experimental properties retrieved from the CAS API.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "docUri",
                "description": "CAS property citation document uri.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "sourceNumber",
                "more": {
                  "decription": "CAS property citation source number."
                },
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "source",
                "description": "CAS property citation source.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 16,
            "m_parent_sub_section": "section_definitions",
            "name": "Substance",
            "description": "A base section for any substance defined in the ELN.",
            "base_sections": [
              "/packages/25/section_definitions/10"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity",
                      "label": "substance name"
                    }
                  ]
                },
                "name": "name",
                "description": "The name of the substance entry.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity",
                      "label": "substance ID"
                    }
                  ]
                },
                "name": "lab_id",
                "description": "A human human readable substance ID that is at least unique for the lab.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity",
                      "label": "CAS uri"
                    }
                  ]
                },
                "name": "cas_uri",
                "description": "CAS uri",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity",
                      "label": "CAS number"
                    }
                  ]
                },
                "name": "cas_number",
                "description": "CAS number.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity",
                      "label": "CAS name"
                    }
                  ]
                },
                "name": "cas_name",
                "description": "CAS name.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "FileEditQuantity"
                    }
                  ],
                  "browser": [
                    {
                      "adaptor": "RawFileAdaptor"
                    }
                  ]
                },
                "name": "image",
                "description": "CAS image.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "inchi",
                "description": "CAS inchi.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "inchi_key",
                "description": "CAS inchi key.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "smile",
                "description": "CAS smile.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "canonical_smile",
                "description": "CAS canonical smile.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "molecular_formula",
                "description": "CAS molecular formula.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "NumberEditQuantity"
                    }
                  ]
                },
                "name": "molecular_mass",
                "description": "CAS molecular mass.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "dalton"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "name": "cas_synonyms",
                "description": "CAS synonyms.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 13,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "RichTextEditQuantity",
                      "label": "detailed substance description"
                    }
                  ]
                },
                "name": "description",
                "description": "A field for adding additional information about the substance that is not captured\nby the other quantities and subsections.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "cas_experimental_properties",
                "sub_section": "/packages/18/section_definitions/14",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "cas_property_citations",
                "sub_section": "/packages/18/section_definitions/15",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 17,
            "m_parent_sub_section": "section_definitions",
            "name": "ElnWithFormulaBaseSection",
            "description": "A generic abstract base section for ELNs that provides a few commonly used for items with a chemical formula, e.g. chemicals or samples.",
            "base_sections": [
              "/packages/18/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "chemical_formula",
                "description": "The chemical formula. This will be used directly and indirectly in the search. The formula will be used itself as well as the extracted chemical elements.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 18,
            "m_parent_sub_section": "section_definitions",
            "name": "Chemical",
            "description": "A ELN base section that can be used for chemicals.",
            "base_sections": [
              "/packages/18/section_definitions/17"
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 19,
            "m_parent_sub_section": "section_definitions",
            "name": "Sample",
            "description": "A ELN base section that can be used for samples.",
            "base_sections": [
              "/packages/18/section_definitions/17"
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 20,
            "m_parent_sub_section": "section_definitions",
            "name": "ElnWithStructureFile",
            "description": "A base section for for parsing crystal structure files, e.g. `.cif`, and populating the Material section in Results.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "FileEditQuantity"
                    }
                  ]
                },
                "name": "structure_file",
                "description": "The structure file.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 21,
            "m_parent_sub_section": "section_definitions",
            "name": "SolarCellDefinition",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "EnumEditQuantity",
                      "props": {
                        "suggestions": []
                      }
                    }
                  ]
                },
                "name": "stack_sequence",
                "description": "The stack sequence describing the cell. Use the following formatting guidelines\n- Start with the substrate to the left and list the materials in each layer of the device\n- If two materials, e.g. A and B, are mixed in one layer, list the materials in alphabetic order and separate them with semicolons, as in (A; B)\n- The absorber layer in other databases is commonly stated with a generaic name as \u201cPerovskite\u201d, regardless of composition, mixtures, dimensionality etc.\n    There are other fields to describe in depth the absorber layer.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "NumberEditQuantity"
                    }
                  ]
                },
                "name": "solar_cell_area",
                "description": "The total cell area in cm^2.\nThe total area is defined as the area that would provide photovoltaic performance.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "centimeter ** 2"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "EnumEditQuantity",
                      "props": {
                        "suggestions": [
                          "Unknown",
                          "Pn-Heterojunction",
                          "Front contacted",
                          "Back contacted",
                          "pin",
                          "nip",
                          "Schottky"
                        ]
                      }
                    }
                  ]
                },
                "name": "architecture",
                "description": "The cell architecture with respect to the direction of current flow and\nthe order in which layers are deposited.\nThe two most common are nip (also referred to as normal) and pin (also referred to as inverted)\nbut there are also a few others, e.g. Back contacted.\n- *nip* architecture means that the electrons are collected at the substrate side.\nThe typical example is in perovskite solar cells when a TiO2 electron selective contact is deposited\nbetween the perovskite and the substrate (e.g. SLG | FTO | TiO2-c | Perovskite | \u2026)\n- *pin* architecture means that it instead is the holes that are collected at the substrate side. The typical example is when a PEDOT:PSS hole selective contact is deposited between the perovskite and the substrate (e.g. SLG | FTO | PEDOT:PSS |Perovskite | \u2026)",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 22,
            "m_parent_sub_section": "section_definitions",
            "name": "SolarCellLayer",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "EnumEditQuantity",
                      "props": {
                        "suggestions": [
                          "Substrate",
                          "Absorber",
                          "Hole Transport Layer",
                          "Electron Transport Layer",
                          "Contact",
                          "Buffer",
                          "p-type contact",
                          "n-type contact",
                          "other"
                        ]
                      }
                    }
                  ]
                },
                "name": "solar_cell_layer_type",
                "description": "type of the layer",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "EnumEditQuantity",
                      "props": {
                        "suggestions": []
                      }
                    }
                  ]
                },
                "name": "layer_name",
                "description": "The name of the layer.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "0..*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "NumberEditQuantity"
                    }
                  ]
                },
                "name": "layer_thickness",
                "description": "The thickness of the layer in nm.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "nanometer"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 23,
            "m_parent_sub_section": "section_definitions",
            "name": "SolarCellBaseSectionWithOptoelectronicProperties",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "NumberEditQuantity"
                    }
                  ]
                },
                "name": "bandgap",
                "description": "The bandgap of the solar cell.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "electron_volt"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 24,
            "m_parent_sub_section": "section_definitions",
            "m_annotations": {
              "plotly_graph_object": [
                {
                  "data": {
                    "x": "#voltage",
                    "y": "#current_density"
                  }
                },
                {
                  "data": {
                    "x": "#voltage",
                    "y": "#current_density"
                  }
                }
              ]
            },
            "name": "SolarCellJV",
            "more": {
              "label_quantity": "cell_name"
            },
            "base_sections": [
              "/packages/0/section_definitions/3"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "FileEditQuantity"
                    }
                  ],
                  "browser": [
                    {
                      "adaptor": "RawFileAdaptor"
                    }
                  ]
                },
                "name": "data_file",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "BoolEditQuantity"
                    }
                  ]
                },
                "name": "certified_values",
                "description": "TRUE if the IV data is measured by an independent and certification institute.\nIf your solar simulator is calibrated by a calibrated reference diode,\nthat does not count as a certified result.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "EnumEditQuantity",
                      "props": {
                        "suggestions": [
                          "AIST, National Institute of Advanced Industrial Science and Technology",
                          "CPVT, National Center of Supervision and Inspection on Solar Photovoltaic Products Quality of China",
                          "CREST, Photovoltaic Meaasurement and calibration Laboratory at Universit of Loughborough",
                          "CSIRO, PV Performance Lab at Monash University",
                          "Fraunhofer ISE",
                          "Institute of Metrology (NIM) of China",
                          "KIER, Korea Institute of Energy Research",
                          "NIM, National Institute of Metrology of China",
                          "NREL",
                          "National Institute ofMetrology, China",
                          "Newport",
                          "Newport Corporation",
                          "PVEVL, National Central University, Taiwan",
                          "Photovoltaic and Wind Power Systems Quality Test Center, Chinese Academy of Sciences",
                          "Quality supervision\uff06Testing Center of Chemical\uff06Physical Power Sources of Information Industry",
                          "SIMIT, Shanghai Institute of Microsystem and Information Technology",
                          "Solar Power Lab at Arizona State University"
                        ]
                      }
                    }
                  ]
                },
                "name": "certification_institute",
                "description": "The name of the certification institute that has measured the certified device.\nExample:\nNewport\nNIM, National Institute of Metrology of China\nKIER, Korea Institute of Energy Research",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "NumberEditQuantity"
                    }
                  ]
                },
                "name": "light_intensity",
                "description": "The light intensity during the IV measurement\n- If there are uncertainties, only state the best estimate, e.g. write 100 and not 90-100.\n- Standard AM 1.5 illumination correspond to 100 mW/cm2\n- If you need to convert from illumination given in lux; at 550 nm, 1 mW/cm2 corresponds to 6830 lux. Be aware that the conversion change with the spectrum used. As a rule of thumb for general fluorescent/LED light sources, around 0.31mW corresponded to 1000 lux. If your light intensity is measured in lux, it probably means that your light spectra deviates quite a lot from AM 1.5, wherefore it is very important that you also specify the light spectra in the next column.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "milliwatt / centimeter ** 2",
                "default": 100.0
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "NumberEditQuantity"
                    }
                  ]
                },
                "name": "open_circuit_voltage",
                "description": "Open circuit voltage.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "volt"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "NumberEditQuantity"
                    }
                  ]
                },
                "name": "short_circuit_current_density",
                "description": "Short circuit current density.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "milliampere / centimeter ** 2"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "NumberEditQuantity"
                    }
                  ]
                },
                "name": "fill_factor",
                "description": "Fill factor.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "NumberEditQuantity"
                    }
                  ]
                },
                "name": "efficiency",
                "description": "Power conversion efficiency.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "NumberEditQuantity"
                    }
                  ]
                },
                "name": "potential_at_maximum_power_point",
                "description": "The potential at the maximum power point, Vmp.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "volt"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "NumberEditQuantity"
                    }
                  ]
                },
                "name": "current_density_at_maximun_power_point",
                "description": "The current density at the maximum power point, *Jmp*.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "milliampere / centimeter ** 2"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "NumberEditQuantity"
                    }
                  ]
                },
                "name": "series_resistance",
                "description": "The series resistance as extracted from the *J-V* curve.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "centimeter ** 2 * ohm"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "NumberEditQuantity"
                    }
                  ]
                },
                "name": "shunt_resistance",
                "description": "The shunt resistance as extracted from the *J-V* curve.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "centimeter ** 2 * ohm"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "name": "n_values",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "virtual": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 25,
            "m_parent_sub_section": "section_definitions",
            "name": "SolarCellJVCurve",
            "base_sections": [
              "/packages/18/section_definitions/24"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "cell_name",
                "description": "Cell identification name.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "current_density",
                "description": "Current density array of the *JV* curve.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "milliampere / centimeter ** 2"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "voltage",
                "description": "Voltage array of the of the *JV* curve.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "volt"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 26,
            "m_parent_sub_section": "section_definitions",
            "m_annotations": {
              "eln": [
                {
                  "lane_width": "600px"
                }
              ],
              "plotly_graph_object": [
                {
                  "data": {
                    "x": "#photon_energy_array",
                    "y": "#raw_eqe_array"
                  }
                },
                {
                  "data": {
                    "x": "#raw_photon_energy_array",
                    "y": "#raw_eqe_array"
                  }
                },
                {
                  "data": {
                    "x": "#raw_wavelength_array",
                    "y": "#raw_eqe_array"
                  }
                },
                {
                  "data": {
                    "x": "#photon_energy_array",
                    "y": "#eqe_array"
                  }
                },
                {
                  "data": {
                    "x": "#wavelength_array",
                    "y": "#eqe_array"
                  }
                },
                {
                  "data": {
                    "x": "#photon_energy_array",
                    "y": "#eqe_array"
                  }
                }
              ]
            },
            "name": "SolarCellEQE",
            "base_sections": [
              "/packages/0/section_definitions/3"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "FileEditQuantity"
                    }
                  ],
                  "browser": [
                    {
                      "adaptor": "RawFileAdaptor"
                    }
                  ]
                },
                "name": "eqe_data_file",
                "description": "Drop here your eqe file and click save for processing.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "NumberEditQuantity"
                    }
                  ]
                },
                "name": "header_lines",
                "description": "Number of header lines in the file. Edit in case your file has a header.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int64"
                },
                "default": 0
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "NumberEditQuantity"
                    }
                  ]
                },
                "name": "light_bias",
                "description": "The light intensity of any bias light during the EQE measurement.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "milliwatt / centimeter ** 2"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "NumberEditQuantity"
                    }
                  ]
                },
                "name": "bandgap_eqe",
                "description": "Bandgap derived from the EQE spectrum.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "electron_volt"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "NumberEditQuantity"
                    }
                  ]
                },
                "name": "integrated_jsc",
                "description": "The integrated short circuit current density $J_{SC}$ from the product of the EQE spectrum\nwith the *AM 1.5G* sun spectrum.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "milliampere / centimeter ** 2"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "NumberEditQuantity"
                    }
                  ]
                },
                "name": "integrated_j0rad",
                "description": "The integrated $J_{0, Rad}$ derived from the EQE data.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "milliampere / centimeter ** 2"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "NumberEditQuantity"
                    }
                  ]
                },
                "name": "voc_rad",
                "description": "Radiative $V_{OC}$ derived from the EQE data in V.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "volt"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "NumberEditQuantity"
                    }
                  ]
                },
                "name": "urbach_energy",
                "description": "Urbach energy fitted from the eqe in eV.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "electron_volt"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "urbach_energy_fit_std_dev",
                "description": "Standard deviation of the fitted Urbach energy parameter from the eqe in eV.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "electron_volt"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "n_values",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "n_raw_values",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "name": "raw_eqe_array",
                "description": "EQE array of the spectrum",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_raw_values"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "name": "raw_photon_energy_array",
                "description": "Raw Photon energy array of the eqe spectrum",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_raw_values"
                ],
                "unit": "electron_volt"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 13,
                "m_parent_sub_section": "quantities",
                "name": "raw_wavelength_array",
                "description": "Raw wavelength array of the eqe spectrum",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_raw_values"
                ],
                "unit": "nanometer"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 14,
                "m_parent_sub_section": "quantities",
                "name": "eqe_array",
                "description": "EQE array of the spectrum",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 15,
                "m_parent_sub_section": "quantities",
                "name": "wavelength_array",
                "description": "Interpolated/extrapolated wavelength array with *E<sub>u</sub>* of the eqe spectrum",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "nanometer"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 16,
                "m_parent_sub_section": "quantities",
                "name": "photon_energy_array",
                "description": "Interpolated/extrapolated photon energy array with a *E<sub>u</sub>*  of the eqe spectrum",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "electron_volt"
              }
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 19,
        "m_parent_sub_section": "packages",
        "name": "electronicparsers.vasp.metainfo.vasp",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "Run",
            "base_sections": [
              "/packages/11/section_definitions/3"
            ],
            "extends_base_section": true,
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "vasp_build_date",
                "description": "build date as string",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "vasp_src_date",
                "description": "date of last modification of the source as string",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "Method",
            "base_sections": [
              "/packages/8/section_definitions/44"
            ],
            "extends_base_section": true,
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_in",
                "description": "contains all the user-input INCAR parameters",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.JSON"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_out",
                "description": "contains the actual INCAR parameters used by VASP at runtime",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.JSON"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_unknown_incars",
                "description": "INCAR variables uknown wrt to Vasp Wiki",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.JSON"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_atom_kind_refs",
                "description": "reference to the atom kinds of each atom",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/8/section_definitions/10"
                },
                "shape": [
                  "number_of_atoms"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_numer_of_magmom",
                "description": "number of magnetic moments, number_of_atoms for ISPIN = 2, 3*number of atoms for\nnon-collinear magnetic systems",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_nose_thermostat",
                "description": "Nose thermostat output",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  4
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "name": "KMesh",
            "base_sections": [
              "/packages/8/section_definitions/2"
            ],
            "extends_base_section": true,
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_tetrahedrons_list",
                "description": "Rows of 5 data points. First the weight (symmetry degeneration), then the four corner\npoints of each tetrahedron.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "N",
                  5
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_tetrahedron_volume",
                "description": "Volume weight of a single tetrahedron (all tetra's must have the same volume)",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  1
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 3,
            "m_parent_sub_section": "section_definitions",
            "name": "System",
            "base_sections": [
              "/packages/9/section_definitions/9"
            ],
            "extends_base_section": true,
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_selective_dynamics",
                "description": "Boolean array to eiter allow or forbid coordinate modifications during relaxation",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "bool_"
                },
                "shape": [
                  "number_of_atoms",
                  3
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 4,
            "m_parent_sub_section": "section_definitions",
            "name": "HubbardKanamoriModel",
            "base_sections": [
              "/packages/8/section_definitions/6"
            ],
            "extends_base_section": true,
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_projection_type",
                "description": "Type of orbitals used for projection in order to calculate occupation numbers.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 5,
            "m_parent_sub_section": "section_definitions",
            "name": "GW",
            "base_sections": [
              "/packages/8/section_definitions/36"
            ],
            "extends_base_section": true,
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_response_functions_incar",
                "description": "Input parameters used in the \"response functions\".",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.JSON"
                },
                "shape": []
              }
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 20,
        "m_parent_sub_section": "packages",
        "name": "electronicparsers.vasp.metainfo.vasp_incars",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "Method",
            "base_sections": [
              "/packages/8/section_definitions/44"
            ],
            "extends_base_section": true,
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ADDGRID",
                "description": "ADDGRID determines whether an additional support grid is used for the evaluation\nof the augmentation charges.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_AEXX",
                "description": "AEXX specifies the fraction of exact exchange in a Hartree-Fock/DFT hybrid\nfunctional type calculation.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_AGGAC",
                "description": "AGGAC specifies the fraction of gradient corrections to the correlation in a\nHartree-Fock/DFT hybrid functional type calculation.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_AGGAX",
                "description": "AGGAX specifies the fraction of gradient corrections to the exchange in a Hartree-\nFock/DFT hybrid functional type calculation.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ALDAC",
                "description": "ALDAC specifies the fraction of LDA correlation in a Hartree-Fock/DFT hybrid\nfunctional type calculation.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ALGO",
                "description": "Option to specify the electronic minimisation algorithm (as of VASP.4.5) and/or to\nselect the type of GW calculations.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_AMIN",
                "description": "AMIN specifies the minimal mixing parameter in Kerker's initial approximation to\nthe charge dielectric function used in the Broyden / Pulay mixing scheme (IMIX=4,\nINIMIX=1).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_AMIX",
                "description": "AMIX specifies the linear mixing parameter.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_AMIX_MAG",
                "description": "AMIX_MAG linear mixing parameter for the magnetization density.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ANDERSEN_PROB",
                "description": "ANDERSEN_PROB sets the collision probability for the Anderson thermostat (in case\nVASP was compiled with the flag -Dtbdyn).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ANTIRES",
                "description": "The flag ANTIRES determines whether the Tamm-Dancoff approximation is used or not.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_APACO",
                "description": "APACO sets the maximum distance in the evaluation of the pair-correlation function\n(in Angstroms).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_BMIX",
                "description": "BMIX sets the cutoff wave vector for Kerker mixing scheme (IMIX = 1 and / or\nINIMIX = 1).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 13,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_BMIX_MAG",
                "description": "BMIX_MAG sets the cutoff wave vector for Kerker mixing scheme (IMIX=1 and/or\nINIMIX=1) for the magnetization density.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 14,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_CH_LSPEC",
                "description": "This flag controls whether the imaginary part of the dielectric function for a\nselected core electron is calculated and written to the OUTCAR file or not.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 15,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_CH_NEDOS",
                "description": "This tag specifies the number of frequency (energy) grid points on the x-axis in\nthe calculation of the dielectric function for XAS spectra.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 16,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_CH_SIGMA",
                "description": "This tag specifies the broadening in eV of the imaginary dielectric function for a\ncore electron.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 17,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_CLL",
                "description": "CLL selects the angular (l) quantum number of the excited electron when using\nICORELEVEL=2.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 18,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_CLN",
                "description": "CLN selects the main quantum number of the excited electron when using\nICORELEVEL=2.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 19,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_CLNT",
                "description": "CLNT selects for which species the core levels are calculated using the tag\nICORELEVEL.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 20,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_CLZ",
                "description": "CLZ selects the electron count of the excited electron when using ICORELEVEL=2.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 21,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_CMBJ",
                "description": "defines the _c_ parameter in the modified Becke-Johnson meta-GGA potential. NOTE:\nEither specify a single value, or one value per atomic type (FIXME)",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 22,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_CMBJA",
                "description": "sets the $\\alpha$ parameter in the modified Becke-Johnson meta-GGA potential.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 23,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_CMBJB",
                "description": "sets the $\\eta$ parameter in the modified Becke-Johnson meta-GGA potential.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 24,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_CSHIFT",
                "description": "CSHIFT sets the (small) complex shift $\\eta$ in the Kramers-Kronig transformation.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 25,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_DEPER",
                "description": "DEPER specifies a relative stopping criterion for the optimization of an\neigenvalue.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 26,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_DIMER_DIST",
                "description": "The flag DIMER_DIST defines the step size for the numerical differentiation (in\nAngstrongs) for the Improved Dimer Method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 27,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_DIPOL",
                "description": "Specifies the center of the cell in direct lattice coordinates with respect to\nwhich the total dipole-moment in the cell is calculated.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 28,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_DQ",
                "description": "Step size for the finite difference _k_-space derivative in the linear response\ncalculation of chemical shifts. Typical values for DQ are in the range [0.001 -\n0.003]. The default is often sufficient",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 29,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_EBREAK",
                "description": "EBREAK specifies an absolute stopping criterion for the optimization of an\neigenvalue.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 30,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_EDIFF",
                "description": "EDIFF specifies the global break condition for the electronic SC-loop.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 31,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_EDIFFG",
                "description": "EDIFFG defines the break condition for the ionic relaxation loop.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 32,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_EFIELD",
                "description": "EFIELD controls the magnitude of the applied electric force field.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 33,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_EFIELD_PEAD",
                "description": "EFIELD_PEAD specifies the homogeneous electric field in the electric enthalpy\nfunctional used to compute the  self-consistent response to finite electric\nfields.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 34,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_EINT",
                "description": "Specifies the energy range of the bands that are used for the evaluation of the\npartial charge density needed in Band decomposed charge densities. Check also\nNBMOD and IBAND.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  2
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 35,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_EMAX",
                "description": "EMAX specifies the  upper boundary of the energy range for the evaluation of the\nDOS.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 36,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_EMIN",
                "description": "specifies the lower boundary of the energy range for the evaluation of the DOS.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 37,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ENAUG",
                "description": "ENAUG specifies the cut-off energy of the plane wave representation of the\naugmentation charges in eV.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 38,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ENCUT",
                "description": "ENCUT specifies the cutoff energy for the planewave basis set in eV.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 39,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ENCUTFOCK",
                "description": "The ENCUTFOCK tag sets the energy cutoff that determines the FFT grids used by the\nHartree-Fock routines. WARNING: The flag ENCUTFOCK is no longer supported in\nVASP.5.2.4 and newer versions. Please use PRECFOCK instead.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 40,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ENCUTGW",
                "description": "The tag ENCUTGW sets the energy cutoff for response function. It controls the\nbasis set for the response functions  in exactly the same manner as ENCUT does for\nthe orbitals.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 41,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ENCUTGWSOFT",
                "description": "The flag ENCUTGWSOFT sets the energy cutoff for response function, such that it\nallows to truncate the Coulomb kernel slowly between the energy specified by\nENCUTGWSOFT and ENCUTGW.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 42,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ENINI",
                "description": "ENINI controls the cutoff during the initial (steepest descent) phase for\nIALGO=48.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 43,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_EPSILON",
                "description": "EPSILON sets the dielectric constant of the medium.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 44,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_EVENONLY",
                "description": "EVENONLY=.TRUE. selects a subset of k-points for the representation of the Fock\nexchange potential, with $C_1=C_2=C_3=1$, and $n_1+n_2+n_3$ even.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 45,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_EVENONLYGW",
                "description": "EVENONLYGW allows to restrict the k-points in the evaluation of response functions\n(in GW calculations) to even values.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 46,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_FERDO",
                "description": "FERDO sets the occupancies of the states in the down-spin channel for ISMEAR=-2\nand ISPIN=2.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "x_vasp_incar_NBANDS * x_vasp_number_of_k_points"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 47,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_FERWE",
                "description": "FERWE sets the occupancies of the states for  ISMEAR=-2.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "x_vasp_incar_NBANDS  *  x_vasp_number_of_k_points"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 48,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_FINDIFF",
                "description": "The flag DIMER_DIST defines whether a forward (FINDIFF=1) or a central (FINDIFF=2)\ndifference formula for the numerical differentiation to compute the curvature\nalong the dimer direction is used in the Improved Dimer Method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 49,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_GGA",
                "description": "GGA specifies the type of generalized-gradient-approximation one wishes to use.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 50,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_GGA_COMPAT",
                "description": "This flag restores the full lattice symmetry for gradient corrected functionals.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 51,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_HFLMAX",
                "description": "To be compatible w.r.t. old releases, VASP also reads the flag HFLMAX to the same\neffect as LMAXFOCK.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 52,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_HFRCUT",
                "description": "HFRCUT specifies the spherical cutoff radius for the potential kernel in hybrid\nfunctionals.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 53,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_HFSCREEN",
                "description": "HFSCREEN specifies the range-separation parameter in range separated hybrid\nfunctionals.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 54,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_HILLS_BIN",
                "description": "HILLS_BIN sets the number of steps after which the bias potential is updated in a\nmetadynamics run (in case VASP was compiled with -Dtbdyn).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 55,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_HILLS_H",
                "description": "HILLS_H specifies the height of the Gaussian hill (in eV) used in metadynamics (in\ncase VASP was compiled with -Dtbdyn).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 56,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_HILLS_W",
                "description": "HILLS_W specifies the width of the Gaussian hill (in units of the corresponding\ncollective variable) used in metadynamics (in case VASP was compiled with\n-Dtbdyn).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 57,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_HITOLER",
                "description": "HITOLER specifies the convergence parameter for iterative Hirschfeld partitioning\n(DFT-TS/HI).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 58,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_I_CONSTRAINED_M",
                "description": "I_CONSTRAINED_M switches on the constrained local moments approach.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 59,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_IALGO",
                "description": "IALGO selects the algorithm used to optimize the orbitals. WARNING",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 60,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_IBAND",
                "description": "Controls which bands are used in the calculation of Band decomposed charge\ndensities. Check also NBMOD and EINT.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "1..x_vasp_incar_NBANDS"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 61,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_IBRION",
                "description": "IBRION determines how the ions are updated and moved.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 62,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ICHARG",
                "description": "ICHARG determines how VASP constructs the <i>initial</i> charge density.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 63,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ICHIBARE",
                "description": "determines the order of the finite difference stencil used to calculate the\nmagnetic susceptibility.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 64,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ICORELEVEL",
                "description": "ICORELEVEL controls whether the core energies are explicitely calculated or not\nand how they are calculated.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 65,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_IDIPOL",
                "description": "IDIPOL switches on monopole/dipole and quadrupole corrections to the total energy.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 66,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_IEPSILON",
                "description": "The flag IEPSILON determines along which Cartesien the E field is applied.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 67,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_IGPAR",
                "description": "This tag specifies the socalled parallel or  $G_{||}$ direction in the integration\nover the reciprocal space unit cell needed for LCALCPOL.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 68,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_IMAGES",
                "description": "IMAGES defines the number of interpolated geometries between the initial and final\nstate in Elastic Band calculations",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 69,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_IMIX",
                "description": "IMIX specifies the type of mixing.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 70,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_INCREM",
                "description": "INCREM controls the transformation velocity in the slow-growth approach (in case\nVASP was compiled with -Dtbdyn).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "x"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 71,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_INIMIX",
                "description": "INIMIX determines the functional form of the initial mixing matrix in the Broyden\nscheme (IMIX=4).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 72,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_INIWAV",
                "description": "INIWAV specifies how to set up the initial orbitals in case ISTART=0.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 73,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_IPEAD",
                "description": "IPEAD specifies the order of the finite difference stencil used to compute the\nderivative of the cell-periodic part of the orbitals w.r.t. **k** (LPEAD=.TRUE.),\nand the derivative of the polarization w.r.t. the orbitals,  for (LCALCEPS=.TRUE.,\nor EFIELD_PEAD$\\not=$0).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 74,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ISIF",
                "description": "ISIF determines whether the stress tensor is calculated and which principal\ndegrees-of-freedom are allowed to change in relaxation and molecular dynamics\nruns.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 75,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ISMEAR",
                "description": "ISMEAR determines how the partial occupancies $f_{n\\mathbf{k}}$  are set for each\norbital. SIGMA  determines the width of the smearing in eV.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 76,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ISPIN",
                "description": "ISPIN specifies spin polarization.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 77,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ISTART",
                "description": "ISTART determines whether or not to read the WAVECAR file.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 78,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ISYM",
                "description": "ISYM determines the way VASP treats symmetry.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 79,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_IVDW",
                "description": "This tag controls whether vdW corrections are calculated or not. If they are\ncalculated IVDW controls how they are calculated.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 80,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_IWAVPR",
                "description": "IWAVPR determines how orbitals and/or charge densities are extrapolated from one\nionic configuration to the next configuration.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 81,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_KBLOCK",
                "description": "After KBLOCK*NBLOCK ionic steps the averaged pair correlation function and DOS are\nwritten to the files PCDAT and DOSCAR. More details can be found on the page\ndescribing the tag NBLOCK.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 82,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_KGAMMA",
                "description": "Determines whether the _k_-points (determined by the tag KSPACING if KPOINTS file\nis not present) are center around (KGAMMA=.TRUE.), or shifted away\n(KGAMMA=.FALSE.) from the $\\Gamma$ point.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 83,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_KPAR",
                "description": "KPAR determines the number of **k**-points that are to be treated in parallel\n(available as of VASP.5.3.2).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 84,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_KPOINT_BSE",
                "description": "The flag KPOINT_BSE allows to calculate the dielectric matrix at one of the\nkpoints used to sample the Brillouin zone. NOTE: Either specify one or three\nintegers (FIXME)",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 85,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_KPUSE",
                "description": "Specifies which k-points are used in the evaluation of the partial dos (Band\ndecomposed charge densities).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "1..x_vasp_number_of_k_points"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 86,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_KSPACING",
                "description": "The tag KSPACING determines the number of k-points if the KPOINTS file is not\npresent.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 87,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LADDER",
                "description": "Controls whether the ladder diagrams are included in the BSE calculation.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 88,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LAECHG",
                "description": "When LAECHG=.TRUE. the all-electron charge density will be reconstructed\nexplicitly and written out to file.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 89,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LAMBDA",
                "description": "LAMBDA sets the weight with which the penalty terms of the constrained local\nmoment approach enter into the total energy expression and the Hamiltonian.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 90,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LANGEVIN_GAMMA",
                "description": "LANGEVIN_GAMMA specifies the friction coefficients (in ps$^{-1}$) for atomic\ndegrees-of-freedom when using a Langevin thermostat (in case VASP was compiled\nwith -Dtbdyn).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "number_of_atomic_species"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 91,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LANGEVIN_GAMMA_L",
                "description": "LANGEVIN_GAMMA_L specifies the friction coefficient (in ps$^{-1}$) for lattice\ndegrees-of-freedom in case of Parrinello-Rahman dynamics (in case VASP was\ncompiled with -Dtbdyn).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 92,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LASPH",
                "description": "include non-spherical contributions related to the gradient of the density in the\nPAW spheres.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 93,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LASYNC",
                "description": "This tag controls the overlap in communication.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 94,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LATTICE_CONSTRAINTS",
                "description": "The tag LATTICE_CONSTRAINTS determines whether the lattice dynamics are released\n(LATTICE_CONSTRAINTS=.TRUE.) in the given directions or not.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": [
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 95,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LBERRY",
                "description": "This tag is used in the the evaluation of the Berry phase expression for the\nelectronic polarization of an insulating system.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 96,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LBLUEOUT",
                "description": "for LBLUEOUT=.TRUE., VASP writes output for the free-energy gradient calculation\nto the REPORT-file (in case VASP was compiled with -Dtbdyn).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 97,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LBONE",
                "description": "LBONE adds the small B-component to the chemical shift tensor.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 98,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LCALCEPS",
                "description": "for LCALCEPS=.TRUE. the macroscopic ion-clamped static dielectric tensor, Born\neffective charge tensors, and the ion-clamped piezoelectric tensor of the system\nare determined from the response to finite electric fields.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 99,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LCALCPOL",
                "description": "LCALCPOL=.TRUE. switches on the evaluation of the Berry phase expressions for the\nmacroscopic electronic polarization in accordance with the so-called Modern Theory\nof Polarization.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 100,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LCHARG",
                "description": "LCHARG determines whether the charge densities (files CHGCAR and CHG) are written.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 101,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LCHIMAG",
                "description": "calculate the chemical shifts by means of linear response.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 102,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LCORR",
                "description": "Controls whether Harris corrections are calculated or not.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 103,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LDAU",
                "description": "LDAU=.TRUE. switches on the L(S)DA+U.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 104,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LDAUJ",
                "description": "LDAUJ specifies the strength of the effective on-site exchange interactions.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "number_of_atomic_species"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 105,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LDAUL",
                "description": "LDAUL specifies the _l_-quantum number for which the on-site interaction is added.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "number_of_atomic_species"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 106,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LDAUPRINT",
                "description": "LDAUPRINT controls the verbosity of the L(S)DA+U routines.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 107,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LDAUTYPE",
                "description": "LDAUTYPE specifies which type of L(S)DA+U approach will be used.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 108,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LDAUU",
                "description": "LDAUU specifies the strength of the effective on-site Coulomb interactions.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "number_of_atomic_species"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 109,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LDIAG",
                "description": "This tag determines whether a subspace diagonalization is performed or not within\nthe main algorithm selected by IALGO.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 110,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LDIPOL",
                "description": "LDIPOL switches on corrections to the potential and forces in VASP. Can be applied\nfor charged molecules and  molecules and slabs with a net dipole moment.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 111,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LEFG",
                "description": "The LEFG Computes the Electric Field Gradient at positions of the atomic nuclei.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 112,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LELF",
                "description": "LELF determines whether to create an ELFCAR file or not.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 113,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LEPSILON",
                "description": "LEPSILON=.TRUE. determines the static dielectric matrix, ion-clamped piezoelectric\ntensor and the Born effective charges using density functional perturbation\ntheory.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 114,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LFOCKAEDFT",
                "description": "LFOCKAEDFT forces VASP to use the same charge augmentation for the Hartree and DFT\nexchange correlation part as is used in the Fock exchange and the many body beyond\nDFT methods, such as RPA, MP2 etc.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 115,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LHARTREE",
                "description": "Controls whether the bubble diagrams are included in the BSE calculation.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 116,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LHFCALC",
                "description": "LHFCALC specifies whether Hartree-Fock/DFT hybrid functional type calculations are\nperformed.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 117,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LHYPERFINE",
                "description": "compute the hyperfine tensors at the atomic sites (available as of vasp.5.3.2).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 118,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LKPROJ",
                "description": "switches on the **k**-point projection scheme.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 119,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LLRAUG",
                "description": "LLRAUG calculates the two-center contributions to the chemical shift tensor.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 120,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LMAXFOCK",
                "description": "LMAXFOCK sets the maximum angular momentum quantum number _L_ for the augmentation\nof charge densities in Hartree-Fock type routines.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 121,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LMAXFOCKAE",
                "description": "NMAXFOCKAE and LMAXFOCKAE determine whether the overlap densities in the Fock\nexchange and correlated wave function methods are accurately reconstructed on the\nplane wave grid. This flag generally only applies to the Fock-exchange part as\nwell as many-body post DFT methods (GW, RPA, MP2, etc.).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 122,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LMAXMIX",
                "description": "LMAXMIX controls up to which l-quantum number the one-center PAW charge densities\nare passed through the charge density mixer and written to the CHGCAR file.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 123,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LMAXPAW",
                "description": "LMAXPAW sets the maximum _l_-quantum number for the evaluation of the one-center\nterms on the radial support grids in the PAW method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 124,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LMAXTAU",
                "description": "LMAXTAU is the maximum _l_-quantum number included in the PAW one-center expansion\nof the kinetic energy density.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 125,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LMIXTAU",
                "description": "send the kinetic energy density through the density mixer as well.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 126,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LMONO",
                "description": "LMONO switches on monopole-monopole corrections for the total energy.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 127,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LNABLA",
                "description": "LNABLA=.TRUE. evaluates the transversal expression for the frequency dependent\ndielectric matrix.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 128,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LNMR_SYM_RED",
                "description": "discard symmetry operations that are not consistent with the way _k_-space\nderivative are calculated in the linear response calculations of chemical shifts.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 129,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LNONCOLLINEAR",
                "description": "LNONCOLLINEAR specifies whether fully non-collinear magnetic calculations are\nperformed.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 130,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LOCPROJ",
                "description": "by means of the LOCPROJ-tag one may specify a (set of) local function(s) on which\nthe orbitals are to be projected. These projections are written to the PROJCAR,\nLOCPROJ, and vasprun.xml files.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 131,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LOPTICS",
                "description": "LOPTICS=.TRUE. calculates the frequency dependent dielectric matrix after the\nelectronic ground state has been determined.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 132,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LORBIT",
                "description": "LORBIT, together with an appropriate RWIGS, determines whether the PROCAR or\nPROOUT files are written.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 133,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LORBMOM",
                "description": "LORBMOM specifies whether the orbital moments are written out or not (in a\ncalculation using LSORBIT=.TRUE.).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 134,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LPARD",
                "description": "Determines whether partial (band or k-point decomposed) charge densities are\nevaluated. See also 'Band-decomposed charge densities' .",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 135,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LPEAD",
                "description": "for LPEAD=.TRUE., the derivative of the cell-periodic part of the orbitals w.r.t.\n**k**  is calculated using finite differences.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 136,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LPLANE",
                "description": "LPLANE switches on the plane-wise data distribution in real space.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 137,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LREAL",
                "description": "LREAL determines whether the projection operators are evaluated in real-space or\nin reciprocal space.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 138,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LRPA",
                "description": "LRPA=.TRUE. includes local field effect on the Hartree level only.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 139,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LSCAAWARE",
                "description": "LSCAAWARE controls the distribution of the Hamilton matrix.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 140,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LSCALAPACK",
                "description": "LSCALAPACK controls the use of scaLAPACK.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 141,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LSCALU",
                "description": "LSCALU switches on the parallel LU decomposition (using scaLAPACK) in the\northonormalization of the wave functions.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 142,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LSCSGRAD",
                "description": "LSCSGRAD decides whether to compute gradients in the calculation of the MBD\ndispersion energy.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 143,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LSELFENERGY",
                "description": "This tag controls whether the frequency dependent self-energy is calculated or\nnot.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 144,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LSEPB",
                "description": "Specifies whether the charge density is calculated for every band separately and\nwritten to a file PARCHG.nb.* (LSEPB=.TRUE.) or whether charge density is merged\nfor all selected bands and written to the files PARCHG.ALLB.* or PARCHG.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 145,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LSEPK",
                "description": "Specifies whether the charge density of every k-point is write to the files\nPARCHG.*.nk (LSEPK=.TRUE.) or whether it is merged to a single file. If the merged\nfile is written, then the weight of each k-point is determined from the KPOINTS\nfile, otherwise the k-point weights of one are chosen.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 146,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LSORBIT",
                "description": "LSORBIT specifies whether spin-orbit coupling is taken into account.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 147,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LSPECTRAL",
                "description": "LSPECTRAL specifies to use the spectral method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 148,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LSPECTRALGW",
                "description": "LSPECTRALGW specifies to use the spectral method for calculating the self-energy.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 149,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LSPIRAL",
                "description": "set LSPIRAL=.TRUE. to represent spin spirals by means of a generalized Bloch\ncondition.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 150,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LSUBROT",
                "description": "LSUBROT determines whether an optimal rotation matrix between the occupied and\nunoccupied block is sought, when a direct optimization of the energy functional is\nperformed (i.e. ALGO = All | Damped).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 151,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LTHOMAS",
                "description": "LTHOMAS selects a decomposition of the exchange functional based on Thomas-Fermi\nscreening.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 152,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LUSE_VDW",
                "description": "The flag LUSE_VDW determines whether the VdW-DF functional of Langreth and\nLundqvist et al. is used or not.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 153,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LVDW_EWALD",
                "description": "LVDW_EWALD decides whether lattice summation in $E_{disp}$ expression by means of\nEwald's summation is computed in the DFT-D2 method (available in VASP.5.3.4 and\nlater).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 154,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LVDW_ONECELL",
                "description": "LVDW_ONECELL  can be used to disable vdW interaction with mirror image in X Y Z\ndirection. This is advisable for molecular calculations in the gas phase. In all\nother cases, use the default.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": [
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 155,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LVDWEXPANSION",
                "description": "LVDWEXPANSION  decides whether to write the two- to six- body contributions to MBD\ndispersion energy in the OUTCAR file.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 156,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LVHAR",
                "description": "This tag determines whether the total local potential (saved in the file LOCPOT)\ncontains the entire local potential (ionic + Hartree + exchange correlation) or\nthe electrostatic contributions only (ionic + Hartree).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 157,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LVTOT",
                "description": "LVTOT determines whether the total local potential is written to the LOCPOT file.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 158,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LWANNIER90",
                "description": "LWANNIER90=.TRUE. switches on the interface between VASP and WANNIER90.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 159,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LWANNIER90_RUN",
                "description": "LWANNIER90_RUN executes wannier_setup (see LWANNIER90=.TRUE.) and subsequently\nruns WANNIER90 in library mode (wannier_run).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 160,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LWAVE",
                "description": "LWAVE determines whether the wavefunctions are written to the WAVECAR file at the\nend of a run.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 161,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LWRITE_MMN_AMN",
                "description": "LWRITE_MMN_AMN=.TRUE. tells the VASP2WANNIER90 interface to write the\nwannier90.mmn and wannier90.amn files.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 162,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LWRITE_UNK",
                "description": "LWRITE_UNK decides whether the cell-periodic part of the relevant Bloch functions\nis written.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 163,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LWRITE_WANPROJ",
                "description": "LWRITE_WANPROJ determines whether the Wannier projection fille WANPROJ is written.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 164,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_LZEROZ",
                "description": "for LZEROZ=.TRUE. the _z_-component of the spin-spiral magnetisation density will\nbe forced to be and to remain zero.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 165,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_M_CONSTR",
                "description": "M_CONSTR specifies the desired local magnetic moment (size and/or direction) for\nthe constrained local moments approach.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "3*number_of_atoms"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 166,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_MAGMOM",
                "description": "MAGMOM Specifies the initial magnetic moment for each atom, if and only if\nICHARG=2, or if ICHARG=1 and the CHGCAR file contains no magnetisation density",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "number_of_atoms"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 167,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_MAXMEM",
                "description": "MAXMEM specifies the maximum memory one MPI rank will attempt to allocate (in\nMByte).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 168,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_MAXMIX",
                "description": "MAXMIX specifies the maximum number steps stored in Broyden mixer IMIX=4).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 169,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_MDALGO",
                "description": "MDALGO specifies the molecular dynamics simulation protocol (in case IBRION=0 and\nVASP was compiled with -Dtbdyn).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 170,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_METAGGA",
                "description": "selects one of various meta-GGA functionals.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 171,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_MINROT",
                "description": "The flag MINROT defines the value for which the dimer is rotated only if the\npredicted rotation angle is greater than MINROT (rad.) in the Improved Dimer\nMethod.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 172,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_MIXPRE",
                "description": "MIXPRE specifies the metric in the Broyden mixing scheme(IMIX=4).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 173,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_AFILT2_MB",
                "description": "This tag sets the filtering parameter for the angular filtering for\nML_FF_IAFILT2_MB in the machine learning force-field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 174,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_CDOUB",
                "description": "This flag controls the necessity of DFT calculations in the machine learning force\nfield method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 175,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_CSF",
                "description": "This flag sets the threshold for the spilling factor in the machine learning force\nfield method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 176,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_CSIG",
                "description": "Parameter used in the automatic determination of threshold for Bayesian error\nestimation in the machine learning force field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 177,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_CSLOPE",
                "description": "Parameter used in the automatic determination of threshold for Bayesian error\nestimation in the machine learning force field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 178,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_CTIFOR",
                "description": "This flag sets the threshold for the Bayesian error estimation on the force in the\nmachine learning force field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 179,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_EATOM",
                "description": "Reference total energies of isolated atoms used in the machine learning force\nfield method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "number_of_atoms"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 180,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_IAFILT2_MB",
                "description": "This tag specifies the type of angular filtering used in the machine learning\nforce field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 181,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_IBROAD1_MB",
                "description": "This tag determines how the atomic distribution is broadened for the radial\ndescriptor within the machine learning force field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 182,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_IBROAD2_MB",
                "description": "This tag determines how the atomic distribution is broadened for the angular\ndescriptor within the machine learning force field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 183,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_ICOUPLE_MB",
                "description": "This tag specifies the atoms where the coupling parameter is introduced to\ncalculate the chemical potential within the machine learning force field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "number_of_atoms"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 184,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_ICUT1_MB",
                "description": "This tag specifies the type of cutoff function used for the radial descriptor in\nthe machine learning force field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 185,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_ICUT2_MB",
                "description": "This tag specifies the type of cutoff function used for the angular descriptor in\nthe machine learning force field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 186,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_IERR",
                "description": "This tag selects the error estimation method used in the machine learning force\nfield method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 187,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_IREG_MB",
                "description": "This tag specifies whether the regularization parameters are kept constant or not\nin the machine learning force field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 188,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_ISAMPLE",
                "description": "This tag controls the sampling in the machine learning force field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 189,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_ISCALE_TOTEN_MB",
                "description": "This tag specifies how to scale the energy data for the many-body term in the\nmachine learning force field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 190,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_ISOAP1_MB",
                "description": "This tag defines the type of the SOAP kernel for the radial descriptor in the\nmachine learning force field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 191,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_ISOAP2_MB",
                "description": "This tag defines the type of the SOAP kernel for the angular descriptor in the\nmachine learning force field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 192,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_ISTART",
                "description": "This tag decides if and how calculations are continued from existing data in\nmachine learning force field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 193,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_IWEIGHT",
                "description": "Flag to control the weighting of training data in the machine learning force field\nmethod.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 194,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_LAFILT2_MB",
                "description": "This tag specifies whether angular filtering is applied or not within the machine\nlearning force field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 195,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_LBASIS_DISCARD",
                "description": "This variable specifies whether the basis sets are thrown away when its number\nexceeds ML_FF_MB_MB in the machine learning force field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 196,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_LCONF_DISCARD",
                "description": "This flag decides whether configurations that do not provide local reference\nconfigurations are discarded or not in the machine learning force field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 197,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_LCOUPLE_MB",
                "description": "This tag specifies whether coupling parameters are used for the calculation of\nchemical potentials is used or not within the machine learning force field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 198,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_LCRITERIA",
                "description": "Decides whether the threshold in the learning decision step for the Bayesian error\nestimation is renewed or not in the machine learning force field methods.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 199,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_LEATOM_MB",
                "description": "This term specifies whether the total atomic energy is written out or not.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 200,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_LHEAT_MB",
                "description": "This flag specifies whether the heat flux is calculated or not in the machine\nlearning force field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 201,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_LMAX2_MB",
                "description": "This tag specifies the maximum angular momentum quantum number of spherical\nharmonics used to expand atomic distributions within the machine learning force\nfield method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 202,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_LMLFF",
                "description": "Main control tag whether to use machine learned force fields or not.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 203,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_LMLMB",
                "description": "This controls whether the many-body interaction term is included in the machine\nlearning force field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 204,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_LNORM1_MB",
                "description": "This tag specifies whether the radial descriptor is normalized (by dividing\nthrough it's norm) or not.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 205,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_LNORM2_MB",
                "description": "This tag specifies whether the angular descriptor is normalized (by dividing\nthrough it's norm) or not.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 206,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_MB_MB",
                "description": "This flag sets the maximum number of basis sets describing the many-body\ninteractions in the machine learning force field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 207,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_MCONF",
                "description": "This flag sets the maximum number of configurations used for training in the\nmachine learning force field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 208,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_MCONF_NEW",
                "description": "This flag sets the number of configurations that are stored temporally as\ncandidates for the training data in the machine learning force field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 209,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_MHIS",
                "description": "This flag sets the number of estimated errors stored in memory to determine the\nthreshold for the Bayesian error in the machine learning force field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 210,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_MRB1_MB",
                "description": "This tag sets the number of radial basis sets used to expand the atomic\ndistribution for the radial descriptor within the machine learning force field\nmethod.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 211,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_MRB2_MB",
                "description": "This tag sets the number of radial basis sets used to expand the atomic\ndistribution for the angular descriptor withtin the machine learning force field\nmethod.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 212,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_MSPL1_MB",
                "description": "This tag sets the number of points for the radial grid used in the spline\ninterpolation for the radial descriptor within the machine learning force field\nmethod.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 213,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_MSPL2_MB",
                "description": "This tag sets the number of points for the radial grid used in the spline\ninterpolation of the angular descriptor within the machine learning force field\nmethod.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 214,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_NATOM_COUPLED_MB",
                "description": "This tag specifies the number of atoms for which a coupling parameter is\nintroduced to calculate the chemical potential within the machine learning force\nfield method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 215,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_NDIM_SCALAPACK",
                "description": "This flag sets the dimension of the ScaLAPACK grids used in the machine learning\nforce field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 216,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_NHYP1_MB",
                "description": "Polynomial power of the radial kernel.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 217,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_NHYP2_MB",
                "description": "Polynomial parameter (power) of the SOAP kernel.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 218,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_NMDINT",
                "description": "Tag to control the minimum interval to get training samples in the machine\nlearning force field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 219,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_NR1_MB",
                "description": "This tag determines the number of grid points used to execute radial integrations\nto compute the radial descriptor within the machine learning force field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 220,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_NR2_MB",
                "description": "This tag determines the number of grid points used to execute radial integrations\nto compute the angular descriptor within the machine learning force field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 221,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_NWRITE",
                "description": "This tag controls part of the output within the machine learning force field\nmethod.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 222,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_RCOUPLE_MB",
                "description": "This tag specifies the value of the coupling parameter for the calculation of the\nchemical potential within the machine learning force field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 223,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_RCUT1_MB",
                "description": "This flag sets the cutoff radius for the radial descriptor in the machine learning\nforce field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 224,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_RCUT2_MB",
                "description": "This flag sets the cutoff radius for the angular descriptor in the machine\nlearning force field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 225,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_SIGV0_MB",
                "description": "This flag sets the initial noise parameter in the machine learning force field\nmethod.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 226,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_SIGW0_MB",
                "description": "This flag sets the initial precision parameter in the machine learning force field\nmethod.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 227,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_SION1_MB",
                "description": "This tag specifies the width of the Gaussian functions used for broadening the\natomic distributions for the radial descriptor within the machine learning force\nfield method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 228,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_SION2_MB",
                "description": "This tag specifies the width of the Gaussian functions used for broadening the\natomic distributions of the angular descriptor within the machine learning force\nfield method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 229,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_W1_MB",
                "description": "This tag defines the weight for the radial descriptor within the machine learning\nforce field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 230,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_W2_MB",
                "description": "This tag defines the weight for the angular descriptor within the machine learning\nforce field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 231,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_WTIFOR",
                "description": "This tag sets the weight for the scaling of the forces in the training data within\nthe machine learning force field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 232,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_WTOTEN",
                "description": "This tag sets the weight for the scaling of the total energy in the training data\nwithin the machine learning force field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 233,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ML_FF_WTSIF",
                "description": "This tag sets the weight for the scaling of the total energy in the training data\nwithin the machine learning force field method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 234,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NBANDS",
                "description": "NBANDS determines the actual number of bands in the calculation.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 235,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NBANDSGW",
                "description": "The flag determines how many QP energies are calculated and updated in GW type\ncalculations.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 236,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NBANDSO",
                "description": "NBANDSO determines how many occupied orbitals are included in the Casida/BSE\ncalculations or time-propagation.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 237,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NBANDSV",
                "description": "NBANDSV determines how many unoccupied orbitals are included in the Casida/BSE\ncalculations or timepropagation.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 238,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NBLK",
                "description": "NBLK determines the blocking factor in many BLAS level 3 routines.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 239,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NBLOCK",
                "description": "After NBLOCK ionic steps the pair correlation function and the DOS are calculated\nand the ionic configuration is written to the XDATCAR-file.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 240,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NBMOD",
                "description": "Controls which bands are used in the calculation of Band decomposed charge\ndensities. Check also IBAND and EINT.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 241,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NBSEEIG",
                "description": "NBSEEIG sets the number number of BSE eigenvectors written to the BSEFATBAND\noutput file.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 242,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NCORE",
                "description": "NCORE determines the number of compute cores that work on an individual orbital\n(available as of VASP.5.2.13).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 243,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NCRPA_BANDS",
                "description": "Controls which bands are excluded in CRPA. Check also NTARGET_STATES.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "1..x_vasp_incar_NBANDS"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 244,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NDAV",
                "description": "NDAV sets the maximum number of iterative steps per bands per RMM-DIIS step\n(IALGO=4X).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 245,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NEDOS",
                "description": "NEDOS specifies number of gridpoints on which the DOS is evaluated",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 246,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NELECT",
                "description": "NELECT sets the number of electrons.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 247,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NELM",
                "description": "NELM sets the maximum number of electronic SC (selfconsistency) steps which may be\nperformed.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 248,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NELMDL",
                "description": "NELMDL specifies the number of non-selfconsistent steps at the beginning.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 249,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NELMIN",
                "description": "NELMIN specifies the minimum number of electronic SCF steps.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 250,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NFREE",
                "description": "depending on IBRION, NFREE specifies the number of remembered steps in the history\nof ionic convergence runs, or the number of ionic displacements in frozen phonon\ncalculations.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 251,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NGX",
                "description": "NGX sets the number of grid points in the FFT-grid along the first lattice vector.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 252,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NGXF",
                "description": "NGXF sets the number of grid points in the fine FFT-grid along the first lattice\nvector.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 253,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NGY",
                "description": "NGY sets the number of grid points in the FFT-grid along the second lattice\nvector.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 254,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NGYF",
                "description": "NGYF sets the number of grid points in the fine FFT-grid along the second lattice\nvector.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 255,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NGYROMAG",
                "description": "NGYROMAG specifies the nuclear gyromagnetic ratios (in MHz, for H<sub>0</sub> = 1\nT) for the atomic types on the POTCAR file.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "number_of_atomic_species"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 256,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NGZ",
                "description": "NGZ sets the number of grid points in the FFT-grid along the third lattice vector.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 257,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NGZF",
                "description": "NGZF sets the number of grid points in the fine  FFT-grid along the first lattice\nvector.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 258,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NKRED",
                "description": "NKRED specifies an uniform reduction factor for the **q**-point grid\nrepresentation of the exact exchange potential and the correlation part in GW\ncalculations.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 259,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NKREDX",
                "description": "NKREDX specifies a reduction factor for the **q**-point grid representation of the\nexact exchange potential along reciprocal space direction **b**<sub>1</sub>.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 260,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NKREDY",
                "description": "NKREDY specifies a reduction factor for the **q**-point grid representation of the\nexact exchange potential along reciprocal space direction **b**<sub>2</sub>.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 261,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NKREDZ",
                "description": "NKREDZ specifies a reduction factor for the **q**-point grid representation of the\nexact exchange potential along reciprocal space direction **b**<sub>3</sub>.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 262,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NLSPLINE",
                "description": "construct the PAW projectors in reciprocal space using spline interpolation so\nthat they are _k_-differentiable.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 263,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NMAXFOCKAE",
                "description": "NMAXFOCKAE and LMAXFOCKAE determine whether the overlap densities in the Fock\nexchange and correlated wave function methods are accurately reconstructed on the\nplane wave grid. This flag generally only applies to the Fock-exchange part as\nwell as many-body post DFT methods (GW, RPA, MP2, etc.).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 264,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NOMEGA",
                "description": "NOMEGA specifies the number of (imaginary) frequency and imaginary time grid\npoints.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 265,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NOMEGAPAR",
                "description": "NOMEGAPAR available as of VASP.6, specifies the number of processor groups sharing\nthe same imaginary frequency grid points..",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 266,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NOMEGAR",
                "description": "NOMEGAR specifies the number of frequency grid points along the real axis.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 267,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NPACO",
                "description": "NPACO sets the number of slots in the pair-correlation function written to PCDAT.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 268,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NPAR",
                "description": "NPAR determines the number of bands that are treated in parallel.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 269,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NPPSTR",
                "description": "NPPSTR specifies the number of k-points on the strings in the IGPAR direction.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 270,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NSIM",
                "description": "NSIM sets the number of bands that are optimized simultaneously by the RMM-DIIS\nalgorithm.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 271,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NSUBSYS",
                "description": "NSUBSYS defines the atomic subsystems in calculations with multiple Anderson\nthermostats (in case VASP was compiled with -Dtbdyn).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 272,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NSW",
                "description": "NSW sets the maximum number of ionic steps.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 273,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NTARGET_STATES",
                "description": "Controls which Wannier states are excluded in CRPA. Check also NCRPA_BANDS.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "x_vasp_incar_NBANDS"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 274,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NTAUPAR",
                "description": "NTAUPAR available as of VASP.6, specifies the number of MPI groups sharing same\nimaginary time grid points. The default value of NTAUPAR is set automatically and\ndepends on MAXMEM, the available memory for each rank on one node.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 275,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NUPDOWN",
                "description": "Sets the difference between the number of electrons in the up and down spin\ncomponents.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 276,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_NWRITE",
                "description": "This flag determines how much will be written to the file OUTCAR ('verbosity\nflag').",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 277,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ODDONLY",
                "description": "ODDONLY=.TRUE. selects a subset of **k**-points for the representation of the Fock\nexchange potential, with _C_<sub>1</sub>=_C_<sub>2</sub>=_C_<sub>3</sub>=1, and\n_n_<sub>1</sub>+_n_<sub>2</sub>+_n_<sub>3</sub> odd.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 278,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ODDONLYGW",
                "description": "ODDONLYGW allows to avoid the inclusion of the  point in the evaluation of\nresponse functions (in GW calculations).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 279,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_OFIELD_A",
                "description": "The flag OFIELD_A sets the desired order parameter *Q*<sub>6</sub> in the\nInterface pinning method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 280,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_OFIELD_KAPPA",
                "description": "The flag OFIELD_KAPPA sets the strength of bias potential in units of 'eV/(unit of\nQ)$^2$' in the Interface pinning method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 281,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_OFIELD_Q6_FAR",
                "description": "The flag OFIELD_Q6_FAR sets the far fading distance (in Angstroms) for the\ncomputation of a continuous to *Q*<sub>6</sub> parameter in the Interface pinning\nmethod.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 282,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_OFIELD_Q6_NEAR",
                "description": "The flag OFIELD_Q6_NEAR sets the near fading distance (in Angstroms) for the\ncomputation of a continuous *Q*<sub>6</sub> parameter in the Interface pinning\nmethod.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 283,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_OMEGAMAX",
                "description": "OMEGAMAX specifies the maximum frequency for dense part of the frequency grid. For\nCRPA calculations, OMEGAMAX is the frequency point of the interaction.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 284,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_OMEGAMIN",
                "description": "minimum frequency in the frequency grid.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 285,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_OMEGATL",
                "description": "OMEGATL specifies the maximum frequency for coarse part of the frequency grid.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 286,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_PARAM1",
                "description": "The flag PARAM1 determines the first parameter used in the enhancement factor of\nthe optPBE-vdW and optB88-vdW functional.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 287,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_PARAM2",
                "description": "The flag PARAM2 determines the second parameter used in the enhancement factor of\nthe optPBE-vdW and optB88-vdW functional.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 288,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_PFLAT",
                "description": "Control flag for the output of the profiling routines.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 289,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_PHON_LBOSE",
                "description": "This flag determines whether random structures in the Monte-Carlo (MC) sampling\nare created according to Bose-Einstein or Maxwell-Boltzmann statistics.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 290,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_PHON_LMC",
                "description": "This flag controls whether electron-phonon interactions from Monte-Carlo sampling\nare calculated or not.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 291,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_PHON_NSTRUCT",
                "description": "This flag sets the number of structures for electron-phonon interactions from\nMonte-Carlo (MC) sampling.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 292,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_PHON_NTLIST",
                "description": "This flag sets the number temperatures for that the electron-phonon interactions\nusing the ZG configuration is evaluated.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 293,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_PHON_TLIST",
                "description": "This flag provides the list of temperatures for that the electron-phonon\ninteractions using the ZG configuration is evaluated.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "x_vasp_incar_PHON_NTLIST"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 294,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_PLEVEL",
                "description": "Control flag for the output of the profiling routines.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 295,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_PMASS",
                "description": "PMASS assigns a fictitious mass (in amu) to the lattice degrees-of-freedom in case\nof Parrinello-Rahman dynamics (in case VASP was compiled with -Dtbdyn).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 296,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_POMASS",
                "description": "POMASS describes the mass of each atomic sphere in atomic units.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 297,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_POTIM",
                "description": "POTIM sets the time step (MD) or step width scaling (ionic relaxations).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 298,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_PREC",
                "description": "PREC specifies the precision  mode.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 299,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_PRECFOCK",
                "description": "PRECFOCK controls the FFT grids used in the exact exchange routines (Hartree-Fock\nand hybrid functionals).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 300,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_PROUTINE",
                "description": "Control flag for the output of the profiling routines.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 301,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_PSTRESS",
                "description": "This flag controls whether Pulay corrections are added to the stress tensor or\nnot. In molecular dynamics calculations it controls the pressure. The unit of\nPSTRESS is in kB.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 302,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_PSUBSYS",
                "description": "PSUBSYS sets the collision probabilities for the atoms in each atomic subsystem in\ncalculations with multiple Anderson thermostats (in case VASP was compiled with\n-Dtbdyn). Note: 0 \u2264 PSUBSYS \u2264 1",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "1..3"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 303,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_PTHRESHOLD",
                "description": "Control flag for the output of the profiling routines.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 304,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_QMAXFOCKAE",
                "description": "The parameter QMAXFOCKAE controls at which wave vectors the local augmentation\ncharges are fitted to obtain an accurate charge augmentation on the plane wave\ngrid.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "1..x_vasp_number_of_k_points"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 305,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_QSPIRAL",
                "description": "the QSPIRAL-tag specifies the spin spiral propagation vector.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 306,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_QUAD_EFG",
                "description": "nuclear quadrupole moment (in millbarn) for the atomic types on the POTCAR file.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "number_of_atomic_species"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 307,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_RANDOM_SEED",
                "description": "RANDOM_SEED specifies the seed of the random-number-generator (in case VASP was\ncompiled with -Dtbdyn).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "x"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 308,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ROPT",
                "description": "ROPT determines how precise the projectors are represented in real space.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "number_of_atomic_species"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 309,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_RWIGS",
                "description": "RWIGS specifies the Wigner-Seitz radius for each atom type.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "number_of_atomic_species"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 310,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_SAXIS",
                "description": "SAXIS specifies the quantisation axis for noncollinear spins.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 311,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_SCSRAD",
                "description": "SCSRAD defines the cutoff radius (in Angs ) used in the calculation of\n$\\tau_{ij}$ within the Tkatchenko-Scheffler method. Self-consistent screening in\nTkatchenko-Scheffler method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 312,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_SHAKEMAXITER",
                "description": "SHAKEMAXITER specifies the maximum number of iterations in the SHAKE algorithm (in\ncase VASP was compiled with -Dtbdyn).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 313,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_SHAKETOL",
                "description": "SHAKETOL specifies the tolerance for the SHAKE algorithm (in case VASP was\ncompiled with -Dtbdyn).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 314,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_SIGMA",
                "description": "SIGMA specifies the width of the smearing in eV.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 315,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_SMASS",
                "description": "SMASS controls the velocities during an ab-initio molecular dynamics run.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 316,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_SMEARINGS",
                "description": "SMEARINGS defines the smearing parameters for ISMEAR=-3 in the calculation of the\npartial occupancies.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "x_vasp_incar_NSW"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 317,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_SPRING",
                "description": "SPRING gives the <i>spring constant</i> between the images as used in the elastic\nband method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 318,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_STEP_MAX",
                "description": "The flag STEP_MAX defines the trust radius (upper limit) for the optimization step\n(in Angs ) in the Improved Dimer Method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 319,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_STEP_SIZE",
                "description": "The flag STEP_SIZE defines the trial step size for the optimization step (in Angs\n) in the Improved Dimer Method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 320,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_SYMPREC",
                "description": "SYMPREC determines to which accuracy the positions in the POSCAR file must be\nspecified (as of VASP.4.4.4).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 321,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_SYSTEM",
                "description": "The 'title string' defined by SYSTEM is for the user only and should help the user\nto identify what he wants to do with this specific input file.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 322,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_TEBEG",
                "description": "TEBEG sets the start temperature for an ab-initio molecular dynamics run\n(IBRION=0) and other routines (e.g. Electron-phonon interactions from Monte-Carlo\nsampling).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 323,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_TEEND",
                "description": "TEEND sets the final temperature for an ab-initio molecular dynamics run\n(IBRION=0; SMASS=\u22121).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 324,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_TIME",
                "description": "TIME controls the time step for IALGO=5X and for the initial (steepest descent)\nphase of IALGO=4X.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 325,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_TSUBSYS",
                "description": "TSUBSYS sets the temperatures for the atomic subsystems in calculations with\nmultiple Anderson thermostats (in case VASP was compiled with -Dtbdyn).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 326,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_VALUE_MAX",
                "description": "VALUE_MAX sets the upper limits for the monitoring of geometric parameters (in\ncase VASP was compiled with -Dtbdyn).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "x"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 327,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_VALUE_MIN",
                "description": "VALUE_MIN sets the lower limits for the monitoring of geometric parameters (in\ncase VASP was compiled with -Dtbdyn).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "x"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 328,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_VCUTOFF",
                "description": "The parameter VCUTOFF sets the energy cutoff for bare Coulomb matrix elements and\ncontrols the basis set for the bare Coulomb interaction.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 329,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_VDW_A1",
                "description": "VDW_A1 defines the damping function parameter  in the DFT-D3 method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 330,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_VDW_A2",
                "description": "VDW_A2 defines the damping function parameter  in the DFT-D3 method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 331,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_VDW_C6",
                "description": "VDW_C6 defines the  $C_6$ parameters (units: J.nm$^6$mol$^{-1}$ ) for each species\ndefined in the POSCAR file within the DFT-D2 method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "x"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 332,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_VDW_CNRADIUS",
                "description": "VDW_CNRADIUS defines the cutoff radius (in Angs ) for the calculation of the\ncoordination numbers used in the DFT-D3 method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 333,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_VDW_D",
                "description": "VDW_D defines the damping parameter _d_ in the DFT-D2method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 334,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_VDW_R0",
                "description": "VDW_R0 defines the $R_0$ parameters (units: Angs ) for each species defined in the\nPOSCAR file within the DFT-D2 method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "number_of_atomic_species"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 335,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_VDW_RADIUS",
                "description": "VDW_RADIUS defines the cutoff radius (in Angs) for the pair interactions used in\nthe DFT-D2 and DFT-D3 method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 336,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_VDW_S6",
                "description": "VDW_S6 defines the global scaling factor _S_6_ in the DFT-D2 method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 337,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_VDW_S8",
                "description": "VDW_S8 defines the damping function parameter $s_8$ in the DFT-D3 method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 338,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_VDW_SR",
                "description": "VDW_SR defines the damping function parameter $S_R$ (or scaling factor) in the\nDFT-D2 and DFT-D3 method.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 339,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_VOSKOWN",
                "description": "Determines whether Vosko-Wilk-Nusair interpolation is used or not.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 340,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_WC",
                "description": "WC specifies the weight factor for each step in Broyden mixing scheme (IMIX=4).",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 341,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_WEIMIN",
                "description": "WEIMIN specifies the maximum weight for a band to be considered empty.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 342,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ZVAL",
                "description": "ZVAL describes the valency of each atomic sphere.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              }
            ]
          }
        ],
        "category_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Category",
            "m_parent_index": 0,
            "m_parent_sub_section": "category_definitions",
            "name": "x_vasp_incar_param",
            "description": "Incar parameters. Value stored in incar."
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 21,
        "m_parent_sub_section": "packages",
        "name": "electronicparsers.vasp.metainfo.vasp_incarsOut",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "Method",
            "base_sections": [
              "/packages/8/section_definitions/44"
            ],
            "extends_base_section": true,
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ADDGRID",
                "description": "ADDGRID determines whether an additional support grid is used for the evaluation\nof the augmentation charges.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_AEXX",
                "description": "AEXX specifies the fraction of exact exchange in a Hartree-Fock/DFT hybrid\nfunctional type calculation.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_AGGAC",
                "description": "AGGAC specifies the fraction of gradient corrections to the correlation in a\nHartree-Fock/DFT hybrid functional type calculation.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_AGGAX",
                "description": "AGGAX specifies the fraction of gradient corrections to the exchange in a Hartree-\nFock/DFT hybrid functional type calculation.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ALDAC",
                "description": "ALDAC specifies the fraction of LDA correlation in a Hartree-Fock/DFT hybrid\nfunctional type calculation.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ALGO",
                "description": "Option to specify the electronic minimisation algorithm (as of VASP.4.5) and/or to\nselect the type of GW calculations.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_AMIN",
                "description": "AMIN specifies the minimal mixing parameter in Kerker's initial approximation to\nthe charge dielectric function used in the Broyden / Pulay mixing scheme (IMIX=4,\nINIMIX=1).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_AMIX",
                "description": "AMIX specifies the linear mixing parameter.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_AMIX_MAG",
                "description": "AMIX_MAG linear mixing parameter for the magnetization density.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ANDERSEN_PROB",
                "description": "ANDERSEN_PROB sets the collision probability for the Anderson thermostat (in case\nVASP was compiled with the flag -Dtbdyn).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ANTIRES",
                "description": "The flag ANTIRES determines whether the Tamm-Dancoff approximation is used or not.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_APACO",
                "description": "APACO sets the maximum distance in the evaluation of the pair-correlation function\n(in Angstroms).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_BMIX",
                "description": "BMIX sets the cutoff wave vector for Kerker mixing scheme (IMIX = 1 and / or\nINIMIX = 1).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 13,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_BMIX_MAG",
                "description": "BMIX_MAG sets the cutoff wave vector for Kerker mixing scheme (IMIX=1 and/or\nINIMIX=1) for the magnetization density.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 14,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_CH_LSPEC",
                "description": "This flag controls whether the imaginary part of the dielectric function for a\nselected core electron is calculated and written to the OUTCAR file or not.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 15,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_CH_NEDOS",
                "description": "This tag specifies the number of frequency (energy) grid points on the x-axis in\nthe calculation of the dielectric function for XAS spectra.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 16,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_CH_SIGMA",
                "description": "This tag specifies the broadening in eV of the imaginary dielectric function for a\ncore electron.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 17,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_CLL",
                "description": "CLL selects the angular (l) quantum number of the excited electron when using\nICORELEVEL=2.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 18,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_CLN",
                "description": "CLN selects the main quantum number of the excited electron when using\nICORELEVEL=2.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 19,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_CLNT",
                "description": "CLNT selects for which species the core levels are calculated using the tag\nICORELEVEL.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 20,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_CLZ",
                "description": "CLZ selects the electron count of the excited electron when using ICORELEVEL=2.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 21,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_CMBJ",
                "description": "defines the _c_ parameter in the modified Becke-Johnson meta-GGA potential. NOTE:\nEither specify a single value, or one value per atomic type (FIXME)",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 22,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_CMBJA",
                "description": "sets the $\\alpha$ parameter in the modified Becke-Johnson meta-GGA potential.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 23,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_CMBJB",
                "description": "sets the $\\eta$ parameter in the modified Becke-Johnson meta-GGA potential.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 24,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_CSHIFT",
                "description": "CSHIFT sets the (small) complex shift $\\eta$ in the Kramers-Kronig transformation.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 25,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_DEPER",
                "description": "DEPER specifies a relative stopping criterion for the optimization of an\neigenvalue.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 26,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_DIMER_DIST",
                "description": "The flag DIMER_DIST defines the step size for the numerical differentiation (in\nAngstrongs) for the Improved Dimer Method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 27,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_DIPOL",
                "description": "Specifies the center of the cell in direct lattice coordinates with respect to\nwhich the total dipole-moment in the cell is calculated.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 28,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_DQ",
                "description": "Step size for the finite difference _k_-space derivative in the linear response\ncalculation of chemical shifts. Typical values for DQ are in the range [0.001 -\n0.003]. The default is often sufficient",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 29,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_EBREAK",
                "description": "EBREAK specifies an absolute stopping criterion for the optimization of an\neigenvalue.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 30,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_EDIFF",
                "description": "EDIFF specifies the global break condition for the electronic SC-loop.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 31,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_EDIFFG",
                "description": "EDIFFG defines the break condition for the ionic relaxation loop.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 32,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_EFIELD",
                "description": "EFIELD controls the magnitude of the applied electric force field.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 33,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_EFIELD_PEAD",
                "description": "EFIELD_PEAD specifies the homogeneous electric field in the electric enthalpy\nfunctional used to compute the  self-consistent response to finite electric\nfields.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 34,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_EINT",
                "description": "Specifies the energy range of the bands that are used for the evaluation of the\npartial charge density needed in Band decomposed charge densities. Check also\nNBMOD and IBAND.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  2
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 35,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_EMAX",
                "description": "EMAX specifies the  upper boundary of the energy range for the evaluation of the\nDOS.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 36,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_EMIN",
                "description": "specifies the lower boundary of the energy range for the evaluation of the DOS.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 37,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ENAUG",
                "description": "ENAUG specifies the cut-off energy of the plane wave representation of the\naugmentation charges in eV.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 38,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ENCUT",
                "description": "ENCUT specifies the cutoff energy for the planewave basis set in eV.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 39,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ENCUTFOCK",
                "description": "The ENCUTFOCK tag sets the energy cutoff that determines the FFT grids used by the\nHartree-Fock routines. WARNING: The flag ENCUTFOCK is no longer supported in\nVASP.5.2.4 and newer versions. Please use PRECFOCK instead.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 40,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ENCUTGW",
                "description": "The tag ENCUTGW sets the energy cutoff for response function. It controls the\nbasis set for the response functions  in exactly the same manner as ENCUT does for\nthe orbitals.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 41,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ENCUTGWSOFT",
                "description": "The flag ENCUTGWSOFT sets the energy cutoff for response function, such that it\nallows to truncate the Coulomb kernel slowly between the energy specified by\nENCUTGWSOFT and ENCUTGW.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 42,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ENINI",
                "description": "ENINI controls the cutoff during the initial (steepest descent) phase for\nIALGO=48.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 43,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_EPSILON",
                "description": "EPSILON sets the dielectric constant of the medium.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 44,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_EVENONLY",
                "description": "EVENONLY=.TRUE. selects a subset of k-points for the representation of the Fock\nexchange potential, with $C_1=C_2=C_3=1$, and $n_1+n_2+n_3$ even.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 45,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_EVENONLYGW",
                "description": "EVENONLYGW allows to restrict the k-points in the evaluation of response functions\n(in GW calculations) to even values.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 46,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_FERDO",
                "description": "FERDO sets the occupancies of the states in the down-spin channel for ISMEAR=-2\nand ISPIN=2.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "x_vasp_incar_NBANDS * x_vasp_number_of_k_points"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 47,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_FERWE",
                "description": "FERWE sets the occupancies of the states for  ISMEAR=-2.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "x_vasp_incar_NBANDS  *  x_vasp_number_of_k_points"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 48,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_FINDIFF",
                "description": "The flag DIMER_DIST defines whether a forward (FINDIFF=1) or a central (FINDIFF=2)\ndifference formula for the numerical differentiation to compute the curvature\nalong the dimer direction is used in the Improved Dimer Method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 49,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_GGA",
                "description": "GGA specifies the type of generalized-gradient-approximation one wishes to use.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 50,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_GGA_COMPAT",
                "description": "This flag restores the full lattice symmetry for gradient corrected functionals.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 51,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_HFLMAX",
                "description": "To be compatible w.r.t. old releases, VASP also reads the flag HFLMAX to the same\neffect as LMAXFOCK.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 52,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_HFRCUT",
                "description": "HFRCUT specifies the spherical cutoff radius for the potential kernel in hybrid\nfunctionals.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 53,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_HFSCREEN",
                "description": "HFSCREEN specifies the range-separation parameter in range separated hybrid\nfunctionals.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 54,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_HILLS_BIN",
                "description": "HILLS_BIN sets the number of steps after which the bias potential is updated in a\nmetadynamics run (in case VASP was compiled with -Dtbdyn).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 55,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_HILLS_H",
                "description": "HILLS_H specifies the height of the Gaussian hill (in eV) used in metadynamics (in\ncase VASP was compiled with -Dtbdyn).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 56,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_HILLS_W",
                "description": "HILLS_W specifies the width of the Gaussian hill (in units of the corresponding\ncollective variable) used in metadynamics (in case VASP was compiled with\n-Dtbdyn).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 57,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_HITOLER",
                "description": "HITOLER specifies the convergence parameter for iterative Hirschfeld partitioning\n(DFT-TS/HI).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 58,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_I_CONSTRAINED_M",
                "description": "I_CONSTRAINED_M switches on the constrained local moments approach.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 59,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_IALGO",
                "description": "IALGO selects the algorithm used to optimize the orbitals. WARNING",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 60,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_IBAND",
                "description": "Controls which bands are used in the calculation of Band decomposed charge\ndensities. Check also NBMOD and EINT.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "1..x_vasp_incar_NBANDS"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 61,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_IBRION",
                "description": "IBRION determines how the ions are updated and moved.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 62,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ICHARG",
                "description": "ICHARG determines how VASP constructs the <i>initial</i> charge density.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 63,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ICHIBARE",
                "description": "determines the order of the finite difference stencil used to calculate the\nmagnetic susceptibility.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 64,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ICORELEVEL",
                "description": "ICORELEVEL controls whether the core energies are explicitely calculated or not\nand how they are calculated.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 65,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_IDIPOL",
                "description": "IDIPOL switches on monopole/dipole and quadrupole corrections to the total energy.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 66,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_IEPSILON",
                "description": "The flag IEPSILON determines along which Cartesien the E field is applied.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 67,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_IGPAR",
                "description": "This tag specifies the socalled parallel or  $G_{||}$ direction in the integration\nover the reciprocal space unit cell needed for LCALCPOL.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 68,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_IMAGES",
                "description": "IMAGES defines the number of interpolated geometries between the initial and final\nstate in Elastic Band calculations",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 69,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_IMIX",
                "description": "IMIX specifies the type of mixing.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 70,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_INCREM",
                "description": "INCREM controls the transformation velocity in the slow-growth approach (in case\nVASP was compiled with -Dtbdyn).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "x"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 71,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_INIMIX",
                "description": "INIMIX determines the functional form of the initial mixing matrix in the Broyden\nscheme (IMIX=4).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 72,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_INIWAV",
                "description": "INIWAV specifies how to set up the initial orbitals in case ISTART=0.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 73,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_IPEAD",
                "description": "IPEAD specifies the order of the finite difference stencil used to compute the\nderivative of the cell-periodic part of the orbitals w.r.t. **k** (LPEAD=.TRUE.),\nand the derivative of the polarization w.r.t. the orbitals,  for (LCALCEPS=.TRUE.,\nor EFIELD_PEAD$\\not=$0).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 74,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ISIF",
                "description": "ISIF determines whether the stress tensor is calculated and which principal\ndegrees-of-freedom are allowed to change in relaxation and molecular dynamics\nruns.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 75,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ISMEAR",
                "description": "ISMEAR determines how the partial occupancies $f_{n\\mathbf{k}}$  are set for each\norbital. SIGMA  determines the width of the smearing in eV.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 76,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ISPIN",
                "description": "ISPIN specifies spin polarization.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 77,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ISTART",
                "description": "ISTART determines whether or not to read the WAVECAR file.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 78,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ISYM",
                "description": "ISYM determines the way VASP treats symmetry.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 79,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_IVDW",
                "description": "This tag controls whether vdW corrections are calculated or not. If they are\ncalculated IVDW controls how they are calculated.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 80,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_IWAVPR",
                "description": "IWAVPR determines how orbitals and/or charge densities are extrapolated from one\nionic configuration to the next configuration.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 81,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_KBLOCK",
                "description": "After KBLOCK*NBLOCK ionic steps the averaged pair correlation function and DOS are\nwritten to the files PCDAT and DOSCAR. More details can be found on the page\ndescribing the tag NBLOCK.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 82,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_KGAMMA",
                "description": "Determines whether the _k_-points (determined by the tag KSPACING if KPOINTS file\nis not present) are center around (KGAMMA=.TRUE.), or shifted away\n(KGAMMA=.FALSE.) from the $\\Gamma$ point.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 83,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_KPAR",
                "description": "KPAR determines the number of **k**-points that are to be treated in parallel\n(available as of VASP.5.3.2).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 84,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_KPOINT_BSE",
                "description": "The flag KPOINT_BSE allows to calculate the dielectric matrix at one of the\nkpoints used to sample the Brillouin zone. NOTE: Either specify one or three\nintegers (FIXME)",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 85,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_KPUSE",
                "description": "Specifies which k-points are used in the evaluation of the partial dos (Band\ndecomposed charge densities).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "1..x_vasp_number_of_k_points"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 86,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_KSPACING",
                "description": "The tag KSPACING determines the number of k-points if the KPOINTS file is not\npresent.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 87,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LADDER",
                "description": "Controls whether the ladder diagrams are included in the BSE calculation.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 88,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LAECHG",
                "description": "When LAECHG=.TRUE. the all-electron charge density will be reconstructed\nexplicitly and written out to file.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 89,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LAMBDA",
                "description": "LAMBDA sets the weight with which the penalty terms of the constrained local\nmoment approach enter into the total energy expression and the Hamiltonian.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 90,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LANGEVIN_GAMMA",
                "description": "LANGEVIN_GAMMA specifies the friction coefficients (in ps$^{-1}$) for atomic\ndegrees-of-freedom when using a Langevin thermostat (in case VASP was compiled\nwith -Dtbdyn).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "number_of_atomic_species"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 91,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LANGEVIN_GAMMA_L",
                "description": "LANGEVIN_GAMMA_L specifies the friction coefficient (in ps$^{-1}$) for lattice\ndegrees-of-freedom in case of Parrinello-Rahman dynamics (in case VASP was\ncompiled with -Dtbdyn).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 92,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LASPH",
                "description": "include non-spherical contributions related to the gradient of the density in the\nPAW spheres.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 93,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LASYNC",
                "description": "This tag controls the overlap in communication.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 94,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LATTICE_CONSTRAINTS",
                "description": "The tag LATTICE_CONSTRAINTS determines whether the lattice dynamics are released\n(LATTICE_CONSTRAINTS=.TRUE.) in the given directions or not.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": [
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 95,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LBERRY",
                "description": "This tag is used in the the evaluation of the Berry phase expression for the\nelectronic polarization of an insulating system.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 96,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LBLUEOUT",
                "description": "for LBLUEOUT=.TRUE., VASP writes output for the free-energy gradient calculation\nto the REPORT-file (in case VASP was compiled with -Dtbdyn).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 97,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LBONE",
                "description": "LBONE adds the small B-component to the chemical shift tensor.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 98,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LCALCEPS",
                "description": "for LCALCEPS=.TRUE. the macroscopic ion-clamped static dielectric tensor, Born\neffective charge tensors, and the ion-clamped piezoelectric tensor of the system\nare determined from the response to finite electric fields.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 99,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LCALCPOL",
                "description": "LCALCPOL=.TRUE. switches on the evaluation of the Berry phase expressions for the\nmacroscopic electronic polarization in accordance with the so-called Modern Theory\nof Polarization.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 100,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LCHARG",
                "description": "LCHARG determines whether the charge densities (files CHGCAR and CHG) are written.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 101,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LCHIMAG",
                "description": "calculate the chemical shifts by means of linear response.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 102,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LCORR",
                "description": "Controls whether Harris corrections are calculated or not.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 103,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LDAU",
                "description": "LDAU=.TRUE. switches on the L(S)DA+U.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 104,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LDAUJ",
                "description": "LDAUJ specifies the strength of the effective on-site exchange interactions.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "number_of_atomic_species"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 105,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LDAUL",
                "description": "LDAUL specifies the _l_-quantum number for which the on-site interaction is added.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "number_of_atomic_species"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 106,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LDAUPRINT",
                "description": "LDAUPRINT controls the verbosity of the L(S)DA+U routines.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 107,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LDAUTYPE",
                "description": "LDAUTYPE specifies which type of L(S)DA+U approach will be used.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 108,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LDAUU",
                "description": "LDAUU specifies the strength of the effective on-site Coulomb interactions.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "number_of_atomic_species"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 109,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LDIAG",
                "description": "This tag determines whether a subspace diagonalization is performed or not within\nthe main algorithm selected by IALGO.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 110,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LDIPOL",
                "description": "LDIPOL switches on corrections to the potential and forces in VASP. Can be applied\nfor charged molecules and  molecules and slabs with a net dipole moment.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 111,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LEFG",
                "description": "The LEFG Computes the Electric Field Gradient at positions of the atomic nuclei.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 112,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LELF",
                "description": "LELF determines whether to create an ELFCAR file or not.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 113,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LEPSILON",
                "description": "LEPSILON=.TRUE. determines the static dielectric matrix, ion-clamped piezoelectric\ntensor and the Born effective charges using density functional perturbation\ntheory.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 114,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LFOCKAEDFT",
                "description": "LFOCKAEDFT forces VASP to use the same charge augmentation for the Hartree and DFT\nexchange correlation part as is used in the Fock exchange and the many body beyond\nDFT methods, such as RPA, MP2 etc.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 115,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LHARTREE",
                "description": "Controls whether the bubble diagrams are included in the BSE calculation.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 116,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LHFCALC",
                "description": "LHFCALC specifies whether Hartree-Fock/DFT hybrid functional type calculations are\nperformed.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 117,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LHYPERFINE",
                "description": "compute the hyperfine tensors at the atomic sites (available as of vasp.5.3.2).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 118,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LKPROJ",
                "description": "switches on the **k**-point projection scheme.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 119,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LLRAUG",
                "description": "LLRAUG calculates the two-center contributions to the chemical shift tensor.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 120,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LMAXFOCK",
                "description": "LMAXFOCK sets the maximum angular momentum quantum number _L_ for the augmentation\nof charge densities in Hartree-Fock type routines.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 121,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LMAXFOCKAE",
                "description": "NMAXFOCKAE and LMAXFOCKAE determine whether the overlap densities in the Fock\nexchange and correlated wave function methods are accurately reconstructed on the\nplane wave grid. This flag generally only applies to the Fock-exchange part as\nwell as many-body post DFT methods (GW, RPA, MP2, etc.).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 122,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LMAXMIX",
                "description": "LMAXMIX controls up to which l-quantum number the one-center PAW charge densities\nare passed through the charge density mixer and written to the CHGCAR file.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 123,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LMAXPAW",
                "description": "LMAXPAW sets the maximum _l_-quantum number for the evaluation of the one-center\nterms on the radial support grids in the PAW method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 124,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LMAXTAU",
                "description": "LMAXTAU is the maximum _l_-quantum number included in the PAW one-center expansion\nof the kinetic energy density.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 125,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LMIXTAU",
                "description": "send the kinetic energy density through the density mixer as well.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 126,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LMONO",
                "description": "LMONO switches on monopole-monopole corrections for the total energy.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 127,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LNABLA",
                "description": "LNABLA=.TRUE. evaluates the transversal expression for the frequency dependent\ndielectric matrix.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 128,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LNMR_SYM_RED",
                "description": "discard symmetry operations that are not consistent with the way _k_-space\nderivative are calculated in the linear response calculations of chemical shifts.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 129,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LNONCOLLINEAR",
                "description": "LNONCOLLINEAR specifies whether fully non-collinear magnetic calculations are\nperformed.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 130,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LOCPROJ",
                "description": "by means of the LOCPROJ-tag one may specify a (set of) local function(s) on which\nthe orbitals are to be projected. These projections are written to the PROJCAR,\nLOCPROJ, and vasprun.xml files.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 131,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LOPTICS",
                "description": "LOPTICS=.TRUE. calculates the frequency dependent dielectric matrix after the\nelectronic ground state has been determined.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 132,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LORBIT",
                "description": "LORBIT, together with an appropriate RWIGS, determines whether the PROCAR or\nPROOUT files are written.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 133,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LORBMOM",
                "description": "LORBMOM specifies whether the orbital moments are written out or not (in a\ncalculation using LSORBIT=.TRUE.).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 134,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LPARD",
                "description": "Determines whether partial (band or k-point decomposed) charge densities are\nevaluated. See also 'Band-decomposed charge densities' .",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 135,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LPEAD",
                "description": "for LPEAD=.TRUE., the derivative of the cell-periodic part of the orbitals w.r.t.\n**k**  is calculated using finite differences.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 136,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LPLANE",
                "description": "LPLANE switches on the plane-wise data distribution in real space.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 137,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LREAL",
                "description": "LREAL determines whether the projection operators are evaluated in real-space or\nin reciprocal space.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 138,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LRPA",
                "description": "LRPA=.TRUE. includes local field effect on the Hartree level only.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 139,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LSCAAWARE",
                "description": "LSCAAWARE controls the distribution of the Hamilton matrix.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 140,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LSCALAPACK",
                "description": "LSCALAPACK controls the use of scaLAPACK.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 141,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LSCALU",
                "description": "LSCALU switches on the parallel LU decomposition (using scaLAPACK) in the\northonormalization of the wave functions.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 142,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LSCSGRAD",
                "description": "LSCSGRAD decides whether to compute gradients in the calculation of the MBD\ndispersion energy.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 143,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LSELFENERGY",
                "description": "This tag controls whether the frequency dependent self-energy is calculated or\nnot.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 144,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LSEPB",
                "description": "Specifies whether the charge density is calculated for every band separately and\nwritten to a file PARCHG.nb.* (LSEPB=.TRUE.) or whether charge density is merged\nfor all selected bands and written to the files PARCHG.ALLB.* or PARCHG.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 145,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LSEPK",
                "description": "Specifies whether the charge density of every k-point is write to the files\nPARCHG.*.nk (LSEPK=.TRUE.) or whether it is merged to a single file. If the merged\nfile is written, then the weight of each k-point is determined from the KPOINTS\nfile, otherwise the k-point weights of one are chosen.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 146,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LSORBIT",
                "description": "LSORBIT specifies whether spin-orbit coupling is taken into account.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 147,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LSPECTRAL",
                "description": "LSPECTRAL specifies to use the spectral method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 148,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LSPECTRALGW",
                "description": "LSPECTRALGW specifies to use the spectral method for calculating the self-energy.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 149,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LSPIRAL",
                "description": "set LSPIRAL=.TRUE. to represent spin spirals by means of a generalized Bloch\ncondition.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 150,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LSUBROT",
                "description": "LSUBROT determines whether an optimal rotation matrix between the occupied and\nunoccupied block is sought, when a direct optimization of the energy functional is\nperformed (i.e. ALGO = All | Damped).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 151,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LTHOMAS",
                "description": "LTHOMAS selects a decomposition of the exchange functional based on Thomas-Fermi\nscreening.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 152,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LUSE_VDW",
                "description": "The flag LUSE_VDW determines whether the VdW-DF functional of Langreth and\nLundqvist et al. is used or not.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 153,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LVDW_EWALD",
                "description": "LVDW_EWALD decides whether lattice summation in $E_{disp}$ expression by means of\nEwald's summation is computed in the DFT-D2 method (available in VASP.5.3.4 and\nlater).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 154,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LVDW_ONECELL",
                "description": "LVDW_ONECELL  can be used to disable vdW interaction with mirror image in X Y Z\ndirection. This is advisable for molecular calculations in the gas phase. In all\nother cases, use the default.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": [
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 155,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LVDWEXPANSION",
                "description": "LVDWEXPANSION  decides whether to write the two- to six- body contributions to MBD\ndispersion energy in the OUTCAR file.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 156,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LVHAR",
                "description": "This tag determines whether the total local potential (saved in the file LOCPOT)\ncontains the entire local potential (ionic + Hartree + exchange correlation) or\nthe electrostatic contributions only (ionic + Hartree).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 157,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LVTOT",
                "description": "LVTOT determines whether the total local potential is written to the LOCPOT file.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 158,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LWANNIER90",
                "description": "LWANNIER90=.TRUE. switches on the interface between VASP and WANNIER90.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 159,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LWANNIER90_RUN",
                "description": "LWANNIER90_RUN executes wannier_setup (see LWANNIER90=.TRUE.) and subsequently\nruns WANNIER90 in library mode (wannier_run).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 160,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LWAVE",
                "description": "LWAVE determines whether the wavefunctions are written to the WAVECAR file at the\nend of a run.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 161,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LWRITE_MMN_AMN",
                "description": "LWRITE_MMN_AMN=.TRUE. tells the VASP2WANNIER90 interface to write the\nwannier90.mmn and wannier90.amn files.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 162,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LWRITE_UNK",
                "description": "LWRITE_UNK decides whether the cell-periodic part of the relevant Bloch functions\nis written.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 163,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LWRITE_WANPROJ",
                "description": "LWRITE_WANPROJ determines whether the Wannier projection fille WANPROJ is written.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 164,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LZEROZ",
                "description": "for LZEROZ=.TRUE. the _z_-component of the spin-spiral magnetisation density will\nbe forced to be and to remain zero.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 165,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_M_CONSTR",
                "description": "M_CONSTR specifies the desired local magnetic moment (size and/or direction) for\nthe constrained local moments approach.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "3*number_of_atoms"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 166,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_MAGMOM",
                "description": "MAGMOM Specifies the initial magnetic moment for each atom, if and only if\nICHARG=2, or if ICHARG=1 and the CHGCAR file contains no magnetisation density",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 167,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_MAXMEM",
                "description": "MAXMEM specifies the maximum memory one MPI rank will attempt to allocate (in\nMByte).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 168,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_MAXMIX",
                "description": "MAXMIX specifies the maximum number steps stored in Broyden mixer IMIX=4).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 169,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_MDALGO",
                "description": "MDALGO specifies the molecular dynamics simulation protocol (in case IBRION=0 and\nVASP was compiled with -Dtbdyn).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 170,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_METAGGA",
                "description": "selects one of various meta-GGA functionals.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 171,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_MINROT",
                "description": "The flag MINROT defines the value for which the dimer is rotated only if the\npredicted rotation angle is greater than MINROT (rad.) in the Improved Dimer\nMethod.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 172,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_MIXPRE",
                "description": "MIXPRE specifies the metric in the Broyden mixing scheme(IMIX=4).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 173,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_AFILT2_MB",
                "description": "This tag sets the filtering parameter for the angular filtering for\nML_FF_IAFILT2_MB in the machine learning force-field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 174,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_CDOUB",
                "description": "This flag controls the necessity of DFT calculations in the machine learning force\nfield method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 175,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_CSF",
                "description": "This flag sets the threshold for the spilling factor in the machine learning force\nfield method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 176,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_CSIG",
                "description": "Parameter used in the automatic determination of threshold for Bayesian error\nestimation in the machine learning force field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 177,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_CSLOPE",
                "description": "Parameter used in the automatic determination of threshold for Bayesian error\nestimation in the machine learning force field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 178,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_CTIFOR",
                "description": "This flag sets the threshold for the Bayesian error estimation on the force in the\nmachine learning force field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 179,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_EATOM",
                "description": "Reference total energies of isolated atoms used in the machine learning force\nfield method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "number_of_atoms"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 180,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_IAFILT2_MB",
                "description": "This tag specifies the type of angular filtering used in the machine learning\nforce field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 181,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_IBROAD1_MB",
                "description": "This tag determines how the atomic distribution is broadened for the radial\ndescriptor within the machine learning force field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 182,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_IBROAD2_MB",
                "description": "This tag determines how the atomic distribution is broadened for the angular\ndescriptor within the machine learning force field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 183,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_ICOUPLE_MB",
                "description": "This tag specifies the atoms where the coupling parameter is introduced to\ncalculate the chemical potential within the machine learning force field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "number_of_atoms"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 184,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_ICUT1_MB",
                "description": "This tag specifies the type of cutoff function used for the radial descriptor in\nthe machine learning force field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 185,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_ICUT2_MB",
                "description": "This tag specifies the type of cutoff function used for the angular descriptor in\nthe machine learning force field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 186,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_IERR",
                "description": "This tag selects the error estimation method used in the machine learning force\nfield method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 187,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_IREG_MB",
                "description": "This tag specifies whether the regularization parameters are kept constant or not\nin the machine learning force field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 188,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_ISAMPLE",
                "description": "This tag controls the sampling in the machine learning force field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 189,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_ISCALE_TOTEN_MB",
                "description": "This tag specifies how to scale the energy data for the many-body term in the\nmachine learning force field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 190,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_ISOAP1_MB",
                "description": "This tag defines the type of the SOAP kernel for the radial descriptor in the\nmachine learning force field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 191,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_ISOAP2_MB",
                "description": "This tag defines the type of the SOAP kernel for the angular descriptor in the\nmachine learning force field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 192,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_ISTART",
                "description": "This tag decides if and how calculations are continued from existing data in\nmachine learning force field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 193,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_IWEIGHT",
                "description": "Flag to control the weighting of training data in the machine learning force field\nmethod.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 194,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_LAFILT2_MB",
                "description": "This tag specifies whether angular filtering is applied or not within the machine\nlearning force field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 195,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_LBASIS_DISCARD",
                "description": "This variable specifies whether the basis sets are thrown away when its number\nexceeds ML_FF_MB_MB in the machine learning force field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 196,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_LCONF_DISCARD",
                "description": "This flag decides whether configurations that do not provide local reference\nconfigurations are discarded or not in the machine learning force field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 197,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_LCOUPLE_MB",
                "description": "This tag specifies whether coupling parameters are used for the calculation of\nchemical potentials is used or not within the machine learning force field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 198,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_LCRITERIA",
                "description": "Decides whether the threshold in the learning decision step for the Bayesian error\nestimation is renewed or not in the machine learning force field methods.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 199,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_LEATOM_MB",
                "description": "This term specifies whether the total atomic energy is written out or not.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 200,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_LHEAT_MB",
                "description": "This flag specifies whether the heat flux is calculated or not in the machine\nlearning force field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 201,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_LMAX2_MB",
                "description": "This tag specifies the maximum angular momentum quantum number of spherical\nharmonics used to expand atomic distributions within the machine learning force\nfield method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 202,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_LMLFF",
                "description": "Main control tag whether to use machine learned force fields or not.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 203,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_LMLMB",
                "description": "This controls whether the many-body interaction term is included in the machine\nlearning force field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 204,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_LNORM1_MB",
                "description": "This tag specifies whether the radial descriptor is normalized (by dividing\nthrough it's norm) or not.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 205,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_LNORM2_MB",
                "description": "This tag specifies whether the angular descriptor is normalized (by dividing\nthrough it's norm) or not.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 206,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_MB_MB",
                "description": "This flag sets the maximum number of basis sets describing the many-body\ninteractions in the machine learning force field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 207,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_MCONF",
                "description": "This flag sets the maximum number of configurations used for training in the\nmachine learning force field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 208,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_MCONF_NEW",
                "description": "This flag sets the number of configurations that are stored temporally as\ncandidates for the training data in the machine learning force field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 209,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_MHIS",
                "description": "This flag sets the number of estimated errors stored in memory to determine the\nthreshold for the Bayesian error in the machine learning force field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 210,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_MRB1_MB",
                "description": "This tag sets the number of radial basis sets used to expand the atomic\ndistribution for the radial descriptor within the machine learning force field\nmethod.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 211,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_MRB2_MB",
                "description": "This tag sets the number of radial basis sets used to expand the atomic\ndistribution for the angular descriptor withtin the machine learning force field\nmethod.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 212,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_MSPL1_MB",
                "description": "This tag sets the number of points for the radial grid used in the spline\ninterpolation for the radial descriptor within the machine learning force field\nmethod.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 213,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_MSPL2_MB",
                "description": "This tag sets the number of points for the radial grid used in the spline\ninterpolation of the angular descriptor within the machine learning force field\nmethod.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 214,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_NATOM_COUPLED_MB",
                "description": "This tag specifies the number of atoms for which a coupling parameter is\nintroduced to calculate the chemical potential within the machine learning force\nfield method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 215,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_NDIM_SCALAPACK",
                "description": "This flag sets the dimension of the ScaLAPACK grids used in the machine learning\nforce field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 216,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_NHYP1_MB",
                "description": "Polynomial power of the radial kernel.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 217,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_NHYP2_MB",
                "description": "Polynomial parameter (power) of the SOAP kernel.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 218,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_NMDINT",
                "description": "Tag to control the minimum interval to get training samples in the machine\nlearning force field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 219,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_NR1_MB",
                "description": "This tag determines the number of grid points used to execute radial integrations\nto compute the radial descriptor within the machine learning force field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 220,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_NR2_MB",
                "description": "This tag determines the number of grid points used to execute radial integrations\nto compute the angular descriptor within the machine learning force field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 221,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_NWRITE",
                "description": "This tag controls part of the output within the machine learning force field\nmethod.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 222,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_RCOUPLE_MB",
                "description": "This tag specifies the value of the coupling parameter for the calculation of the\nchemical potential within the machine learning force field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 223,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_RCUT1_MB",
                "description": "This flag sets the cutoff radius for the radial descriptor in the machine learning\nforce field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 224,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_RCUT2_MB",
                "description": "This flag sets the cutoff radius for the angular descriptor in the machine\nlearning force field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 225,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_SIGV0_MB",
                "description": "This flag sets the initial noise parameter in the machine learning force field\nmethod.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 226,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_SIGW0_MB",
                "description": "This flag sets the initial precision parameter in the machine learning force field\nmethod.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 227,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_SION1_MB",
                "description": "This tag specifies the width of the Gaussian functions used for broadening the\natomic distributions for the radial descriptor within the machine learning force\nfield method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 228,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_SION2_MB",
                "description": "This tag specifies the width of the Gaussian functions used for broadening the\natomic distributions of the angular descriptor within the machine learning force\nfield method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 229,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_W1_MB",
                "description": "This tag defines the weight for the radial descriptor within the machine learning\nforce field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 230,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_W2_MB",
                "description": "This tag defines the weight for the angular descriptor within the machine learning\nforce field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 231,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_WTIFOR",
                "description": "This tag sets the weight for the scaling of the forces in the training data within\nthe machine learning force field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 232,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_WTOTEN",
                "description": "This tag sets the weight for the scaling of the total energy in the training data\nwithin the machine learning force field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 233,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ML_FF_WTSIF",
                "description": "This tag sets the weight for the scaling of the total energy in the training data\nwithin the machine learning force field method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 234,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NBANDS",
                "description": "NBANDS determines the actual number of bands in the calculation.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 235,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NBANDSGW",
                "description": "The flag determines how many QP energies are calculated and updated in GW type\ncalculations.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 236,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NBANDSO",
                "description": "NBANDSO determines how many occupied orbitals are included in the Casida/BSE\ncalculations or time-propagation.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 237,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NBANDSV",
                "description": "NBANDSV determines how many unoccupied orbitals are included in the Casida/BSE\ncalculations or timepropagation.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 238,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NBLK",
                "description": "NBLK determines the blocking factor in many BLAS level 3 routines.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 239,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NBLOCK",
                "description": "After NBLOCK ionic steps the pair correlation function and the DOS are calculated\nand the ionic configuration is written to the XDATCAR-file.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 240,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NBMOD",
                "description": "Controls which bands are used in the calculation of Band decomposed charge\ndensities. Check also IBAND and EINT.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 241,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NBSEEIG",
                "description": "NBSEEIG sets the number number of BSE eigenvectors written to the BSEFATBAND\noutput file.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 242,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NCORE",
                "description": "NCORE determines the number of compute cores that work on an individual orbital\n(available as of VASP.5.2.13).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 243,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NCRPA_BANDS",
                "description": "Controls which bands are excluded in CRPA. Check also NTARGET_STATES.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "1..x_vasp_incar_NBANDS"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 244,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NDAV",
                "description": "NDAV sets the maximum number of iterative steps per bands per RMM-DIIS step\n(IALGO=4X).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 245,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NEDOS",
                "description": "NEDOS specifies number of gridpoints on which the DOS is evaluated",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 246,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NELECT",
                "description": "NELECT sets the number of electrons.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 247,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NELM",
                "description": "NELM sets the maximum number of electronic SC (selfconsistency) steps which may be\nperformed.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 248,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NELMDL",
                "description": "NELMDL specifies the number of non-selfconsistent steps at the beginning.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 249,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NELMIN",
                "description": "NELMIN specifies the minimum number of electronic SCF steps.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 250,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NFREE",
                "description": "depending on IBRION, NFREE specifies the number of remembered steps in the history\nof ionic convergence runs, or the number of ionic displacements in frozen phonon\ncalculations.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 251,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NGX",
                "description": "NGX sets the number of grid points in the FFT-grid along the first lattice vector.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 252,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NGXF",
                "description": "NGXF sets the number of grid points in the fine FFT-grid along the first lattice\nvector.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 253,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NGY",
                "description": "NGY sets the number of grid points in the FFT-grid along the second lattice\nvector.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 254,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NGYF",
                "description": "NGYF sets the number of grid points in the fine FFT-grid along the second lattice\nvector.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 255,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NGYROMAG",
                "description": "NGYROMAG specifies the nuclear gyromagnetic ratios (in MHz, for H<sub>0</sub> = 1\nT) for the atomic types on the POTCAR file.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "number_of_atomic_species"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 256,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NGZ",
                "description": "NGZ sets the number of grid points in the FFT-grid along the third lattice vector.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 257,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NGZF",
                "description": "NGZF sets the number of grid points in the fine  FFT-grid along the first lattice\nvector.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 258,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NKRED",
                "description": "NKRED specifies an uniform reduction factor for the **q**-point grid\nrepresentation of the exact exchange potential and the correlation part in GW\ncalculations.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 259,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NKREDX",
                "description": "NKREDX specifies a reduction factor for the **q**-point grid representation of the\nexact exchange potential along reciprocal space direction **b**<sub>1</sub>.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 260,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NKREDY",
                "description": "NKREDY specifies a reduction factor for the **q**-point grid representation of the\nexact exchange potential along reciprocal space direction **b**<sub>2</sub>.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 261,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NKREDZ",
                "description": "NKREDZ specifies a reduction factor for the **q**-point grid representation of the\nexact exchange potential along reciprocal space direction **b**<sub>3</sub>.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 262,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NLSPLINE",
                "description": "construct the PAW projectors in reciprocal space using spline interpolation so\nthat they are _k_-differentiable.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 263,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NMAXFOCKAE",
                "description": "NMAXFOCKAE and LMAXFOCKAE determine whether the overlap densities in the Fock\nexchange and correlated wave function methods are accurately reconstructed on the\nplane wave grid. This flag generally only applies to the Fock-exchange part as\nwell as many-body post DFT methods (GW, RPA, MP2, etc.).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 264,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NOMEGA",
                "description": "NOMEGA specifies the number of (imaginary) frequency and imaginary time grid\npoints.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 265,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NOMEGAPAR",
                "description": "NOMEGAPAR available as of VASP.6, specifies the number of processor groups sharing\nthe same imaginary frequency grid points..",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 266,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NOMEGAR",
                "description": "NOMEGAR specifies the number of frequency grid points along the real axis.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 267,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NPACO",
                "description": "NPACO sets the number of slots in the pair-correlation function written to PCDAT.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 268,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NPAR",
                "description": "NPAR determines the number of bands that are treated in parallel.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 269,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NPPSTR",
                "description": "NPPSTR specifies the number of k-points on the strings in the IGPAR direction.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 270,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NSIM",
                "description": "NSIM sets the number of bands that are optimized simultaneously by the RMM-DIIS\nalgorithm.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 271,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NSUBSYS",
                "description": "NSUBSYS defines the atomic subsystems in calculations with multiple Anderson\nthermostats (in case VASP was compiled with -Dtbdyn).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 272,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NSW",
                "description": "NSW sets the maximum number of ionic steps.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 273,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NTARGET_STATES",
                "description": "Controls which Wannier states are excluded in CRPA. Check also NCRPA_BANDS.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "x_vasp_incar_NBANDS"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 274,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NTAUPAR",
                "description": "NTAUPAR available as of VASP.6, specifies the number of MPI groups sharing same\nimaginary time grid points. The default value of NTAUPAR is set automatically and\ndepends on MAXMEM, the available memory for each rank on one node.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 275,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NUPDOWN",
                "description": "Sets the difference between the number of electrons in the up and down spin\ncomponents.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 276,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_NWRITE",
                "description": "This flag determines how much will be written to the file OUTCAR ('verbosity\nflag').",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 277,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ODDONLY",
                "description": "ODDONLY=.TRUE. selects a subset of **k**-points for the representation of the Fock\nexchange potential, with _C_<sub>1</sub>=_C_<sub>2</sub>=_C_<sub>3</sub>=1, and\n_n_<sub>1</sub>+_n_<sub>2</sub>+_n_<sub>3</sub> odd.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 278,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ODDONLYGW",
                "description": "ODDONLYGW allows to avoid the inclusion of the  point in the evaluation of\nresponse functions (in GW calculations).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 279,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_OFIELD_A",
                "description": "The flag OFIELD_A sets the desired order parameter *Q*<sub>6</sub> in the\nInterface pinning method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 280,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_OFIELD_KAPPA",
                "description": "The flag OFIELD_KAPPA sets the strength of bias potential in units of 'eV/(unit of\nQ)$^2$' in the Interface pinning method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 281,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_OFIELD_Q6_FAR",
                "description": "The flag OFIELD_Q6_FAR sets the far fading distance (in Angstroms) for the\ncomputation of a continuous to *Q*<sub>6</sub> parameter in the Interface pinning\nmethod.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 282,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_OFIELD_Q6_NEAR",
                "description": "The flag OFIELD_Q6_NEAR sets the near fading distance (in Angstroms) for the\ncomputation of a continuous *Q*<sub>6</sub> parameter in the Interface pinning\nmethod.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 283,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_OMEGAMAX",
                "description": "OMEGAMAX specifies the maximum frequency for dense part of the frequency grid. For\nCRPA calculations, OMEGAMAX is the frequency point of the interaction.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 284,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_OMEGAMIN",
                "description": "minimum frequency in the frequency grid.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 285,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_OMEGATL",
                "description": "OMEGATL specifies the maximum frequency for coarse part of the frequency grid.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 286,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_PARAM1",
                "description": "The flag PARAM1 determines the first parameter used in the enhancement factor of\nthe optPBE-vdW and optB88-vdW functional.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 287,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_PARAM2",
                "description": "The flag PARAM2 determines the second parameter used in the enhancement factor of\nthe optPBE-vdW and optB88-vdW functional.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 288,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_PFLAT",
                "description": "Control flag for the output of the profiling routines.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 289,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_PHON_LBOSE",
                "description": "This flag determines whether random structures in the Monte-Carlo (MC) sampling\nare created according to Bose-Einstein or Maxwell-Boltzmann statistics.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 290,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_PHON_LMC",
                "description": "This flag controls whether electron-phonon interactions from Monte-Carlo sampling\nare calculated or not.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 291,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_PHON_NSTRUCT",
                "description": "This flag sets the number of structures for electron-phonon interactions from\nMonte-Carlo (MC) sampling.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 292,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_PHON_NTLIST",
                "description": "This flag sets the number temperatures for that the electron-phonon interactions\nusing the ZG configuration is evaluated.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 293,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_PHON_TLIST",
                "description": "This flag provides the list of temperatures for that the electron-phonon\ninteractions using the ZG configuration is evaluated.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "x_vasp_incarOut_PHON_NTLIST"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 294,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_PLEVEL",
                "description": "Control flag for the output of the profiling routines.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 295,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_PMASS",
                "description": "PMASS assigns a fictitious mass (in amu) to the lattice degrees-of-freedom in case\nof Parrinello-Rahman dynamics (in case VASP was compiled with -Dtbdyn).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 296,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_POMASS",
                "description": "POMASS describes the mass of each atomic sphere in atomic units.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 297,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_POTIM",
                "description": "POTIM sets the time step (MD) or step width scaling (ionic relaxations).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 298,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_PREC",
                "description": "PREC specifies the precision  mode.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 299,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_PRECFOCK",
                "description": "PRECFOCK controls the FFT grids used in the exact exchange routines (Hartree-Fock\nand hybrid functionals).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 300,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_PROUTINE",
                "description": "Control flag for the output of the profiling routines.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 301,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_PSTRESS",
                "description": "This flag controls whether Pulay corrections are added to the stress tensor or\nnot. In molecular dynamics calculations it controls the pressure. The unit of\nPSTRESS is in kB.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 302,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_PSUBSYS",
                "description": "PSUBSYS sets the collision probabilities for the atoms in each atomic subsystem in\ncalculations with multiple Anderson thermostats (in case VASP was compiled with\n-Dtbdyn). Note: 0 \u2264 PSUBSYS \u2264 1",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "1..3"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 303,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_PTHRESHOLD",
                "description": "Control flag for the output of the profiling routines.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 304,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_QMAXFOCKAE",
                "description": "The parameter QMAXFOCKAE controls at which wave vectors the local augmentation\ncharges are fitted to obtain an accurate charge augmentation on the plane wave\ngrid.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "1..x_vasp_number_of_k_points"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 305,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_QSPIRAL",
                "description": "the QSPIRAL-tag specifies the spin spiral propagation vector.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 306,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_QUAD_EFG",
                "description": "nuclear quadrupole moment (in millbarn) for the atomic types on the POTCAR file.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "number_of_atomic_species"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 307,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_RANDOM_SEED",
                "description": "RANDOM_SEED specifies the seed of the random-number-generator (in case VASP was\ncompiled with -Dtbdyn).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "x"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 308,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ROPT",
                "description": "ROPT determines how precise the projectors are represented in real space.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "number_of_atomic_species"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 309,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_RWIGS",
                "description": "RWIGS specifies the Wigner-Seitz radius for each atom type.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "number_of_atomic_species"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 310,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_SAXIS",
                "description": "SAXIS specifies the quantisation axis for noncollinear spins.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 311,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_SCSRAD",
                "description": "SCSRAD defines the cutoff radius (in Angs ) used in the calculation of\n$\\tau_{ij}$ within the Tkatchenko-Scheffler method. Self-consistent screening in\nTkatchenko-Scheffler method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 312,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_SHAKEMAXITER",
                "description": "SHAKEMAXITER specifies the maximum number of iterations in the SHAKE algorithm (in\ncase VASP was compiled with -Dtbdyn).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 313,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_SHAKETOL",
                "description": "SHAKETOL specifies the tolerance for the SHAKE algorithm (in case VASP was\ncompiled with -Dtbdyn).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 314,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_SIGMA",
                "description": "SIGMA specifies the width of the smearing in eV.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 315,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_SMASS",
                "description": "SMASS controls the velocities during an ab-initio molecular dynamics run.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 316,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_SMEARINGS",
                "description": "SMEARINGS defines the smearing parameters for ISMEAR=-3 in the calculation of the\npartial occupancies.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "x_vasp_incarOut_NSW"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 317,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_SPRING",
                "description": "SPRING gives the <i>spring constant</i> between the images as used in the elastic\nband method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 318,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_STEP_MAX",
                "description": "The flag STEP_MAX defines the trust radius (upper limit) for the optimization step\n(in Angs ) in the Improved Dimer Method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 319,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_STEP_SIZE",
                "description": "The flag STEP_SIZE defines the trial step size for the optimization step (in Angs\n) in the Improved Dimer Method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 320,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_SYMPREC",
                "description": "SYMPREC determines to which accuracy the positions in the POSCAR file must be\nspecified (as of VASP.4.4.4).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 321,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_SYSTEM",
                "description": "The 'title string' defined by SYSTEM is for the user only and should help the user\nto identify what he wants to do with this specific input file.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 322,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_TEBEG",
                "description": "TEBEG sets the start temperature for an ab-initio molecular dynamics run\n(IBRION=0) and other routines (e.g. Electron-phonon interactions from Monte-Carlo\nsampling).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 323,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_TEEND",
                "description": "TEEND sets the final temperature for an ab-initio molecular dynamics run\n(IBRION=0; SMASS=\u22121).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 324,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_TIME",
                "description": "TIME controls the time step for IALGO=5X and for the initial (steepest descent)\nphase of IALGO=4X.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 325,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_TSUBSYS",
                "description": "TSUBSYS sets the temperatures for the atomic subsystems in calculations with\nmultiple Anderson thermostats (in case VASP was compiled with -Dtbdyn).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 326,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_VALUE_MAX",
                "description": "VALUE_MAX sets the upper limits for the monitoring of geometric parameters (in\ncase VASP was compiled with -Dtbdyn).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "x"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 327,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_VALUE_MIN",
                "description": "VALUE_MIN sets the lower limits for the monitoring of geometric parameters (in\ncase VASP was compiled with -Dtbdyn).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "x"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 328,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_VCUTOFF",
                "description": "The parameter VCUTOFF sets the energy cutoff for bare Coulomb matrix elements and\ncontrols the basis set for the bare Coulomb interaction.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 329,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_VDW_A1",
                "description": "VDW_A1 defines the damping function parameter  in the DFT-D3 method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 330,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_VDW_A2",
                "description": "VDW_A2 defines the damping function parameter  in the DFT-D3 method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 331,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_VDW_C6",
                "description": "VDW_C6 defines the  $C_6$ parameters (units: J.nm$^6$mol$^{-1}$ ) for each species\ndefined in the POSCAR file within the DFT-D2 method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "x"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 332,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_VDW_CNRADIUS",
                "description": "VDW_CNRADIUS defines the cutoff radius (in Angs ) for the calculation of the\ncoordination numbers used in the DFT-D3 method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 333,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_VDW_D",
                "description": "VDW_D defines the damping parameter _d_ in the DFT-D2method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 334,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_VDW_R0",
                "description": "VDW_R0 defines the $R_0$ parameters (units: Angs ) for each species defined in the\nPOSCAR file within the DFT-D2 method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "number_of_atomic_species"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 335,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_VDW_RADIUS",
                "description": "VDW_RADIUS defines the cutoff radius (in Angs) for the pair interactions used in\nthe DFT-D2 and DFT-D3 method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 336,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_VDW_S6",
                "description": "VDW_S6 defines the global scaling factor _S_6_ in the DFT-D2 method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 337,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_VDW_S8",
                "description": "VDW_S8 defines the damping function parameter $s_8$ in the DFT-D3 method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 338,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_VDW_SR",
                "description": "VDW_SR defines the damping function parameter $S_R$ (or scaling factor) in the\nDFT-D2 and DFT-D3 method.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 339,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_VOSKOWN",
                "description": "Determines whether Vosko-Wilk-Nusair interpolation is used or not.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 340,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_WC",
                "description": "WC specifies the weight factor for each step in Broyden mixing scheme (IMIX=4).",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 341,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_WEIMIN",
                "description": "WEIMIN specifies the maximum weight for a band to be considered empty.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 342,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ZVAL",
                "description": "ZVAL describes the valency of each atomic sphere.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              }
            ]
          }
        ],
        "category_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Category",
            "m_parent_index": 0,
            "m_parent_sub_section": "category_definitions",
            "name": "x_vasp_incarOut_param",
            "description": "Incar parameters. Value stored in incar."
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 22,
        "m_parent_sub_section": "packages",
        "name": "electronicparsers.vasp.metainfo.vasp_incarsUnknown",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "Method",
            "base_sections": [
              "/packages/8/section_definitions/44"
            ],
            "extends_base_section": true,
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_ENMAX",
                "description": "Maximum cutoff (normally specified only in POTCAR). Value prinded out after\nevaluating the input.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incar_ENMAX",
                "description": "Maximum cutoff (normally specified only in POTCAR). Value prinded out after\nevaluating the input.",
                "categories": [
                  "/packages/20/category_definitions/0"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "x_vasp_incarOut_LCOMPAT",
                "description": "In vasp.4.2 the augmentation charges are forced to be zero at the boundary of the\naugmentation sphere, therefore results are slightly different from vasp.3.2\n(usually differences are smaller than 0.01 meV). The old behavior can be restored\nby setting LCOMPAT = .TRUE. in the INCAR file.",
                "categories": [
                  "/packages/21/category_definitions/0"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              }
            ]
          }
        ],
        "category_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Category",
            "m_parent_index": 0,
            "m_parent_sub_section": "category_definitions",
            "name": "x_vasp_incarUnknown_param",
            "description": "Unknown incar parameters.  By 'unknown' we refer to incar parameters in the OLD\n(predated Sept.2019) 'vasp.nomadmetainfo.json' that are **not** listed in the current\n(Oct.2019) VaspWiki"
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 23,
        "m_parent_sub_section": "packages",
        "name": "nomad.datamodel",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "Environment",
            "description": "Environments allow to manage many metainfo packages and quickly access all definitions. Environments provide a name-table for large-sets of metainfo definitions that span\nmultiple packages. It provides various functions to resolve metainfo definitions by\ntheir names, legacy names, and qualified names.",
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "packages",
                "description": "Packages in this environment.",
                "sub_section": "/packages/29/section_definitions/4",
                "repeats": true
              }
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 24,
        "m_parent_sub_section": "packages",
        "name": "nomad.datamodel.data",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "ArchiveSection",
            "description": "Base class for sections in a NOMAD archive. Provides a framework for custom section normalization via the `normalize` function."
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "EntryData",
            "description": "An empty base section definition. This can be used to add new top-level sections to an entry.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "name": "Author",
            "description": "A person that is author of data in NOMAD or references by NOMAD.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "viewers.name",
                    "viewers.name.text",
                    "viewers.name__suggestion"
                  ]
                },
                "name": "name",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "first_name",
                "description": "The users first name (including all other given names)",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Capitalized"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "last_name",
                "description": "The users last name",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Capitalized"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "email",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "affiliation",
                "description": "The name of the company and institutes the user identifies with",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "affiliation_address",
                "description": "The address of the given affiliation",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 3,
            "m_parent_sub_section": "section_definitions",
            "m_annotations": {
              "pydantic": [
                "PydanticModel"
              ]
            },
            "name": "User",
            "description": "A NOMAD user. Typically a NOMAD user has a NOMAD account. The user related data is managed by\nNOMAD keycloak user-management system. Users are used to denote authors,\nreviewers, and owners of datasets.",
            "base_sections": [
              "/packages/24/section_definitions/2"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "viewers.user_id"
                  ]
                },
                "name": "user_id",
                "description": "The unique, persistent keycloak UUID",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "username",
                "description": "The unique, persistent, user chosen username",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "created",
                "description": "The time the account was created",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Datetime"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "repo_user_id",
                "description": "Optional, legacy user id from the old NOMAD CoE repository.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "is_admin",
                "description": "Bool that indicated, iff the user the use admin user",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "is_oasis_admin",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "default": false
              }
            ]
          }
        ],
        "category_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Category",
            "m_parent_index": 0,
            "m_parent_sub_section": "category_definitions",
            "name": "EntryDataCategory"
          },
          {
            "m_def": "nomad.metainfo.metainfo.Category",
            "m_parent_index": 1,
            "m_parent_sub_section": "category_definitions",
            "name": "ElnIntegrationCategory",
            "label": "Third-party ELN Integration",
            "categories": [
              "/packages/24/category_definitions/0"
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Category",
            "m_parent_index": 2,
            "m_parent_sub_section": "category_definitions",
            "name": "BasicElnCategory",
            "label": "Basic ELN",
            "categories": [
              "/packages/24/category_definitions/0"
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Category",
            "m_parent_index": 3,
            "m_parent_sub_section": "category_definitions",
            "name": "ElnExampleCategory",
            "label": "Example ELNs",
            "categories": [
              "/packages/24/category_definitions/0"
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Category",
            "m_parent_index": 4,
            "m_parent_sub_section": "category_definitions",
            "name": "UseCaseElnCategory",
            "label": "Use-cases",
            "categories": [
              "/packages/24/category_definitions/0"
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Category",
            "m_parent_index": 5,
            "m_parent_sub_section": "category_definitions",
            "name": "WorkflowsElnCategory",
            "label": "Workflows",
            "categories": [
              "/packages/24/category_definitions/0"
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 25,
        "m_parent_sub_section": "packages",
        "name": "nomad.datamodel.metainfo.basesections",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "BaseSection",
            "description": "A generic abstract base section that provides a few commonly used properties. If you inherit from this section, but do not need some quantities, list those\nquantities in the `eln.hide` annotation of your inheriting section definition.\n\nBesides predefining some quantities, these base sections will add some metadata\nto NOMAD's search. A particular example are `tags`, if you define a string\nor enum quantity in your sections named `tags`, its values will be searchable.",
            "links": [
              "http://purl.obolibrary.org/obo/BFO_0000001"
            ],
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity",
                      "label": "name"
                    }
                  ]
                },
                "name": "name",
                "description": "A short human readable and descriptive name.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "DateTimeEditQuantity"
                    }
                  ]
                },
                "name": "datetime",
                "description": "The date and time associated with this section.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Datetime"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity",
                      "label": "ID"
                    }
                  ]
                },
                "name": "lab_id",
                "description": "An ID string that is unique at least for the lab that produced this\ndata.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "RichTextEditQuantity"
                    }
                  ]
                },
                "name": "description",
                "description": "Any information that cannot be captured in the other fields.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "Entity",
            "description": "An object that persists, endures, or continues to exist through time while maintaining its identity.",
            "links": [
              "http://purl.obolibrary.org/obo/BFO_0000002"
            ],
            "base_sections": [
              "/packages/25/section_definitions/0"
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "name": "ActivityStep",
            "description": "Any dependant step of an `Activity`.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity",
                      "label": "step name"
                    }
                  ]
                },
                "name": "name",
                "description": "A short and descriptive name for this step.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "DateTimeEditQuantity",
                      "label": "starting time"
                    }
                  ]
                },
                "name": "start_time",
                "description": "Optionally, the starting time of the activity step. If omitted, it is assumed to\nfollow directly after the previous step.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Datetime"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "RichTextEditQuantity"
                    }
                  ]
                },
                "name": "comment",
                "description": "Any additional information about the step not captured by the other fields.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 3,
            "m_parent_sub_section": "section_definitions",
            "name": "Activity",
            "description": "An action that has a temporal extension and for some time depends on some entity.",
            "links": [
              "http://purl.obolibrary.org/obo/BFO_0000015"
            ],
            "base_sections": [
              "/packages/25/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "DateTimeEditQuantity",
                      "label": "starting Time"
                    }
                  ]
                },
                "name": "datetime",
                "description": "The date and time when this activity was started.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Datetime"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "method",
                "description": "A short consistent handle for the applied method.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "location",
                "description": "location of the experiment.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "steps",
                "description": "An ordered list of all the dependant steps that make up this activity.",
                "sub_section": "/packages/25/section_definitions/2",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 4,
            "m_parent_sub_section": "section_definitions",
            "name": "SectionReference",
            "description": "A section used for referencing another section.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "name",
                "description": "A short descriptive name for the role of this reference.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "ReferenceEditQuantity",
                      "label": "section reference"
                    }
                  ]
                },
                "name": "reference",
                "description": "A reference to a NOMAD archive section.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/24/section_definitions/0"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 5,
            "m_parent_sub_section": "section_definitions",
            "name": "EntityReference",
            "description": "A section used for referencing an Entity.",
            "base_sections": [
              "/packages/25/section_definitions/4"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "ReferenceEditQuantity",
                      "label": "entity reference"
                    }
                  ]
                },
                "name": "reference",
                "description": "A reference to a NOMAD `Entity` entry.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/25/section_definitions/1"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "lab_id",
                "description": "The readable identifier for the entity.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 6,
            "m_parent_sub_section": "section_definitions",
            "name": "ExperimentStep",
            "description": "Any dependant step of an `Experiment`.",
            "base_sections": [
              "/packages/25/section_definitions/2"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "ReferenceEditQuantity"
                    }
                  ]
                },
                "name": "activity",
                "description": "The activity that makes up this step of the experiment.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/25/section_definitions/3"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity",
                      "label": "activity ID"
                    }
                  ]
                },
                "name": "lab_id",
                "description": "The readable identifier for the activity.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 7,
            "m_parent_sub_section": "section_definitions",
            "name": "Experiment",
            "description": "A section for grouping activities together into an experiment.",
            "base_sections": [
              "/packages/25/section_definitions/3"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "steps",
                "description": "An ordered list of all the dependant steps that make up this activity.",
                "sub_section": "/packages/25/section_definitions/6",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 8,
            "m_parent_sub_section": "section_definitions",
            "name": "Collection",
            "description": "A section for grouping entities together into a collection.",
            "base_sections": [
              "/packages/25/section_definitions/1"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "entities",
                "description": "References to the entities that make up the collection.",
                "sub_section": "/packages/25/section_definitions/5",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 9,
            "m_parent_sub_section": "section_definitions",
            "name": "ElementalComposition",
            "description": "A section for describing the elemental composition of a system, i.e. the element and its atomic fraction.",
            "more": {
              "label_quantity": "element"
            },
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "AutocompleteEditQuantity"
                    }
                  ]
                },
                "name": "element",
                "description": "The symbol of the element, e.g. 'Pb'.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "Ac",
                    "Ag",
                    "Al",
                    "Am",
                    "Ar",
                    "As",
                    "At",
                    "Au",
                    "B",
                    "Ba",
                    "Be",
                    "Bh",
                    "Bi",
                    "Bk",
                    "Br",
                    "C",
                    "Ca",
                    "Cd",
                    "Ce",
                    "Cf",
                    "Cl",
                    "Cm",
                    "Cn",
                    "Co",
                    "Cr",
                    "Cs",
                    "Cu",
                    "Db",
                    "Ds",
                    "Dy",
                    "Er",
                    "Es",
                    "Eu",
                    "F",
                    "Fe",
                    "Fl",
                    "Fm",
                    "Fr",
                    "Ga",
                    "Gd",
                    "Ge",
                    "H",
                    "He",
                    "Hf",
                    "Hg",
                    "Ho",
                    "Hs",
                    "I",
                    "In",
                    "Ir",
                    "K",
                    "Kr",
                    "La",
                    "Li",
                    "Lr",
                    "Lu",
                    "Lv",
                    "Mc",
                    "Md",
                    "Mg",
                    "Mn",
                    "Mo",
                    "Mt",
                    "N",
                    "Na",
                    "Nb",
                    "Nd",
                    "Ne",
                    "Nh",
                    "Ni",
                    "No",
                    "Np",
                    "O",
                    "Og",
                    "Os",
                    "P",
                    "Pa",
                    "Pb",
                    "Pd",
                    "Pm",
                    "Po",
                    "Pr",
                    "Pt",
                    "Pu",
                    "Ra",
                    "Rb",
                    "Re",
                    "Rf",
                    "Rg",
                    "Rh",
                    "Rn",
                    "Ru",
                    "S",
                    "Sb",
                    "Sc",
                    "Se",
                    "Sg",
                    "Si",
                    "Sm",
                    "Sn",
                    "Sr",
                    "Ta",
                    "Tb",
                    "Tc",
                    "Te",
                    "Th",
                    "Ti",
                    "Tl",
                    "Tm",
                    "Ts",
                    "U",
                    "V",
                    "W",
                    "Xe",
                    "Y",
                    "Yb",
                    "Zn",
                    "Zr"
                  ]
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "NumberEditQuantity"
                    }
                  ]
                },
                "name": "atomic_fraction",
                "description": "The atomic fraction of the element in the system it is contained within.\nPer definition a positive value less than or equal to 1.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "NumberEditQuantity"
                    }
                  ]
                },
                "name": "mass_fraction",
                "description": "The mass fraction of the element in the system it is contained within.\nPer definition a positive value less than or equal to 1.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 10,
            "m_parent_sub_section": "section_definitions",
            "name": "System",
            "description": "A base section for any system of materials which is investigated or used to construct other systems.",
            "base_sections": [
              "/packages/25/section_definitions/1"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "elemental_composition",
                "description": "A list of all the elements found in the system together and their respective\natomic fraction within the system.",
                "sub_section": "/packages/25/section_definitions/9",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 11,
            "m_parent_sub_section": "section_definitions",
            "name": "Instrument",
            "description": "A base section that can be used for instruments.",
            "base_sections": [
              "/packages/25/section_definitions/1"
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 12,
            "m_parent_sub_section": "section_definitions",
            "name": "InstrumentReference",
            "description": "A section used for referencing an Instrument.",
            "base_sections": [
              "/packages/25/section_definitions/5"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "ReferenceEditQuantity",
                      "label": "instrument reference"
                    }
                  ]
                },
                "name": "reference",
                "description": "A reference to a NOMAD `Instrument` entry.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/25/section_definitions/11"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 13,
            "m_parent_sub_section": "section_definitions",
            "name": "Component",
            "description": "A section for describing a component and its role in a composite system.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity",
                      "label": "component label"
                    }
                  ]
                },
                "name": "name",
                "description": "A short name for the component.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "NumberEditQuantity",
                      "defaultDisplayUnit": "mg"
                    }
                  ]
                },
                "name": "mass",
                "description": "The mass of the component.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "kilogram"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "NumberEditQuantity"
                    }
                  ]
                },
                "name": "mass_fraction",
                "description": "The mass fraction of the component in the composite system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 14,
            "m_parent_sub_section": "section_definitions",
            "name": "SystemComponent",
            "description": "A section for describing a system component and its role in a composite system.",
            "base_sections": [
              "/packages/25/section_definitions/13"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "ReferenceEditQuantity"
                    }
                  ]
                },
                "name": "system",
                "description": "A reference to the component system.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/25/section_definitions/10"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 15,
            "m_parent_sub_section": "section_definitions",
            "name": "PureSubstanceSection",
            "description": "A sub section for describing any elemental, molecular or single phase pure substance.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity",
                      "label": "substance name"
                    }
                  ]
                },
                "name": "name",
                "description": "A short name for the substance.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "iupac_name",
                "description": "IUPAC name.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "molecular_formula",
                "description": "Molecular formula.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "NumberEditQuantity",
                      "defaultDisplayUnit": "Da"
                    }
                  ]
                },
                "name": "molecular_mass",
                "description": "The mass of the most likely isotopic composition for a single molecule,\ncorresponding to the most intense ion/molecule peak in a mass spectrum.",
                "links": [
                  "https://en.wikipedia.org/wiki/Molecular_mass"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "dalton"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "NumberEditQuantity",
                      "defaultDisplayUnit": "g/mol"
                    }
                  ]
                },
                "name": "molar_mass",
                "description": "The molar mass is the sum of all atomic masses of the constituent atoms in a\ncompound, measured in g/mol. In the absence of explicit isotope labelling,\naveraged natural abundance is assumed. If an atom bears an explicit isotope label,\n100%% isotopic purity is assumed at this location.",
                "links": [
                  "https://en.wikipedia.org/wiki/Molar_mass"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "gram / mole"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "NumberEditQuantity",
                      "defaultDisplayUnit": "Da"
                    }
                  ]
                },
                "name": "monoisotopic_mass",
                "description": "The mass of a molecule, calculated using the mass of the most abundant isotope of\neach element.",
                "links": [
                  "https://en.wikipedia.org/wiki/Monoisotopic_mass"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "dalton"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "inchi",
                "description": "Inchi.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "inchi_key",
                "description": "Inchi key.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "smile",
                "description": "Smile.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "canonical_smile",
                "description": "Canonical smile.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "cas_number",
                "description": "CAS number.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 16,
            "m_parent_sub_section": "section_definitions",
            "name": "PureSubstanceComponent",
            "description": "A section for describing a substance component and its role in a composite system.",
            "base_sections": [
              "/packages/25/section_definitions/13"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "substance_name",
                "description": "The name of the substance within the section where this component is contained.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "pure_substance",
                "description": "Section describing the pure substance that is the component.",
                "sub_section": "/packages/25/section_definitions/15"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 17,
            "m_parent_sub_section": "section_definitions",
            "name": "CompositeSystem",
            "description": "A base section for a material systems composed of components. Each component of the composite system is of a (sub)type of `System`.",
            "base_sections": [
              "/packages/25/section_definitions/10"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "components",
                "description": "A list of all the components of the composite system containing a name, reference\nto the system section and mass of that component.",
                "sub_section": "/packages/25/section_definitions/13",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 18,
            "m_parent_sub_section": "section_definitions",
            "name": "CompositeSystemReference",
            "description": "A section used for referencing a CompositeSystem.",
            "base_sections": [
              "/packages/25/section_definitions/5"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "ReferenceEditQuantity",
                      "label": "composite system reference"
                    }
                  ]
                },
                "name": "reference",
                "description": "A reference to a NOMAD `CompositeSystem` entry.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/25/section_definitions/17"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 19,
            "m_parent_sub_section": "section_definitions",
            "name": "ProcessStep",
            "description": "Any dependant step of a `Process`.",
            "base_sections": [
              "/packages/25/section_definitions/2"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "NumberEditQuantity",
                      "defaultDisplayUnit": "second"
                    }
                  ]
                },
                "name": "duration",
                "description": "The duration time of the process step.",
                "type": {
                  "type_kind": "python",
                  "type_data": "float"
                },
                "unit": "second"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 20,
            "m_parent_sub_section": "section_definitions",
            "name": "Process",
            "description": "A planned process which results in physical changes in a specified input material. [ obi : prs obi : mc obi : fg obi : jf obi : bp ]\n\nSynonyms:\n - preparative method\n - sample preparation\n - sample preparative method\n - material transformations",
            "links": [
              "http://purl.obolibrary.org/obo/OBI_0000094"
            ],
            "base_sections": [
              "/packages/25/section_definitions/3"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "DateTimeEditQuantity",
                      "label": "ending time"
                    }
                  ]
                },
                "name": "end_time",
                "description": "The date and time when this process was finished.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Datetime"
                }
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "steps",
                "description": "An ordered list of all the dependant steps that make up this activity.",
                "sub_section": "/packages/25/section_definitions/19",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "instruments",
                "description": "A list of all the instruments and their role in this process.",
                "sub_section": "/packages/25/section_definitions/12",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "samples",
                "description": "The samples as that have undergone the process.",
                "sub_section": "/packages/25/section_definitions/18",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 21,
            "m_parent_sub_section": "section_definitions",
            "name": "ActivityResult",
            "description": "A section for the results of an `Activity`.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity",
                      "label": "name"
                    }
                  ]
                },
                "name": "name",
                "description": "A short and descriptive name for the result.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 22,
            "m_parent_sub_section": "section_definitions",
            "name": "AnalysisResult",
            "description": "A section for the results of an `Analysis` process.",
            "base_sections": [
              "/packages/25/section_definitions/21"
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 23,
            "m_parent_sub_section": "section_definitions",
            "name": "Analysis",
            "description": "A planned process that produces output data from input data. Synonyms:\n - data processing\n - data analysis",
            "links": [
              "http://purl.obolibrary.org/obo/OBI_0200000"
            ],
            "base_sections": [
              "/packages/25/section_definitions/3"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "inputs",
                "description": "The input data of the analysis.",
                "sub_section": "/packages/25/section_definitions/4",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "outputs",
                "description": "The output data of the analysis.",
                "sub_section": "/packages/25/section_definitions/22",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 24,
            "m_parent_sub_section": "section_definitions",
            "name": "SynthesisMethod",
            "description": "A method used to synthesise a sample.",
            "links": [
              "http://purl.obolibrary.org/obo/CHMO_0001301"
            ],
            "base_sections": [
              "/packages/25/section_definitions/20"
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 25,
            "m_parent_sub_section": "section_definitions",
            "name": "MeasurementResult",
            "description": "A section for the results of an `Measurement` process.",
            "base_sections": [
              "/packages/25/section_definitions/21"
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 26,
            "m_parent_sub_section": "section_definitions",
            "name": "Measurement",
            "description": "A planned process with the objective to produce information about the material entity that is the evaluant, by physically examining it or its proxies. [ obi : pppb ]",
            "links": [
              "http://purl.obolibrary.org/obo/OBI_0000070"
            ],
            "base_sections": [
              "/packages/25/section_definitions/3"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "samples",
                "description": "A list of all the samples measured during the measurement.",
                "sub_section": "/packages/25/section_definitions/18",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "instruments",
                "description": "A list of all the instruments and their role in this process.",
                "sub_section": "/packages/25/section_definitions/12",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "results",
                "description": "The result of the measurement.",
                "sub_section": "/packages/25/section_definitions/25",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 27,
            "m_parent_sub_section": "section_definitions",
            "name": "PureSubstance",
            "description": "A base section for any elemental, molecular, or single phase pure substance.",
            "links": [
              "http://purl.obolibrary.org/obo/CHEBI_23367"
            ],
            "base_sections": [
              "/packages/25/section_definitions/10"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity",
                      "label": "substance name"
                    }
                  ]
                },
                "name": "name",
                "description": "The name of the substance entry.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity",
                      "label": "substance ID"
                    }
                  ]
                },
                "name": "lab_id",
                "description": "A human human readable substance ID that is at least unique for the lab.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "RichTextEditQuantity",
                      "label": "detailed substance description"
                    }
                  ]
                },
                "name": "description",
                "description": "A field for adding additional information about the substance that is not captured\nby the other quantities and subsections.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "pure_substance",
                "description": "Section with properties describing the substance.",
                "sub_section": "/packages/25/section_definitions/15"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 28,
            "m_parent_sub_section": "section_definitions",
            "name": "PubChemPureSubstanceSection",
            "label": "PubChem Pure Substance Section",
            "description": "A section for pure substances existing as \"compounds\" in the PubChem database.",
            "base_sections": [
              "/packages/25/section_definitions/15"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "NumberEditQuantity"
                    }
                  ]
                },
                "name": "pub_chem_cid",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "pub_chem_link",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 29,
            "m_parent_sub_section": "section_definitions",
            "name": "CASExperimentalProperty",
            "description": "A section for experimental properties retrieved from the CAS API.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "name",
                "description": "CAS experimental property name.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "property",
                "description": "CAS experimental property.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "sourceNumber",
                "description": "CAS experimental property source.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 30,
            "m_parent_sub_section": "section_definitions",
            "name": "CASPropertyCitation",
            "description": "A section for citations of the experimental properties retrieved from the CAS API.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "docUri",
                "description": "CAS property citation document uri.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "sourceNumber",
                "more": {
                  "decription": "CAS property citation source number."
                },
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "source",
                "description": "CAS property citation source.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 31,
            "m_parent_sub_section": "section_definitions",
            "name": "CASPureSubstanceSection",
            "label": "CAS Pure Substance Section",
            "description": "A base section for any `PureSubstance` with a CAS number.",
            "base_sections": [
              "/packages/25/section_definitions/15"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity",
                      "label": "CAS uri"
                    }
                  ]
                },
                "name": "cas_uri",
                "description": "CAS uri",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity",
                      "label": "CAS number"
                    }
                  ]
                },
                "name": "cas_number",
                "description": "CAS number.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity",
                      "label": "CAS name"
                    }
                  ]
                },
                "name": "cas_name",
                "description": "CAS name.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "FileEditQuantity"
                    }
                  ],
                  "browser": [
                    {
                      "adaptor": "RawFileAdaptor"
                    }
                  ]
                },
                "name": "image",
                "description": "CAS image.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "cas_synonyms",
                "description": "CAS synonyms.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "cas_experimental_properties",
                "sub_section": "/packages/25/section_definitions/29",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "cas_property_citations",
                "sub_section": "/packages/25/section_definitions/30",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 32,
            "m_parent_sub_section": "section_definitions",
            "name": "ReadableIdentifiers",
            "description": "A base section that can be used to generate readable IDs. If the `owner`, `short_name`, `institute`, and `datetime`\nquantities are provided, the lab_id will be automatically created as a combination\nof these four quantities.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "institute",
                "description": "Alias/short name of the home institute of the owner, i.e. *HZB*.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "owner",
                "description": "Alias for the owner of the identified thing. This should be unique within the\ninstitute.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "DateTimeEditQuantity"
                    }
                  ]
                },
                "name": "datetime",
                "description": "A datetime associated with the identified thing. In case of an `Activity`, this\nshould be the starting time and, in case of an `Entity`, the creation time.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Datetime"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "short_name",
                "description": "A short name of the the identified thing (e.g. the identifier scribed on the\nsample, the process number, or machine name), e.g. 4001-8, YAG-2-34.\nThis is to be managed and decided internally by the labs, although we recommend\nto avoid the following characters in it: \"_\", \"/\", \"\\\" and \".\".",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "lab_id",
                "description": "Full readable id. Ideally a human readable id convention, which is simple,\nunderstandable and still have chances of becoming unique.\nIf the `owner`, `short_name`, `\u00ecnstitute`, and `datetime` are provided, this will\nbe formed automatically by joining these components by an underscore (_).\nSpaces in any of the individual components will be replaced with hyphens (-).\nAn example would be hzb_oah_20200602_4001-08.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 33,
            "m_parent_sub_section": "section_definitions",
            "name": "PublicationReference",
            "description": "A base section that can be used for references.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "EnumEditQuantity",
                      "props": {
                        "suggestions": []
                      }
                    }
                  ]
                },
                "name": "DOI_number",
                "description": "The DOI number referring to the published paper or dataset where the data can be found.\nExamples:\n10.1021/jp5126624\n10.1016/j.electacta.2017.06.032",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "publication_authors",
                "description": "The authors of the publication.\nIf several authors, end with et al. If the DOI number is given correctly,\nthis will be extracted automatically from www.crossref.org",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "publication_date",
                "description": "Publication date.\nIf the DOI number is given correctly,\nthis will be extracted automatically from www.crossref.org",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Datetime"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "journal",
                "description": "Name of the journal where the data is published.\nIf the DOI number is given correctly,\nthis will be extracted automatically from www.crossref.org",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "publication_title",
                "description": "Title of the publication.\nIf the DOI number is given correctly,\nthis will be extracted automatically from www.crossref.org",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 34,
            "m_parent_sub_section": "section_definitions",
            "name": "HDF5Normalizer",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 26,
        "m_parent_sub_section": "packages",
        "name": "nomad.datamodel.metainfo.common",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "ProvenanceTracker",
            "description": "\n        Contains semantically labelled provenance information.\n        To be stored under PropertySection.provenance or children.\n        ",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.spectroscopic.spectra.provenance.electronic_structure.label"
                  ]
                },
                "name": "label",
                "description": "Class or type of the provenance.\nCan be used to add further description to the provenance.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "PropertySection",
            "description": "\n        Base class for that can be used to attach a specific methodology to a\n        physical property.\n        ",
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "provenance",
                "sub_section": "/packages/26/section_definitions/0",
                "repeats": false
              }
            ]
          }
        ],
        "category_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Category",
            "m_parent_index": 0,
            "m_parent_sub_section": "category_definitions",
            "name": "FastAccess",
            "description": "Used to mark archive objects that need to be stored in a fast 2nd-tier storage medium,\nbecause they are frequently accessed via archive API.\n\nIf applied to a sub_section, the section will be added to the fast storage. Currently\nthis only works for *root* sections that are sub_sections of `EntryArchive`.\n\nIf applied to a reference types quantity, the referenced section will also be added to\nthe fast storage, regardless if the referenced section has the category or not."
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 27,
        "m_parent_sub_section": "packages",
        "name": "nomad.datamodel.metainfo.workflow",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "Link",
            "description": "Instances of Link are used to represent either a single input or single output of a Task. Using a separate section for links allows to put\nadditional information (e.g. a name) on an input or output.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "name",
                "description": "Name of the link. Will be used as a label for the input or output in workflow representations.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "ReferenceEditQuantity"
                    }
                  ]
                },
                "name": "section",
                "description": "A reference to the section that contains the actual input or output data.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/24/section_definitions/0"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "Task",
            "description": "Instances of Task are used to represent an activity that happened during workflow execution and that was acting on inputs to produce outputs.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "StringEditQuantity"
                    }
                  ]
                },
                "name": "name",
                "description": "A name of the task. Will be used as a label for the input or output in workflow representations.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "inputs",
                "description": "All the links to sections that represent the inputs for this task.",
                "sub_section": "/packages/27/section_definitions/0",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "outputs",
                "description": "All the links to sections that represent the outputs for this task.",
                "sub_section": "/packages/27/section_definitions/0",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "name": "TaskReference",
            "description": "A proxy section that can be used to compose a workflow of tasks that are contained in a different entry or workflow.",
            "base_sections": [
              "/packages/27/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "eln": [
                    {
                      "component": "ReferenceEditQuantity"
                    }
                  ]
                },
                "name": "task",
                "description": "A reference to the task that this section is a proxy for.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/27/section_definitions/1"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 3,
            "m_parent_sub_section": "section_definitions",
            "name": "Workflow",
            "description": "Instances of Workflow are used to represent a set of Tasks that connect input and output data objects to produce a provenance graph for those data.\n\nWorkflows themselves can be tasks. This allows to build nested workflows where some\nof the workflow tasks are workflows themselves.",
            "categories": [
              "/packages/24/category_definitions/5"
            ],
            "base_sections": [
              "/packages/27/section_definitions/1",
              "/packages/24/section_definitions/1"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "tasks",
                "description": "The tasks of this workflow as a repeating sub section. Use TaskReference if tasks cannot be contained.",
                "sub_section": "/packages/27/section_definitions/1",
                "repeats": true
              }
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 28,
        "m_parent_sub_section": "packages",
        "name": "nomad.datamodel.optimade",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "Species",
            "description": "Used to describe the species of the sites of this structure. Species can be pure chemical elements, or virtual-crystal atoms representing a statistical occupation of a\ngiven site by multiple chemical elements.",
            "links": [
              "https://github.com/Materials-Consortia/OPTiMaDe/blob/develop/optimade.md#h.6.2.13"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "optimade": [
                    "Optimade"
                  ]
                },
                "name": "name",
                "description": "The name of the species; the name value MUST be unique in the species list.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "optimade": [
                    "Optimade"
                  ]
                },
                "name": "chemical_symbols",
                "description": "A list of strings of all chemical elements composing this species.\n\nIt MUST be one of the following:\n\n- a valid chemical-element name, or\n- the special value \"X\" to represent a non-chemical element, or\n- the special value \"vacancy\" to represent that this site has a non-zero probability\n\nof having a vacancy (the respective probability is indicated in the concentration\nlist, see below).\n\nIf any one entry in the species list has a chemical_symbols list that is longer than 1\nelement, the correct flag MUST be set in the list structure_features (see\nstructure_features)",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "Ac",
                    "Ag",
                    "Al",
                    "Am",
                    "Ar",
                    "As",
                    "At",
                    "Au",
                    "B",
                    "Ba",
                    "Be",
                    "Bh",
                    "Bi",
                    "Bk",
                    "Br",
                    "C",
                    "Ca",
                    "Cd",
                    "Ce",
                    "Cf",
                    "Cl",
                    "Cm",
                    "Cn",
                    "Co",
                    "Cr",
                    "Cs",
                    "Cu",
                    "Db",
                    "Ds",
                    "Dy",
                    "Er",
                    "Es",
                    "Eu",
                    "F",
                    "Fe",
                    "Fl",
                    "Fm",
                    "Fr",
                    "Ga",
                    "Gd",
                    "Ge",
                    "H",
                    "He",
                    "Hf",
                    "Hg",
                    "Ho",
                    "Hs",
                    "I",
                    "In",
                    "Ir",
                    "K",
                    "Kr",
                    "La",
                    "Li",
                    "Lr",
                    "Lu",
                    "Lv",
                    "Mc",
                    "Md",
                    "Mg",
                    "Mn",
                    "Mo",
                    "Mt",
                    "N",
                    "Na",
                    "Nb",
                    "Nd",
                    "Ne",
                    "Nh",
                    "Ni",
                    "No",
                    "Np",
                    "O",
                    "Og",
                    "Os",
                    "P",
                    "Pa",
                    "Pb",
                    "Pd",
                    "Pm",
                    "Po",
                    "Pr",
                    "Pt",
                    "Pu",
                    "Ra",
                    "Rb",
                    "Re",
                    "Rf",
                    "Rg",
                    "Rh",
                    "Rn",
                    "Ru",
                    "S",
                    "Sb",
                    "Sc",
                    "Se",
                    "Sg",
                    "Si",
                    "Sm",
                    "Sn",
                    "Sr",
                    "Ta",
                    "Tb",
                    "Tc",
                    "Te",
                    "Th",
                    "Ti",
                    "Tl",
                    "Tm",
                    "Ts",
                    "U",
                    "V",
                    "W",
                    "X",
                    "Xe",
                    "Y",
                    "Yb",
                    "Zn",
                    "Zr",
                    "vacancy",
                    "x"
                  ]
                },
                "shape": [
                  "1..*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "optimade": [
                    "Optimade"
                  ]
                },
                "name": "concentration",
                "description": "A list of floats, with same length as chemical_symbols. The numbers represent the\nrelative concentration of the corresponding chemical symbol in this species. The\nnumbers SHOULD sum to one. Cases in which the numbers do not sum to one typically fall\nonly in the following two categories:\n\n- Numerical errors when representing float numbers in fixed precision, e.g. for two\nchemical symbols with concentrations 1/3 and 2/3, the concentration might look\nsomething like [0.33333333333, 0.66666666666]. If the client is aware that the sum\nis not one because of numerical precision, it can renormalize the values so that the\nsum is exactly one.\n- Experimental errors in the data present in the database. In this case, it is the\nresponsibility of the client to decide how to process the data.\n\nNote that concentrations are uncorrelated between different sites (even of the same\nspecies).",
                "type": {
                  "type_kind": "python",
                  "type_data": "float"
                },
                "shape": [
                  "1..*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "optimade": [
                    {
                      "entry": "optional",
                      "sortable": false,
                      "type": "float"
                    }
                  ]
                },
                "name": "mass",
                "type": {
                  "type_kind": "python",
                  "type_data": "float"
                },
                "unit": "unified_atomic_mass_unit"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "optimade": [
                    {
                      "entry": "optional",
                      "sortable": false,
                      "type": "string"
                    }
                  ]
                },
                "name": "original_name",
                "description": "Can be any valid Unicode string, and SHOULD contain (if specified) the name of the\nspecies that is used internally in the source database.\n\nNote: With regards to \"source database\", we refer to the immediate source being\nqueried via the OPTiMaDe API implementation. The main use of this field is for source\ndatabases that use species names, containing characters that are not allowed (see\ndescription of the species_at_sites list).",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "OptimadeEntry",
            "label": "Optimade",
            "links": [
              "https://github.com/Materials-Consortia/OPTiMaDe/blob/develop/optimade.md#h.6.2"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "optimade.elements"
                  ],
                  "optimade": [
                    "Optimade"
                  ]
                },
                "name": "elements",
                "description": "Names of the different elements present in the structure.",
                "links": [
                  "https://github.com/Materials-Consortia/OPTiMaDe/blob/develop/optimade.md#h.6.2.1"
                ],
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "Ac",
                    "Ag",
                    "Al",
                    "Am",
                    "Ar",
                    "As",
                    "At",
                    "Au",
                    "B",
                    "Ba",
                    "Be",
                    "Bh",
                    "Bi",
                    "Bk",
                    "Br",
                    "C",
                    "Ca",
                    "Cd",
                    "Ce",
                    "Cf",
                    "Cl",
                    "Cm",
                    "Cn",
                    "Co",
                    "Cr",
                    "Cs",
                    "Cu",
                    "Db",
                    "Ds",
                    "Dy",
                    "Er",
                    "Es",
                    "Eu",
                    "F",
                    "Fe",
                    "Fl",
                    "Fm",
                    "Fr",
                    "Ga",
                    "Gd",
                    "Ge",
                    "H",
                    "He",
                    "Hf",
                    "Hg",
                    "Ho",
                    "Hs",
                    "I",
                    "In",
                    "Ir",
                    "K",
                    "Kr",
                    "La",
                    "Li",
                    "Lr",
                    "Lu",
                    "Lv",
                    "Mc",
                    "Md",
                    "Mg",
                    "Mn",
                    "Mo",
                    "Mt",
                    "N",
                    "Na",
                    "Nb",
                    "Nd",
                    "Ne",
                    "Nh",
                    "Ni",
                    "No",
                    "Np",
                    "O",
                    "Og",
                    "Os",
                    "P",
                    "Pa",
                    "Pb",
                    "Pd",
                    "Pm",
                    "Po",
                    "Pr",
                    "Pt",
                    "Pu",
                    "Ra",
                    "Rb",
                    "Re",
                    "Rf",
                    "Rg",
                    "Rh",
                    "Rn",
                    "Ru",
                    "S",
                    "Sb",
                    "Sc",
                    "Se",
                    "Sg",
                    "Si",
                    "Sm",
                    "Sn",
                    "Sr",
                    "Ta",
                    "Tb",
                    "Tc",
                    "Te",
                    "Th",
                    "Ti",
                    "Tl",
                    "Tm",
                    "Ts",
                    "U",
                    "V",
                    "W",
                    "X",
                    "Xe",
                    "Y",
                    "Yb",
                    "Zn",
                    "Zr"
                  ]
                },
                "shape": [
                  "1..*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "optimade.nelements"
                  ],
                  "optimade": [
                    "Optimade"
                  ]
                },
                "name": "nelements",
                "description": "Number of different elements in the structure as an integer.",
                "links": [
                  "https://github.com/Materials-Consortia/OPTiMaDe/blob/develop/optimade.md#h.6.2.2"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "default": 0
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "optimade.elements_ratios"
                  ],
                  "optimade": [
                    "Optimade"
                  ]
                },
                "name": "elements_ratios",
                "description": "Relative proportions of different elements in the structure.",
                "links": [
                  "https://github.com/Materials-Consortia/OPTiMaDe/blob/develop/optimade.md#h.6.2.3"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "float"
                },
                "shape": [
                  "nelements"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "optimade.chemical_formula_descriptive"
                  ],
                  "optimade": [
                    "Optimade"
                  ]
                },
                "name": "chemical_formula_descriptive",
                "description": "The chemical formula for a structure as a string in a form chosen by the API\nimplementation.",
                "links": [
                  "https://github.com/Materials-Consortia/OPTiMaDe/blob/develop/optimade.md#h.6.2.4"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "optimade.chemical_formula_reduced"
                  ],
                  "optimade": [
                    "Optimade"
                  ]
                },
                "name": "chemical_formula_reduced",
                "description": "The reduced chemical formula for a structure as a string with element symbols and\ninteger chemical proportion numbers. The proportion number MUST be omitted if it is 1.",
                "links": [
                  "https://github.com/Materials-Consortia/OPTiMaDe/blob/develop/optimade.md#h.6.2.5"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "optimade.chemical_formula_hill"
                  ],
                  "optimade": [
                    "Optimade"
                  ]
                },
                "name": "chemical_formula_hill",
                "description": "The chemical formula for a structure in Hill form with element symbols followed by\ninteger chemical proportion numbers. The proportion number MUST be omitted if it is 1.",
                "links": [
                  "https://github.com/Materials-Consortia/OPTiMaDe/blob/develop/optimade.md#h.6.2.6"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "optimade.chemical_formula_anonymous"
                  ],
                  "optimade": [
                    "Optimade"
                  ]
                },
                "name": "chemical_formula_anonymous",
                "description": "The anonymous formula is the chemical_formula_reduced, but where the elements are\ninstead first ordered by their chemical proportion number, and then, in order left to\nright, replaced by anonymous symbols A, B, C, ..., Z, Aa, Ba, ..., Za, Ab, Bb, ... and\nso on.",
                "links": [
                  "https://github.com/Materials-Consortia/OPTiMaDe/blob/develop/optimade.md#h.6.2.7"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "optimade": [
                    "Optimade"
                  ]
                },
                "name": "dimension_types",
                "description": "List of three integers. For each of the three directions indicated by the three lattice\nvectors (see property lattice_vectors). This list indicates if the direction is\nperiodic (value 1) or non-periodic (value 0). Note: the elements in this list each\nrefer to the direction of the corresponding entry in lattice_vectors and not\nthe Cartesian x, y, z directions.",
                "links": [
                  "https://github.com/Materials-Consortia/OPTiMaDe/blob/develop/optimade.md#h.6.2.8"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": [
                  3
                ],
                "default": [
                  0,
                  0,
                  0
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "optimade.nperiodic_dimensions"
                  ],
                  "optimade": [
                    "Optimade"
                  ]
                },
                "name": "nperiodic_dimensions",
                "description": "An integer specifying the number of periodic dimensions in the structure, equivalent\nto the number of non-zero entries in dimension_types.",
                "links": [
                  "https://github.com/Materials-Consortia/OPTiMaDe/blob/develop/optimade.md#h.6.2.8"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "optimade": [
                    "Optimade"
                  ]
                },
                "name": "lattice_vectors",
                "description": "The three lattice vectors in Cartesian coordinates, in \u00e5ngstr\u00f6m (\u00c5).",
                "links": [
                  "https://github.com/Materials-Consortia/OPTiMaDe/blob/develop/optimade.md#h.6.2.9"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3,
                  3
                ],
                "unit": "angstrom"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "optimade": [
                    "Optimade"
                  ]
                },
                "name": "cartesian_site_positions",
                "description": "Cartesian positions of each site. A site is an atom, a site potentially occupied by\nan atom, or a placeholder for a virtual mixture of atoms (e.g., in a virtual crystal\napproximation).",
                "links": [
                  "https://github.com/Materials-Consortia/OPTiMaDe/blob/develop/optimade.md#h.6.2.10"
                ],
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "nsites",
                  3
                ],
                "unit": "angstrom"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "optimade.nsites"
                  ],
                  "optimade": [
                    "Optimade"
                  ]
                },
                "name": "nsites",
                "description": "An integer specifying the length of the cartesian_site_positions property.",
                "links": [
                  "https://github.com/Materials-Consortia/OPTiMaDe/blob/develop/optimade.md#h.6.2.11"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "default": 0
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "optimade": [
                    "Optimade"
                  ]
                },
                "name": "species_at_sites",
                "description": "Name of the species at each site (where values for sites are specified with the same\norder of the cartesian_site_positions property). The properties of the species are\nfound in the species property.",
                "links": [
                  "https://github.com/Materials-Consortia/OPTiMaDe/blob/develop/optimade.md#h.6.2.12"
                ],
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "nsites"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 13,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "optimade.structure_features"
                  ],
                  "optimade": [
                    "Optimade"
                  ]
                },
                "name": "structure_features",
                "description": "A list of strings that flag which special features are used by the structure.\n\n- disorder: This flag MUST be present if any one entry in the species list has a\nchemical_symbols list that is longer than 1 element.\n- unknown_positions: This flag MUST be present if at least one component of the\ncartesian_site_positions list of lists has value null.\n- assemblies: This flag MUST be present if the assemblies list is present.",
                "links": [
                  "https://github.com/Materials-Consortia/OPTiMaDe/blob/develop/optimade.md#h.6.2.15"
                ],
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "assemblies",
                    "disorder",
                    "unknown_positions"
                  ]
                },
                "shape": [
                  "1..*"
                ],
                "default": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "species",
                "sub_section": "/packages/28/section_definitions/0",
                "repeats": true
              }
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 29,
        "m_parent_sub_section": "packages",
        "name": "nomad.metainfo.metainfo",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "Definition",
            "description": ":class:`Definition` is the common base class for all metainfo definitions. All metainfo `definitions` (sections, quantities, subsections, packages, ...) share\nsome common properties.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "name",
                "description": "Each `definition` has a name. Names have to be valid Python identifier.\nThey can contain letters, numbers and _, but must not start with a number.\nThis also qualifies them as identifier in most storage formats, databases,\nmakes them URL safe, etc.\n\nNames must be unique within the :class:`Package` or :class:`Section` that\nthis definition is part of.\n\nBy convention, we use capitalized `CamelCase` identifier to refer to *sections\ndefinitions* (i.e. section definitions are represented by Python classes),\nlower case `snake_case` identifier for variables that hold *sections*, and for\n*properties* (i.e. fields in a Python class) we typically use lower\ncase `snake_case` identifier. Subsections are often prefixed with ``section_``\nto clearly separate subsections from quantities.\n\nGenerally, you do not have to set this attribute manually, it will be derived\nfrom Python identifiers automatically.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "label",
                "description": "Each `definition` can have an optional label. Label are like names, but\ndo not have to adhere to the Python identifier syntax.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "description",
                "description": "The description can be an arbitrary human-readable text that explains\nwhat a definition is about. For section definitions you do not have to set\nthis manually as it will be derived from the classes doc string. Quantity and\nsubsection descriptions can also be taken from the containing section class'\ndoc-string ``Attributes:`` section.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "links",
                "description": "Each definition can be accompanied by a list of URLs. These should point\nto resources that further explain the definition.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "0..*"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "categories",
                "description": "All metainfo definitions can be put into one or more `categories`.\nCategories allow to organize the definitions themselves. It is different from\nsections, which organize the data (e.g. quantity values) and not the definitions\nof data (e.g. quantities definitions). See :ref:`metainfo-categories` for more\ndetails.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/29/section_definitions/5"
                },
                "shape": [
                  "0..*"
                ],
                "default": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "deprecated",
                "description": "If set this definition is marked deprecated. The value should be a\nstring that describes how to replace the deprecated definition.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "aliases",
                "description": "A list of alternative names. For quantities and subsections these\ncan be used to access the respective property with a different name from\nits containing section. Package aliases will be considered when resolving\nPython references, e.g. in `m_def`.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "0..*"
                ],
                "default": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "variable",
                "description": "A boolean that indicates this property as variable parts in its name.\nIf this is set to true, all capital letters in the name can be\nreplaced with arbitrary strings. However, variable names work similar to\naliases and can be considered on-demand aliases. Other aliases and the\ndefined name will work as well. Thus, variable names are only resolved\nat runtime by the Python interface and are not directly serialized.\nHowever, the variable name is set in a meta attribute `m_source_name`\nautomatically for properties (but not attributes).\nVariable names are only implemented for Quantity, SubSection,\nAttribute.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "default": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "more",
                "description": "A dictionary that contains additional definition properties that are not\npart of the metainfo. Those can be passed as additional kwargs to definition\nconstructors. The values must be JSON serializable.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.JSON"
                },
                "default": {}
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "all_attributes",
                "description": "A virtual convenient property that provides all attributes as a dictionary\nfrom attribute name to attribute. This includes meta attributes (starting with m_)\nthat are defined for all properties of the same kind (sub_section or quantity).",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Any"
                },
                "cached": true,
                "virtual": true
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "attributes",
                "description": "The attributes that can further qualify property values.",
                "sub_section": "/packages/29/section_definitions/1",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "Attribute",
            "description": "Attributes can be used to qualify all properties (subsections and quantities) with simple primitive values.",
            "base_sections": [
              "/packages/29/section_definitions/0"
            ],
            "constraints": [
              "is_primitive"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "The type of the attribute. Needs to be a primitive type that is a subclass of `Datatype`.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.metainfo.QuantityType"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "shape",
                "description": "The shape of the attribute. Need to be a list, similar to the shape of a quantity.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Dimension"
                },
                "shape": [
                  "0..*"
                ],
                "default": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "name": "Property",
            "description": "A common base-class for section properties: subsections and quantities.",
            "base_sections": [
              "/packages/29/section_definitions/0"
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 3,
            "m_parent_sub_section": "section_definitions",
            "name": "Section",
            "description": "Instances of the class :class:`Section` are created by writing Python classes that extend :class:`MSection` like this:\n\n.. code-block:: python\n\n    class SectionName(BaseSection):\n        ''' Section description '''\n        m_def = Section(**section_attributes)\n\n        quantity_name = Quantity(**quantity_attributes)\n        sub_section_name = SubSection(**sub_section_attributes)\n\nWe call such classes *section classes*. They are not the *section definition*, but just\nrepresentation of it in Python syntax. The *section definition* (in instance of :class:`Section`)\nwill be created for each of these classes and stored in the ``m_def`` property. See\n:ref:`metainfo-reflection` for more details.\n\nMost of the attributes for a :class:`Section` instance will be set automatically from\nthe section class:",
            "base_sections": [
              "/packages/29/section_definitions/0"
            ],
            "constraints": [
              "resolved_base_sections",
              "unique_names"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "base_sections",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/29/section_definitions/3"
                },
                "shape": [
                  "0..*"
                ],
                "default": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "extending_sections",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/29/section_definitions/3"
                },
                "shape": [
                  "0..*"
                ],
                "default": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "extends_base_section",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "default": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "inheriting_sections",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/29/section_definitions/3"
                },
                "shape": [
                  "0..*"
                ],
                "default": [],
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "constraints",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "0..*"
                ],
                "default": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "event_handlers",
                "description": "Event handler are functions that get called when the section data is changed.\nThere are two types of events: ``set`` and ``add_sub_section``. The handler type\nis determined by the handler (i.e. function) name: ``on_set`` and ``on_add_sub_section``.\nThe handler arguments correspond to :py:meth:`MSection.m_set` (section, quantity_def, value) and\n:py:meth:`MSection.m_add_sub_section` (section, sub_section_def, sub_section).\nHandler are called after the respective action was performed. This quantity is\nautomatically populated with handler from the section classes methods. If there\nis a method ``on_set`` or ``on_add_sub_section``, it will be added as handler.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Callable"
                },
                "shape": [
                  "0..*"
                ],
                "default": [],
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "inherited_sections",
                "description": "A helper attribute that gives direct and indirect base sections and extending\nsections including this section. These are all sections that this sections\ngets its properties from.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Any"
                },
                "cached": true,
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "all_base_sections",
                "description": "A helper attribute that gives direct and indirect base sections.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Any"
                },
                "cached": false,
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "all_inheriting_sections",
                "description": "A helper attribute that gives direct and indirect inheriting sections.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Any"
                },
                "cached": true,
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "all_properties",
                "description": "A helper attribute that gives all properties (subsection and quantity) definitions\nincluding inherited properties and properties from extending sections as a\ndictionary with names and definitions.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Any"
                },
                "cached": true,
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "all_quantities",
                "description": "A helper attribute that gives all quantity definition including inherited ones\nand ones from extending sections as a dictionary that maps names (strings)\nto :class:`Quantity`.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Any"
                },
                "cached": true,
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "name": "all_sub_sections",
                "description": "A helper attribute that gives all subsection definition including inherited ones\nand ones from extending sections as a dictionary that maps names (strings)\nto :class:`SubSection`.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Any"
                },
                "cached": true,
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "name": "all_sub_sections_by_section",
                "description": "A helper attribute that gives all subsection definition including inherited ones\nand ones from extending sections as a dictionary that maps section classes\n(i.e. Python class objects) to lists of :class:`SubSection`.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Any"
                },
                "cached": true,
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 13,
                "m_parent_sub_section": "quantities",
                "name": "all_aliases",
                "description": "A helper attribute that gives all aliases for all properties including\ninherited properties and properties form extending sections as a\ndictionary with aliases and the definitions.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Any"
                },
                "cached": true,
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 14,
                "m_parent_sub_section": "quantities",
                "name": "all_inner_section_definitions",
                "description": "A helper attribute that gives all inner_section_definitions including\ntheir aliases by name.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Any"
                },
                "cached": true,
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 15,
                "m_parent_sub_section": "quantities",
                "name": "has_variable_names",
                "description": null,
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Any"
                },
                "cached": true,
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 16,
                "m_parent_sub_section": "quantities",
                "name": "path",
                "description": "Shortest path from a root section to this section. This is not the path\nin the metainfo schema (`m_path`) but an archive path in potential data.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Any"
                },
                "cached": true,
                "virtual": true
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "quantities",
                "sub_section": "/packages/29/section_definitions/6",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "sub_sections",
                "sub_section": "/packages/29/section_definitions/7",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "inner_section_definitions",
                "aliases": [
                  "inner_section_defs",
                  "section_defs",
                  "inner_sections",
                  "sections"
                ],
                "sub_section": "/packages/29/section_definitions/3",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 4,
            "m_parent_sub_section": "section_definitions",
            "name": "Package",
            "description": "Packages organize metainfo definitions alongside Python modules Each Python module with metainfo Definition (explicitly or implicitly) has a member\n``m_package`` with an instance of this class. Definitions (categories, sections) in\nPython modules are automatically added to the module's :class:`Package`.\nPackages are not nested and rather have the fully qualified Python module name as\nname.\n\nThis allows to inspect all definitions in a Python module and automatically puts\nmodule name and docstring as :class:`Package` name and description.\n\nBesides the regular :class:`Definition` attributes, packages can have the following\nattributes:",
            "base_sections": [
              "/packages/29/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "all_definitions",
                "description": "A helper attribute that provides all section and category definitions\nby name and aliases.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Any"
                },
                "cached": true,
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "dependencies",
                "description": "All packages which have definitions that definitions from this package need. Being\n'needed' includes categories, base sections, and referenced definitions.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Any"
                },
                "cached": true,
                "virtual": true
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "section_definitions",
                "description": "All `section definitions` in this package as :class:`Section`\nobjects.",
                "aliases": [
                  "section_defs",
                  "sections"
                ],
                "sub_section": "/packages/29/section_definitions/3",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "category_definitions",
                "description": "All `category definitions` in this package as :class:`Category`\nobjects.",
                "aliases": [
                  "category_defs"
                ],
                "sub_section": "/packages/29/section_definitions/5",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 5,
            "m_parent_sub_section": "section_definitions",
            "name": "Category",
            "description": "Categories allow to organize metainfo definitions (not metainfo data like sections do) Each definition, including categories themselves, can belong to a set of categories.\nCategories therefore form a hierarchy of concepts that definitions can belong to, i.e.\nthey form a `is a` relationship.",
            "base_sections": [
              "/packages/29/section_definitions/0"
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 6,
            "m_parent_sub_section": "section_definitions",
            "name": "Quantity",
            "description": "To define quantities, instantiate :class:`Quantity` as a class attribute values in a `section classes`. The name of a quantity is automatically taken from its `section class`\nattribute. You can provide all other attributes to the constructor with keyword arguments\n\nSee :ref:`metainfo-sections` to learn about `section classes`.\nIn Python terms, ``Quantity`` is a descriptor. Descriptors define how to get and\nset attributes in a Python object. This allows us to use sections like regular\nPython objects and quantity like regular Python attributes.\n\nEach quantity must define a basic data type and a shape. The values of a quantity must\nfulfil the given type. The default shape is a single value. Quantities can also have\nphysical units. Units are applied to all values.",
            "base_sections": [
              "/packages/29/section_definitions/2"
            ],
            "constraints": [
              "correct_dimensionality",
              "dimensions",
              "has_type"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.metainfo.QuantityType"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "shape",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Dimension"
                },
                "shape": [
                  "0..*"
                ],
                "default": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "unit",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Unit"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "dimensionality",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "default",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Any"
                },
                "default": null
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "derived",
                "description": "A Python callable that takes the containing section as input and outputs the\nvalue for this quantity. This quantity cannot be set directly, its value\nis only derived by the given callable. The callable is executed when this\nquantity is get. Derived quantities are always virtual.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.metainfo.data_type.Callable"
                },
                "default": null,
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "cached",
                "description": "A bool indicating that derived values should be cached unless the underlying\nsection has changed.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "default": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "virtual",
                "description": "A boolean that determines if this quantity is virtual. Virtual quantities can\nbe got/set like regular quantities, but their values are not (de-)serialized,\nhence never permanently stored.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "default": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "is_scalar",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "use_full_storage",
                "description": "A derived boolean that indicates if this quantity should be stored in full storage mode.\nIt will be set to True if `flexible_unit` is True, or `variable` is True, or it has attributes.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "flexible_unit",
                "description": "A boolean to indicate if this quantity may have a unit that is not the default unit.\nIn this case, the quantity will be stored in full storage mode as a `MQuantity`.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "default": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 7,
            "m_parent_sub_section": "section_definitions",
            "name": "SubSection",
            "description": "Like quantities, subsections are defined in a `section class` as attributes of this class. Unlike quantities, each subsection definition becomes a property of\nthe corresponding `section definition` (parent). A subsection definition references\nanother `section definition` as the subsection (child). As a consequence, parent\n`section instances` can contain child `section instances` as subsections.\n\nContrary to the old NOMAD metainfo, we distinguish between subsection the section\nand subsection the property. This allows to use on child `section definition` as\nsubsection of many parent `section definitions`.",
            "base_sections": [
              "/packages/29/section_definitions/2"
            ],
            "constraints": [
              "has_sub_section"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "sub_section",
                "description": "A :class:`Section` or Python class object for a `section class`. This\nwill be the child `section definition`. The defining section the child\n`section definition`.",
                "aliases": [
                  "section_definition",
                  "section_def",
                  "section"
                ],
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/29/section_definitions/3"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "repeats",
                "description": "A boolean that determines whether this subsection can appear multiple\ntimes in the parent section.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "default": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "key_quantity",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "default": null
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 8,
            "m_parent_sub_section": "section_definitions",
            "name": "BandGapDeprecated",
            "base_sections": [
              "/packages/10/section_definitions/12"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "label",
                "description": "Label to identify the band gap data, e.g. the method employed.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.electronic.band_structure_electronic.band_gap.index"
                  ]
                },
                "name": "index",
                "description": "The spin channel index.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.electronic.band_structure_electronic.band_gap.value"
                  ]
                },
                "name": "value",
                "description": "The actual value of the band gap. Value of zero indicates a vanishing band gap and\nis distinct from sources lacking any band gap measurement or calculation.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.electronic.band_structure_electronic.band_gap.type"
                  ]
                },
                "name": "type",
                "description": "Band gap type.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "direct",
                    "indirect"
                  ]
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 9,
            "m_parent_sub_section": "section_definitions",
            "name": "BandGap",
            "base_sections": [
              "/packages/10/section_definitions/19"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "label",
                "description": "Label to identify the band gap data, e.g. the method employed.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.electronic.band_structure_electronic.band_gap.index"
                  ]
                },
                "name": "index",
                "description": "The spin channel index.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.electronic.band_structure_electronic.band_gap.value"
                  ]
                },
                "name": "value",
                "description": "The actual value of the band gap. Value of zero indicates a vanishing band gap and\nis distinct from sources lacking any band gap measurement or calculation.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.electronic.band_structure_electronic.band_gap.type"
                  ]
                },
                "name": "type",
                "description": "Band gap type.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "direct",
                    "indirect"
                  ]
                },
                "shape": []
              }
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 30,
        "m_parent_sub_section": "packages",
        "name": "simulationworkflowschema.chemical_reaction",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "ChemicalReactionMethod",
            "base_sections": [
              "/packages/12/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "reaction_type",
                "description": "The type of the chemical reaction.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "surface_adsorption"
                  ]
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "ChemicalReactionResults",
            "base_sections": [
              "/packages/12/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "reaction_energy",
                "description": "Calculated value of the reaction energy, E_reaction= E_products - E_reactants",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "activation_energy",
                "description": "Calculated value of the activation energy, E_activation = E_transitions - E_reactants",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "unit": "joule"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "name": "ChemicalReaction",
            "base_sections": [
              "/packages/12/section_definitions/2"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "method",
                "sub_section": "/packages/30/section_definitions/0"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "results",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/30/section_definitions/1"
              }
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 31,
        "m_parent_sub_section": "packages",
        "name": "simulationworkflowschema.dmft",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "DFTPlusTBPlusDMFTResults",
            "description": "Groups DFT, TB and DMFT outputs: band gaps (all), DOS (DFT, TB), band structures (DFT, TB), Greens functions (DMFT). The ResultsNormalizer takes care\nof adding a label 'DFT', 'PROJECTION, or 'DMFT' in the method `get_dmft_workflow_properties`.",
            "base_sections": [
              "/packages/12/section_definitions/1"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "dft_outputs",
                "sub_section": "/packages/12/section_definitions/7",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "tb_outputs",
                "sub_section": "/packages/12/section_definitions/7",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "dmft_outputs",
                "sub_section": "/packages/12/section_definitions/7",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "DFTPlusTBPlusDMFTMethod",
            "description": "Specifies all DFT, TB and DMFT input methodologies: starting XC functional, electrons representation (basis set), TB method reference, DMFT method reference.",
            "base_sections": [
              "/packages/12/section_definitions/6"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "tb_method_ref",
                "description": "TB methodology reference.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/8/section_definitions/30"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "dmft_method_ref",
                "description": "DMFT methodology reference.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/8/section_definitions/38"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "name": "DFTPlusTBPlusDMFT",
            "description": "The DMFT workflow is generated in an extra EntryArchive IF both the TB SinglePoint and the DMFT SinglePoint EntryArchives are present in the upload.",
            "base_sections": [
              "/packages/12/section_definitions/5"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "method",
                "sub_section": "/packages/31/section_definitions/1"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "results",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/31/section_definitions/0"
              }
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 32,
        "m_parent_sub_section": "packages",
        "name": "simulationworkflowschema.elastic",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "StrainDiagrams",
            "description": "Section containing the information regarding the elastic strains.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "Kind of strain diagram. Possible values are: energy; cross-validation (cross-\nvalidation error); d2E (second derivative of the energy wrt the strain)",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_eta",
                "description": "Number of strain values used in the strain diagram",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_deformations",
                "description": "Number of deformations.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Values of the energy(units:J)/d2E(units:Pa)/cross-validation (depending on the\nvalue of strain_diagram_type)",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_deformations",
                  "n_eta"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "eta",
                "description": "eta values used the strain diagrams",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_deformations",
                  "n_eta"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "stress_voigt_component",
                "description": "Voigt component corresponding to the strain diagram",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "polynomial_fit_order",
                "description": "Order of the polynomial fit",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "ElasticMethod",
            "base_sections": [
              "/packages/12/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "energy_stress_calculator",
                "description": "Name of program used to calculate energy or stress.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "calculation_method",
                "description": "Method used to calculate elastic constants, can either be energy or stress.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "elastic_constants_order",
                "description": "Order of the calculated elastic constants.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "fitting_error_maximum",
                "description": "Maximum error in polynomial fit.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "strain_maximum",
                "description": "Maximum strain applied to crystal.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "name": "ElasticResults",
            "base_sections": [
              "/packages/42/section_definitions/2"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_deformations",
                "description": "Number of deformed structures used to calculate the elastic constants. This is\ndetermined by the symmetry of the crystal.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "deformation_types",
                "description": "deformation types",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "str_"
                },
                "shape": [
                  "n_deformations",
                  6
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_strains",
                "description": "number of equally spaced strains applied to each deformed structure, which are\ngenerated between the maximum negative strain and the maximum positive one.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "is_mechanically_stable",
                "description": "Indicates if structure is mechanically stable from the calculated values of the\nelastic constants.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "elastic_constants_notation_matrix_second_order",
                "description": "Symmetry of the second-order elastic constant matrix in Voigt notation",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "str_"
                },
                "shape": [
                  6,
                  6
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "elastic_constants_matrix_second_order",
                "description": "2nd order elastic constant (stiffness) matrix in pascals",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  6,
                  6
                ],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "elastic_constants_matrix_third_order",
                "description": "3rd order elastic constant (stiffness) matrix in pascals",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  6,
                  6,
                  6
                ],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "compliance_matrix_second_order",
                "description": "Elastic compliance matrix in 1/GPa",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  6,
                  6
                ],
                "unit": "1 / pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "elastic_constants_gradient_matrix_second_order",
                "description": "gradient of the 2nd order elastic constant (stiffness) matrix in newton",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  18,
                  18
                ],
                "unit": "newton"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "bulk_modulus_voigt",
                "description": "Voigt bulk modulus",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "shear_modulus_voigt",
                "description": "Voigt shear modulus",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "name": "bulk_modulus_reuss",
                "description": "Reuss bulk modulus",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "name": "shear_modulus_reuss",
                "description": "Reuss shear modulus",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 13,
                "m_parent_sub_section": "quantities",
                "name": "bulk_modulus_hill",
                "description": "Hill bulk modulus",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 14,
                "m_parent_sub_section": "quantities",
                "name": "shear_modulus_hill",
                "description": "Hill shear modulus",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 15,
                "m_parent_sub_section": "quantities",
                "name": "young_modulus_voigt",
                "description": "Voigt Young modulus",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 16,
                "m_parent_sub_section": "quantities",
                "name": "poisson_ratio_voigt",
                "description": "Voigt Poisson ratio",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 17,
                "m_parent_sub_section": "quantities",
                "name": "young_modulus_reuss",
                "description": "Reuss Young modulus",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 18,
                "m_parent_sub_section": "quantities",
                "name": "poisson_ratio_reuss",
                "description": "Reuss Poisson ratio",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 19,
                "m_parent_sub_section": "quantities",
                "name": "young_modulus_hill",
                "description": "Hill Young modulus",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 20,
                "m_parent_sub_section": "quantities",
                "name": "poisson_ratio_hill",
                "description": "Hill Poisson ratio",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 21,
                "m_parent_sub_section": "quantities",
                "name": "elastic_anisotropy",
                "description": "Elastic anisotropy",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 22,
                "m_parent_sub_section": "quantities",
                "name": "pugh_ratio_hill",
                "description": "Pugh ratio defined as the ratio between the shear modulus and bulk modulus",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 23,
                "m_parent_sub_section": "quantities",
                "name": "debye_temperature",
                "description": "Debye temperature",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 24,
                "m_parent_sub_section": "quantities",
                "name": "speed_sound_transverse",
                "description": "Speed of sound along the transverse direction",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter / second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 25,
                "m_parent_sub_section": "quantities",
                "name": "speed_sound_longitudinal",
                "description": "Speed of sound along the longitudinal direction",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter / second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 26,
                "m_parent_sub_section": "quantities",
                "name": "speed_sound_average",
                "description": "Average speed of sound",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter / second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 27,
                "m_parent_sub_section": "quantities",
                "name": "eigenvalues_elastic",
                "description": "Eigenvalues of the stiffness matrix",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  6
                ],
                "unit": "pascal"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "strain_diagrams",
                "sub_section": "/packages/32/section_definitions/0",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 3,
            "m_parent_sub_section": "section_definitions",
            "name": "Elastic",
            "base_sections": [
              "/packages/12/section_definitions/3"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "method",
                "sub_section": "/packages/32/section_definitions/1"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "results",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/32/section_definitions/2"
              }
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 33,
        "m_parent_sub_section": "packages",
        "name": "simulationworkflowschema.equation_of_state",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "EquationOfStateMethod",
            "base_sections": [
              "/packages/12/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "energy_calculator",
                "description": "Name of program used to calculate energy.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "EOSFit",
            "description": "Section containing results of an equation of state fit.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "function_name",
                "description": "Specifies the function used to perform the fitting of the volume-energy data. Value\ncan be one of birch_euler, birch_lagrange, birch_murnaghan, mie_gruneisen,\nmurnaghan, pack_evans_james, poirier_tarantola, tait, vinet.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "fitted_energies",
                "description": "Array of the fitted energies corresponding to each volume.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_points"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "bulk_modulus",
                "description": "Calculated value of the bulk modulus by fitting the volume-energy data.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "bulk_modulus_derivative",
                "description": "Calculated value of the pressure derivative of the bulk modulus.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "equilibrium_volume",
                "description": "Calculated value of the equilibrium volume by fitting the volume-energy data.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter ** 3"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "equilibrium_energy",
                "description": "Calculated value of the equilibrium energy by fitting the volume-energy data.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "rms_error",
                "description": "Root-mean squared value of the error in the fitting.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "name": "EquationOfStateResults",
            "base_sections": [
              "/packages/12/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_points",
                "description": "Number of volume-energy pairs in data.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "volumes",
                "description": "Array of volumes per atom for which the energies are evaluated.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_points"
                ],
                "unit": "meter ** 3"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "energies",
                "description": "Array of energies corresponding to each volume.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_points"
                ],
                "unit": "joule"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "eos_fit",
                "sub_section": "/packages/33/section_definitions/1",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 3,
            "m_parent_sub_section": "section_definitions",
            "name": "EquationOfState",
            "base_sections": [
              "/packages/12/section_definitions/3"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "method",
                "sub_section": "/packages/33/section_definitions/0"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "results",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/33/section_definitions/2"
              }
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 34,
        "m_parent_sub_section": "packages",
        "name": "simulationworkflowschema.geometry_optimization",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "GeometryOptimizationMethod",
            "base_sections": [
              "/packages/12/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "The type of geometry optimization, which denotes what is being optimized.\n\nAllowed values are:\n\n| Type                   | Description                               |\n\n| ---------------------- | ----------------------------------------- |\n\n| `\"static\"`             | no optimization |\n\n| `\"atomic\"`             | the atomic coordinates alone are updated |\n\n| `\"cell_volume\"`         | `\"atomic\"` + cell lattice paramters are updated isotropically |\n\n| `\"cell_shape\"`        | `\"cell_volume\"` but without the isotropic constraint: all cell parameters are updated |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "atomic",
                    "cell_shape",
                    "cell_volume",
                    "static"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "method",
                "description": "The method used for geometry optimization. Some known possible values are:\n`\"steepest_descent\"`, `\"conjugant_gradient\"`, `\"low_memory_broyden_fletcher_goldfarb_shanno\"`.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.geometry_optimization.convergence_tolerance_energy_difference"
                  ]
                },
                "name": "convergence_tolerance_energy_difference",
                "description": "The input energy difference tolerance criterion.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.geometry_optimization.convergence_tolerance_force_maximum"
                  ]
                },
                "name": "convergence_tolerance_force_maximum",
                "description": "The input maximum net force tolerance criterion.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "newton"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "convergence_tolerance_stress_maximum",
                "description": "The input maximum stress tolerance criterion.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "convergence_tolerance_displacement_maximum",
                "description": "The input maximum displacement tolerance criterion.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "optimization_steps_maximum",
                "description": "Maximum number of optimization steps.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "save_frequency",
                "description": "The number of optimization steps between saving the calculation.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "GeometryOptimizationResults",
            "base_sections": [
              "/packages/12/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "optimization_steps",
                "description": "Number of saved optimization steps.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "energies",
                "description": "List of energy_total values gathered from the single configuration\ncalculations that are a part of the optimization trajectory.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "optimization_steps"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "steps",
                "description": "The step index corresponding to each saved configuration.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "optimization_steps"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.geometry_optimization.final_energy_difference"
                  ]
                },
                "name": "final_energy_difference",
                "description": "The difference in the energy_total between the last two steps during\noptimization.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.geometry_optimization.final_force_maximum"
                  ]
                },
                "name": "final_force_maximum",
                "description": "The maximum net force in the last optimization step.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "newton"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.geometry_optimization.final_displacement_maximum"
                  ]
                },
                "name": "final_displacement_maximum",
                "description": "The maximum displacement in the last optimization step with respect to previous.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "is_converged_geometry",
                "description": "Indicates if the geometry convergence criteria were fulfilled.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "name": "GeometryOptimization",
            "base_sections": [
              "/packages/12/section_definitions/4"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "method",
                "sub_section": "/packages/34/section_definitions/0"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "results",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/34/section_definitions/1"
              }
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 35,
        "m_parent_sub_section": "packages",
        "name": "simulationworkflowschema.gw",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "DFTPlusGWResults",
            "description": "Groups DFT and GW outputs: band gaps, DOS, band structures. The ResultsNormalizer takes care of adding a label 'DFT' or 'GW' in the method `get_gw_workflow_properties`.",
            "base_sections": [
              "/packages/12/section_definitions/1"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "dft_outputs",
                "sub_section": "/packages/12/section_definitions/7",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "gw_outputs",
                "sub_section": "/packages/12/section_definitions/7",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "DFTPlusGWMethod",
            "description": "Specifies both DFT and GW input methodologies: starting XC functional, electrons representation (basis set), GW method reference.",
            "base_sections": [
              "/packages/12/section_definitions/6"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "gw_method_ref",
                "description": "Reference to the GW methodology.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/8/section_definitions/36"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "name": "DFTPlusGW",
            "description": "The GW workflow is generated in an extra EntryArchive IF both the DFT SinglePoint and the GW SinglePoint EntryArchives are present in the upload.",
            "base_sections": [
              "/packages/12/section_definitions/5"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "method",
                "sub_section": "/packages/35/section_definitions/1"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "results",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/35/section_definitions/0"
              }
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 36,
        "m_parent_sub_section": "packages",
        "name": "simulationworkflowschema.max_ent",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "DMFTPlusMaxEntResults",
            "description": "Groups DMFT and MaxEnt outputs: greens functions (DMFT, MaxEnt), band gaps (MaxEnt), DOS (MaxEnt), band structures (MaxEnt). The ResultsNormalizer takes care of adding a\nlabel 'DMFT' or 'MaxEnt' in the method `get_maxent_workflow_properties`.",
            "base_sections": [
              "/packages/12/section_definitions/1"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "dmft_outputs",
                "sub_section": "/packages/12/section_definitions/7",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "maxent_outputs",
                "sub_section": "/packages/12/section_definitions/7",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "DMFTPlusMaxEntMethod",
            "description": "Specifies both DMFT and MaxEnt input methodologies: DMFT method references, MaxEnt method reference.",
            "base_sections": [
              "/packages/12/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "dmft_method_ref",
                "description": "DMFT methodology reference.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/8/section_definitions/38"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "maxent_method_ref",
                "description": "MaxEnt methodology reference.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/8/section_definitions/44"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "name": "DMFTPlusMaxEnt",
            "description": "The MaxEnt (Maximum Entropy) workflow is generated in an extra EntryArchive IF both the DMFT SinglePoint and the MaxEnt SinglePoint EntryArchives are present in the upload.",
            "base_sections": [
              "/packages/12/section_definitions/5"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "method",
                "sub_section": "/packages/36/section_definitions/1"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "results",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/36/section_definitions/0"
              }
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 37,
        "m_parent_sub_section": "packages",
        "name": "simulationworkflowschema.molecular_dynamics",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "ThermostatParameters",
            "description": "Section containing the parameters pertaining to the thermostat for a molecular dynamics run.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "thermostat_type",
                "description": "The name of the thermostat used for temperature control. If skipped or an empty string is used, it\nmeans no thermostat was applied.\n\nAllowed values are:\n\n| Thermostat Name        | Description                               |\n\n| ---------------------- | ----------------------------------------- |\n\n| `\"\"`                   | No thermostat               |\n\n| `\"andersen\"`           | H.C. Andersen, [J. Chem. Phys.\n**72**, 2384 (1980)](https://doi.org/10.1063/1.439486) |\n\n| `\"berendsen\"`          | H. J. C. Berendsen, J. P. M. Postma,\nW. F. van Gunsteren, A. DiNola, and J. R. Haak, [J. Chem. Phys.\n**81**, 3684 (1984)](https://doi.org/10.1063/1.448118) |\n\n| `\"brownian\"`           | Brownian Dynamics |\n\n| `\"langevin_goga\"`           | N. Goga, A. J. Rzepiela, A. H. de Vries,\nS. J. Marrink, and H. J. C. Berendsen, [J. Chem. Theory Comput. **8**, 3637 (2012)]\n(https://doi.org/10.1021/ct3000876) |\n\n| `\"langevin_schneider\"`           | T. Schneider and E. Stoll,\n[Phys. Rev. B **17**, 1302](https://doi.org/10.1103/PhysRevB.17.1302) |\n\n| `\"nose_hoover\"`        | S. Nos\u00e9, [Mol. Phys. **52**, 255 (1984)]\n(https://doi.org/10.1080/00268978400101201); W.G. Hoover, [Phys. Rev. A\n**31**, 1695 (1985) |\n\n| `\"velocity_rescaling\"` | G. Bussi, D. Donadio, and M. Parrinello,\n[J. Chem. Phys. **126**, 014101 (2007)](https://doi.org/10.1063/1.2408420) |\n\n| `\"velocity_rescaling_langevin\"` | G. Bussi and M. Parrinello,\n[Phys. Rev. E **75**, 056707 (2007)](https://doi.org/10.1103/PhysRevE.75.056707) |\n\n| `\"velocity_rescaling_woodcock\"` | L. V. Woodcock,\n[Chem. Phys. Lett. **10**, 257 (1971)](https://doi.org/10.1016/0009-2614(71)80281-6) |\n\n| `\"langevin_leap_frog\"` | J.A. Izaguirre, C.R. Sweet, and V.S. Pande\n[Pac Symp Biocomput. **15**, 240-251 (2010)](https://doi.org/10.1142/9789814295291_0026) |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "andersen",
                    "berendsen",
                    "brownian",
                    "langevin_goga",
                    "langevin_leap_frog",
                    "langevin_schneider",
                    "nose_hoover",
                    "velocity_rescaling",
                    "velocity_rescaling_langevin",
                    "velocity_rescaling_woodcock"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "reference_temperature",
                "description": "The target temperature for the simulation. Typically used when temperature_profile is \"constant\".",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "coupling_constant",
                "description": "The time constant for temperature coupling. Need to describe what this means for the various\nthermostat options...",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "effective_mass",
                "description": "The effective or fictitious mass of the temperature resevoir.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "kilogram"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "temperature_profile",
                "description": "Type of temperature control (i.e., annealing) procedure. Can be \"constant\" (no annealing), \"linear\", or \"exponential\".\nIf linear, \"temperature_update_delta\" specifies the corresponding update parameter.\nIf exponential, \"temperature_update_factor\" specifies the corresponding update parameter.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "constant",
                    "exponential",
                    "linear"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "reference_temperature_start",
                "description": "The initial target temperature for the simulation. Typically used when temperature_profile is \"linear\" or \"exponential\".",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "reference_temperature_end",
                "description": "The final target temperature for the simulation.  Typically used when temperature_profile is \"linear\" or \"exponential\".",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "temperature_update_frequency",
                "description": "Number of simulation steps between changing the target temperature.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "temperature_update_delta",
                "description": "Amount to be added (subtracted if negative) to the current reference_temperature\nat a frequency of temperature_update_frequency when temperature_profile is \"linear\".\nThe reference temperature is then replaced by this new value until the next update.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "temperature_update_factor",
                "description": "Factor to be multiplied to the current reference_temperature at a frequency of temperature_update_frequency when temperature_profile is exponential.\nThe reference temperature is then replaced by this new value until the next update.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "step_start",
                "description": "Trajectory step where this thermostating starts.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "name": "step_end",
                "description": "Trajectory step number where this thermostating ends.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "BarostatParameters",
            "description": "Section containing the parameters pertaining to the barostat for a molecular dynamics run.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "barostat_type",
                "description": "The name of the barostat used for temperature control. If skipped or an empty string is used, it\nmeans no barostat was applied.\n\nAllowed values are:\n\n| Barostat Name          | Description                               |\n\n| ---------------------- | ----------------------------------------- |\n\n| `\"\"`                   | No thermostat               |\n\n| `\"berendsen\"`          | H. J. C. Berendsen, J. P. M. Postma,\nW. F. van Gunsteren, A. DiNola, and J. R. Haak, [J. Chem. Phys.\n**81**, 3684 (1984)](https://doi.org/10.1063/1.448118) |\n\n| `\"martyna_tuckerman_tobias_klein\"` | G.J. Martyna, M.E. Tuckerman, D.J. Tobias, and M.L. Klein,\n[Mol. Phys. **87**, 1117 (1996)](https://doi.org/10.1080/00268979600100761);\nM.E. Tuckerman, J. Alejandre, R. L\u00f3pez-Rend\u00f3n, A.L. Jochim, and G.J. Martyna,\n[J. Phys. A. **59**, 5629 (2006)](https://doi.org/10.1088/0305-4470/39/19/S18)|\n\n| `\"nose_hoover\"`        | S. Nos\u00e9, [Mol. Phys. **52**, 255 (1984)]\n(https://doi.org/10.1080/00268978400101201); W.G. Hoover, [Phys. Rev. A\n**31**, 1695 (1985) |\n\n| `\"parrinello_rahman\"`        | M. Parrinello and A. Rahman,\n[J. Appl. Phys. **52**, 7182 (1981)](https://doi.org/10.1063/1.328693);\nS. Nos\u00e9 and M.L. Klein, [Mol. Phys. **50**, 1055 (1983) |\n\n| `\"stochastic_cell_rescaling\"` | M. Bernetti and G. Bussi,\n[J. Chem. Phys. **153**, 114107 (2020)](https://doi.org/10.1063/1.2408420) |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "berendsen",
                    "martyna_tuckerman_tobias_klein",
                    "nose_hoover",
                    "parrinello_rahman",
                    "stochastic_cell_rescaling"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "coupling_type",
                "description": "Describes the symmetry of pressure coupling. Specifics can be inferred from the `coupling constant`\n\n| Type          | Description                               |\n\n| ---------------------- | ----------------------------------------- |\n\n| `isotropic`          | Identical coupling in all directions. |\n\n| `semi_isotropic` | Identical coupling in 2 directions. |\n\n| `anisotropic`        | General case. |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "anisotropic",
                    "isotropic",
                    "semi_isotropic"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "reference_pressure",
                "description": "The target pressure for the simulation, stored in a 3x3 matrix, indicating the values for individual directions\nalong the diagonal, and coupling between directions on the off-diagonal. Typically used when pressure_profile is \"constant\".",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3,
                  3
                ],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "coupling_constant",
                "description": "The time constants for pressure coupling, stored in a 3x3 matrix, indicating the values for individual directions\nalong the diagonal, and coupling between directions on the off-diagonal. 0 values along the off-diagonal\nindicate no-coupling between these directions.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3,
                  3
                ],
                "unit": "second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "compressibility",
                "description": "An estimate of the system's compressibility, used for box rescaling, stored in a 3x3 matrix indicating the values for individual directions\nalong the diagonal, and coupling between directions on the off-diagonal. If None, it may indicate that these values\nare incorporated into the coupling_constant, or simply that the software used uses a fixed value that is not available in\nthe input/output files.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3,
                  3
                ],
                "unit": "1 / pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "pressure_profile",
                "description": "Type of pressure control procedure. Can be \"constant\" (no annealing), \"linear\", or \"exponential\".\nIf linear, \"pressure_update_delta\" specifies the corresponding update parameter.\nIf exponential, \"pressure_update_factor\" specifies the corresponding update parameter.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "constant",
                    "exponential",
                    "linear"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "reference_pressure_start",
                "description": "The initial target pressure for the simulation, stored in a 3x3 matrix, indicating the values for individual directions\nalong the diagonal, and coupling between directions on the off-diagonal. Typically used when pressure_profile is \"linear\" or \"exponential\".",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3,
                  3
                ],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "reference_pressure_end",
                "description": "The final target pressure for the simulation, stored in a 3x3 matrix, indicating the values for individual directions\nalong the diagonal, and coupling between directions on the off-diagonal.  Typically used when pressure_profile is \"linear\" or \"exponential\".",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3,
                  3
                ],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "pressure_update_frequency",
                "description": "Number of simulation steps between changing the target pressure.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "pressure_update_delta",
                "description": "Amount to be added (subtracted if negative) to the current reference_pressure\nat a frequency of pressure_update_frequency when pressure_profile is \"linear\".\nThe pressure temperature is then replaced by this new value until the next update.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "pressure_update_factor",
                "description": "Factor to be multiplied to the current reference_pressure at a frequency of pressure_update_frequency when pressure_profile is exponential.\nThe reference pressure is then replaced by this new value until the next update.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "name": "step_start",
                "description": "Trajectory step where this barostating starts.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "name": "step_end",
                "description": "Trajectory step number where this barostating ends.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "name": "ShearParameters",
            "description": "Section containing the parameters pertaining to the shear flow for a molecular dynamics run.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "shear_type",
                "description": "The name of the method used to implement the effect of shear flow within the simulation.\n\nAllowed values are:\n\n| Shear Method          | Description                               |\n\n| ---------------------- | ----------------------------------------- |\n\n| `\"\"`                   | No thermostat               |\n\n| `\"lees_edwards\"`          | A.W. Lees and S.F. Edwards,\n[J. Phys. C **5** (1972) 1921](https://doi.org/10.1088/0022-3719/5/15/006)|\n\n| `\"trozzi_ciccotti\"`          | A.W. Lees and S.F. Edwards,\n[Phys. Rev. A **29** (1984) 916](https://doi.org/10.1103/PhysRevA.29.916)|\n\n| `\"ashurst_hoover\"`          | W. T. Ashurst and W. G. Hoover,\n[Phys. Rev. A **11** (1975) 658](https://doi.org/10.1103/PhysRevA.11.658)|",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "ashurst_hoover",
                    "lees_edwards",
                    "trozzi_ciccotti"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "shear_rate",
                "description": "The external stress tensor include normal (diagonal elements; which are zero in shear simulations)\nand shear stress' rates (off-diagonal elements).\nIts elements are: [[\u03c3_x, \u03c4_yx, \u03c4_zx], [\u03c4_xy, \u03c3_y, \u03c4_zy], [\u03c4_xz, \u03c4_yz, \u03c3_z]],\n        where \u03c3 and \u03c4 are the normal and shear stress' rates.\nThe first and second letters in the index correspond to the normal vector to the shear plane and the direction of shearing, respectively.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  3,
                  3
                ],
                "unit": "1 / picosecond"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "step_start",
                "description": "Trajectory step where this shearing starts.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "step_end",
                "description": "Trajectory step number where this shearing ends.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 3,
            "m_parent_sub_section": "section_definitions",
            "name": "Lambdas",
            "description": "Section for storing all lambda parameters for free energy perturbation",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "The type of lambda interpolation\n\nAllowed values are:\n\n| type          | Description                               |\n\n| ---------------------- | ----------------------------------------- |\n\n| `\"output\"`           | Lambdas for the free energy outputs saved.\n                            These will also act as a default in case some\n                            relevant lambdas are not specified. |\n\n| `\"coulomb\"`          | Lambdas for interpolating electrostatic interactions. |\n\n| `\"vdw\"`              | Lambdas for interpolating van der Waals interactions. |\n\n| `\"bonded\"`           | Lambdas for interpolating all intramolecular interactions. |\n\n| `\"restraint\"`        | Lambdas for interpolating restraints. |\n\n| `\"mass\"`             | Lambdas for interpolating masses. |\n\n| `\"temperature\"`      | Lambdas for interpolating temperature. |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "bonded",
                    "coulomb",
                    "mass",
                    "output",
                    "restraint",
                    "temperature",
                    "vdw"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "List of lambdas.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 4,
            "m_parent_sub_section": "section_definitions",
            "name": "FreeEnergyCalculationParameters",
            "description": "Section containing the parameters pertaining to a free energy calculation workflow that interpolates between two system states (defined via the interpolation parameter lambda).\nThe parameters are stored for each molecular dynamics run separately, to be referenced\nby the overarching workflow.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "type",
                "description": "Specifies the type of workflow. Allowed values are:\n\n| kind          | Description                               |\n\n| ---------------------- | ----------------------------------------- |\n\n| `\"alchemical\"`           | A non-physical transformation between 2 well-defined systems,\n                             typically achieved by smoothly interpolating between Hamiltonians or force fields.  |\n\n| `\"umbrella_sampling\"`    | A sampling of the path between 2 well-defined (sub)states of a system,\n                             typically achieved by applying a biasing force to the force field along a\n                             specified reaction coordinate.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "alchemical",
                    "umbrella_sampling"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "lambda_index",
                "description": "The index of the lambda in `lambdas` corresponding to the state of the current simulation.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "atom_indices",
                "description": "List of atom indices involved in the interpolation.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "initial_state_vdw",
                "description": "Specifies whether vdw interactions are on (True) or off (False) in the initial state (i.e., lambda = 0).",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "final_state_vdw",
                "description": "Specifies whether vdw interactions are on (True) or off (False) in the final state (i.e., lambda = 0).",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "initial_state_coloumb",
                "description": "Specifies whether vdw interactions are on (True) or off (False) in the initial state (i.e., lambda = 0).",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "final_state_coloumb",
                "description": "Specifies whether vdw interactions are on (True) or off (False) in the final state (i.e., lambda = 0).",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "initial_state_bonded",
                "description": "Specifies whether bonded interactions are on (True) or off (False) in the initial state (i.e., lambda = 0).",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "final_state_bonded",
                "description": "Specifies whether bonded interactions are on (True) or off (False) in the final state (i.e., lambda = 0).",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "lambdas",
                "description": "Contains the lists of lambda values defined for the interpolation of the system.",
                "sub_section": "/packages/37/section_definitions/3",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 5,
            "m_parent_sub_section": "section_definitions",
            "name": "MolecularDynamicsMethod",
            "base_sections": [
              "/packages/12/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.thermodynamic.trajectory.provenance.molecular_dynamics.ensemble_type"
                  ]
                },
                "name": "thermodynamic_ensemble",
                "description": "The type of thermodynamic ensemble that was simulated.\n\nAllowed values are:\n\n| Thermodynamic Ensemble          | Description                               |\n\n| ---------------------- | ----------------------------------------- |\n\n| `\"NVE\"`           | Constant number of particles, volume, and energy |\n\n| `\"NVT\"`           | Constant number of particles, volume, and temperature |\n\n| `\"NPT\"`           | Constant number of particles, pressure, and temperature |\n\n| `\"NPH\"`           | Constant number of particles, pressure, and enthalpy |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "NPH",
                    "NPT",
                    "NVE",
                    "NVT"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "integrator_type",
                "description": "Name of the integrator.\n\nAllowed values are:\n\n| Integrator Name          | Description                               |\n\n| ---------------------- | ----------------------------------------- |\n\n| `\"langevin_goga\"`           | N. Goga, A. J. Rzepiela, A. H. de Vries,\nS. J. Marrink, and H. J. C. Berendsen, [J. Chem. Theory Comput. **8**, 3637 (2012)]\n(https://doi.org/10.1021/ct3000876) |\n\n| `\"langevin_schneider\"`           | T. Schneider and E. Stoll,\n[Phys. Rev. B **17**, 1302](https://doi.org/10.1103/PhysRevB.17.1302) |\n\n| `\"leap_frog\"`          | R.W. Hockney, S.P. Goel, and J. Eastwood,\n[J. Comp. Phys. **14**, 148 (1974)](https://doi.org/10.1016/0021-9991(74)90010-2) |\n\n| `\"velocity_verlet\"` | W.C. Swope, H.C. Andersen, P.H. Berens, and K.R. Wilson,\n[J. Chem. Phys. **76**, 637 (1982)](https://doi.org/10.1063/1.442716) |\n\n| `\"rRESPA_multitimescale\"` | M. Tuckerman, B. J. Berne, and G. J. Martyna\n[J. Chem. Phys. **97**, 1990 (1992)](https://doi.org/10.1063/1.463137) |\n\n| `\"langevin_leap_frog\"` | J.A. Izaguirre, C.R. Sweet, and V.S. Pande\n[Pac Symp Biocomput. **15**, 240-251 (2010)](https://doi.org/10.1142/9789814295291_0026) |",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "brownian",
                    "conjugant_gradient",
                    "langevin_goga",
                    "langevin_leap_frog",
                    "langevin_schneider",
                    "leap_frog",
                    "rRESPA_multitimescale",
                    "velocity_verlet"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.thermodynamic.trajectory.provenance.molecular_dynamics.time_step"
                  ]
                },
                "name": "integration_timestep",
                "description": "The timestep at which the numerical integration is performed.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "n_steps",
                "description": "Number of timesteps performed.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "coordinate_save_frequency",
                "description": "The number of timesteps between saving the coordinates.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "velocity_save_frequency",
                "description": "The number of timesteps between saving the velocities.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "force_save_frequency",
                "description": "The number of timesteps between saving the forces.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "thermodynamics_save_frequency",
                "description": "The number of timesteps between saving the thermodynamic quantities.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "thermostat_parameters",
                "sub_section": "/packages/37/section_definitions/0",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "barostat_parameters",
                "sub_section": "/packages/37/section_definitions/1",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "shear_parameters",
                "sub_section": "/packages/37/section_definitions/2",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 3,
                "m_parent_sub_section": "sub_sections",
                "name": "free_energy_calculation_parameters",
                "sub_section": "/packages/37/section_definitions/4",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 6,
            "m_parent_sub_section": "section_definitions",
            "name": "Property",
            "description": "Generic parent section for all property types.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.dynamical.mean_squared_displacement.type",
                    "results.properties.dynamical.mean_squared_displacement.type__suggestion"
                  ]
                },
                "name": "type",
                "description": "Describes if the observable is calculated at the molecular or atomic level.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "atomic",
                    "molecular"
                  ]
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "label",
                "description": "Name or description of the property.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "error_type",
                "description": "Describes the type of error reported for this observable.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 7,
            "m_parent_sub_section": "section_definitions",
            "name": "PropertyValues",
            "description": "Generic parent section for information regarding the values of a property.",
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "m_annotations": {
                  "elasticsearch": [
                    "results.properties.dynamical.mean_squared_displacement.label",
                    "results.properties.dynamical.mean_squared_displacement.label__suggestion"
                  ]
                },
                "name": "label",
                "description": "Describes the atoms or molecule types involved in determining the property.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "errors",
                "description": "Error associated with the determination of the property.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 8,
            "m_parent_sub_section": "section_definitions",
            "name": "EnsemblePropertyValues",
            "description": "Generic section containing information regarding the values of an ensemble property.",
            "base_sections": [
              "/packages/37/section_definitions/7"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_bins",
                "description": "Number of bins.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "frame_start",
                "description": "Trajectory frame number where the ensemble averaging starts.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "frame_end",
                "description": "Trajectory frame number where the ensemble averaging ends.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "bins_magnitude",
                "description": "Values of the variable along which the property is calculated.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_bins"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "bins_unit",
                "description": "Unit of the given bins, using UnitRegistry() notation.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "value_magnitude",
                "description": "Values of the property.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_bins"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "value_unit",
                "description": "Unit of the property, using UnitRegistry() notation.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 9,
            "m_parent_sub_section": "section_definitions",
            "name": "RadialDistributionFunctionValues",
            "description": "Section containing information regarding the values of radial distribution functions (rdfs).",
            "base_sections": [
              "/packages/37/section_definitions/8"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "bins",
                "description": "Distances along which the rdf was calculated.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_bins"
                ],
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Values of the property.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_bins"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 10,
            "m_parent_sub_section": "section_definitions",
            "name": "EnsembleProperty",
            "description": "Generic section containing information about a calculation of any static observable from a trajectory (i.e., from an ensemble average).",
            "base_sections": [
              "/packages/37/section_definitions/6"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_smooth",
                "description": "Number of bins over which the running average was computed for\nthe observable `values'.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_variables",
                "description": "Number of variables along which the property is determined.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "variables_name",
                "description": "Name/description of the independent variables along which the observable is defined.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": [
                  "n_variables"
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "ensemble_property_values",
                "sub_section": "/packages/37/section_definitions/8",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 11,
            "m_parent_sub_section": "section_definitions",
            "name": "RadialDistributionFunction",
            "description": "Section containing information about the calculation of radial distribution functions (rdfs).",
            "base_sections": [
              "/packages/37/section_definitions/10"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "radial_distribution_function_values",
                "sub_section": "/packages/37/section_definitions/9",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 12,
            "m_parent_sub_section": "section_definitions",
            "name": "TrajectoryProperty",
            "description": "Generic section containing information about a calculation of any observable defined and stored at each individual frame of a trajectory.",
            "base_sections": [
              "/packages/37/section_definitions/6"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_frames",
                "description": "Number of frames for which the observable is stored.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "frames",
                "description": "Frames for which the observable is stored.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": [
                  "n_frames"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "times",
                "description": "Times for which the observable is stored.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_frames"
                ],
                "unit": "second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "value_magnitude",
                "description": "Values of the property.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_frames"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "value_unit",
                "description": "Unit of the property, using UnitRegistry() notation.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "errors",
                "description": "Error associated with the determination of the property.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 13,
            "m_parent_sub_section": "section_definitions",
            "name": "RadiusOfGyration",
            "description": "Section containing information about the calculation of radius of gyration (Rg).",
            "base_sections": [
              "/packages/37/section_definitions/12"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "atomsgroup_ref",
                "description": "References to the atoms_group section containing the molecule for which Rg was calculated.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/9/section_definitions/0"
                },
                "shape": [
                  1
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Values of the property.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_frames"
                ],
                "unit": "meter"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 14,
            "m_parent_sub_section": "section_definitions",
            "name": "FreeEnergyCalculations",
            "description": "Section containing information regarding the instantaneous (i.e., for a single configuration) values of free energies calculated via thermodynamic perturbation.\nThe values stored are actually infinitesimal changes in the free energy, determined as derivatives\nof the Hamiltonian with respect to the coupling parameter (lambda) defining each state for the perturbation.",
            "base_sections": [
              "/packages/37/section_definitions/12"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "method_ref",
                "description": "Links the free energy results with the method parameters.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/37/section_definitions/4"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "lambda_index",
                "description": "Index of the lambda state for the present simulation within the free energy calculation workflow.\nI.e., lambda = method_ref.lambdas.values[lambda_index]",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_states",
                "description": "Number of states defined for the interpolation of the system, as indicate in `method_ref`.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "value_total_energy_magnitude",
                "description": "Value of the total energy for the present lambda state. The expected dimensions are [\"n_frames\"].\nThis quantity is a reference to the data (file+path), which is stored in an HDF5 file for efficiency.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.datamodel.hdf5.HDF5Dataset"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "value_PV_energy_magnitude",
                "description": "Value of the pressure-volume energy (i.e., P*V) for the present lambda state. The expected dimensions are [\"n_frames\"].\nThis quantity is a reference to the data (file+path), which is stored in an HDF5 file for efficiency.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.datamodel.hdf5.HDF5Dataset"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "value_total_energy_differences_magnitude",
                "description": "Values correspond to the difference in total energy between each specified lambda state\nand the reference state, which corresponds to the value of lambda of the current simulation.\nThe expected dimensions are [\"n_frames\", \"n_states\"].\nThis quantity is a reference to the data (file+path), which is stored in an HDF5 file for efficiency.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.datamodel.hdf5.HDF5Dataset"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "value_total_energy_derivative_magnitude",
                "description": "Value of the derivative of the total energy with respect to lambda, evaluated for the current\nlambda state. The expected dimensions are [\"n_frames\"].\nThis quantity is a reference to the data (file+path), which is stored in an HDF5 file for efficiency.",
                "type": {
                  "type_kind": "custom",
                  "type_data": "nomad.datamodel.hdf5.HDF5Dataset"
                },
                "shape": [],
                "unit": "joule"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 15,
            "m_parent_sub_section": "section_definitions",
            "name": "DiffusionConstantValues",
            "description": "Section containing information regarding the diffusion constants.",
            "base_sections": [
              "/packages/37/section_definitions/7"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Values of the diffusion constants.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "meter ** 2 / second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "error_type",
                "description": "Describes the type of error reported for this observable.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 16,
            "m_parent_sub_section": "section_definitions",
            "name": "CorrelationFunctionValues",
            "description": "Generic section containing information regarding the values of a correlation function.",
            "base_sections": [
              "/packages/37/section_definitions/7"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_times",
                "description": "Number of times windows for the calculation of the correlation function.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "times",
                "description": "Time windows used for the calculation of the correlation function.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_times"
                ],
                "unit": "second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "value_magnitude",
                "description": "Values of the property.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_times"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "value_unit",
                "description": "Unit of the property, using UnitRegistry() notation.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 17,
            "m_parent_sub_section": "section_definitions",
            "name": "MeanSquaredDisplacementValues",
            "description": "Section containing information regarding the values of a mean squared displacements (msds).",
            "base_sections": [
              "/packages/37/section_definitions/16"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "times",
                "description": "Time windows used for the calculation of the msds.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_times"
                ],
                "unit": "second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "value",
                "description": "Mean squared displacement values.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_times"
                ],
                "unit": "meter ** 2"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "errors",
                "description": "Error associated with the determination of the msds.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "*"
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "diffusion_constant",
                "sub_section": "/packages/37/section_definitions/15",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 18,
            "m_parent_sub_section": "section_definitions",
            "name": "CorrelationFunction",
            "description": "Generic section containing information about a calculation of any time correlation function from a trajectory.",
            "base_sections": [
              "/packages/37/section_definitions/6"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "direction",
                "description": "Describes the direction in which the correlation function was calculated.",
                "type": {
                  "type_kind": "enum",
                  "type_data": [
                    "x",
                    "xy",
                    "xyz",
                    "xz",
                    "y",
                    "yz",
                    "z"
                  ]
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "correlation_function_values",
                "sub_section": "/packages/37/section_definitions/16",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 19,
            "m_parent_sub_section": "section_definitions",
            "name": "MeanSquaredDisplacement",
            "description": "Section containing information about a calculation of any mean squared displacements (msds).",
            "base_sections": [
              "/packages/37/section_definitions/18"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "mean_squared_displacement_values",
                "sub_section": "/packages/37/section_definitions/17",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 20,
            "m_parent_sub_section": "section_definitions",
            "name": "MolecularDynamicsResults",
            "base_sections": [
              "/packages/42/section_definitions/2"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "finished_normally",
                "description": "Indicates if calculation terminated normally.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_steps",
                "description": "Number of trajectory steps",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "trajectory",
                "description": "Reference to the system of each step in the trajectory.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/9/section_definitions/9"
                },
                "shape": [
                  "n_steps"
                ]
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "radial_distribution_functions",
                "sub_section": "/packages/37/section_definitions/11",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "ensemble_properties",
                "sub_section": "/packages/37/section_definitions/10",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "correlation_functions",
                "sub_section": "/packages/37/section_definitions/18",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 3,
                "m_parent_sub_section": "sub_sections",
                "name": "radius_of_gyration",
                "sub_section": "/packages/37/section_definitions/13",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 4,
                "m_parent_sub_section": "sub_sections",
                "name": "mean_squared_displacements",
                "sub_section": "/packages/37/section_definitions/19",
                "repeats": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 5,
                "m_parent_sub_section": "sub_sections",
                "name": "free_energy_calculations",
                "sub_section": "/packages/37/section_definitions/14",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 21,
            "m_parent_sub_section": "section_definitions",
            "name": "MolecularDynamics",
            "base_sections": [
              "/packages/12/section_definitions/4"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "method",
                "sub_section": "/packages/37/section_definitions/5"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "results",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/37/section_definitions/20"
              }
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 38,
        "m_parent_sub_section": "packages",
        "name": "simulationworkflowschema.phonon",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "PhononMethod",
            "base_sections": [
              "/packages/12/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "force_calculator",
                "description": "Name of the program used to calculate the forces.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "mesh_density",
                "description": "Density of the k-mesh for sampling.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "1 / meter ** 3"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "random_displacements",
                "description": "Identifies if displacements are made randomly.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "with_non_analytic_correction",
                "description": "Identifies if non-analytical term corrections are applied to dynamical matrix.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "with_grueneisen_parameters",
                "description": "Identifies if Grueneisen parameters are calculated.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "PhononResults",
            "base_sections": [
              "/packages/42/section_definitions/2"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_imaginary_frequencies",
                "description": "Number of modes with imaginary frequencies.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "n_bands",
                "description": "Number of phonon bands.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "n_qpoints",
                "description": "Number of q points for which phonon properties are evaluated.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "qpoints",
                "description": "Value of the qpoints.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_qpoints",
                  3
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "group_velocity",
                "description": "Calculated value of the group velocity at each qpoint.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_qpoints",
                  "n_bands",
                  3
                ],
                "unit": "meter / second"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "n_displacements",
                "description": "Number of independent displacements.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "n_atoms",
                "description": "Number of atoms in the simulation cell.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "displacements",
                "description": "Value of the displacements applied to each atom in the simulation cell.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_displacements",
                  "n_atoms",
                  3
                ],
                "unit": "meter"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "dos",
                "description": "Reference to the electronic density of states data.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/10/section_definitions/17"
                },
                "shape": [
                  "n_data"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "band_structure",
                "description": "Reference to the electronic band structure data.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/10/section_definitions/14"
                },
                "shape": [
                  "n_data"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "name": "Phonon",
            "base_sections": [
              "/packages/12/section_definitions/3"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "method",
                "sub_section": "/packages/38/section_definitions/0"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "results",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/38/section_definitions/1"
              }
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 39,
        "m_parent_sub_section": "packages",
        "name": "simulationworkflowschema.photon_polarization",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "PhotonPolarizationResults",
            "description": "Groups all polarization outputs: spectrum.",
            "base_sections": [
              "/packages/12/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_polarizations",
                "description": "Number of polarizations for the phonons used for the calculations.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "spectrum_polarization",
                "description": "Spectrum for a given polarization of the photon.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/10/section_definitions/28"
                },
                "shape": [
                  "n_polarizations"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "PhotonPolarizationMethod",
            "description": "Defines the full macroscopic dielectric tensor methodology: BSE method reference.",
            "base_sections": [
              "/packages/12/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "bse_method_ref",
                "description": "BSE methodology reference.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/8/section_definitions/37"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "name": "PhotonPolarization",
            "description": "The PhotonPolarization workflow is generated in an extra EntryArchive FOR all polarization EntryArchives present in the upload. It groups them for a set of given method parameters.\n\nThis entry is also recognized as the full macroscopic dielectric tensor entry (e.g. calculated\nvia BSE).",
            "base_sections": [
              "/packages/12/section_definitions/3"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "method",
                "sub_section": "/packages/39/section_definitions/1"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "results",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/39/section_definitions/0"
              }
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 40,
        "m_parent_sub_section": "packages",
        "name": "simulationworkflowschema.single_point",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "SinglePointResults",
            "base_sections": [
              "/packages/12/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_scf_steps",
                "description": "Number of self-consistent steps in the calculation.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "final_scf_energy_difference",
                "description": "The difference in the energy between the last two scf steps.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "is_converged",
                "description": "Indicates if the convergence criteria were fullfilled.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "n_data",
                "description": "",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "int32"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "dos",
                "description": "Reference to the electronic density of states data.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/10/section_definitions/17"
                },
                "shape": [
                  "n_data"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "band_structure",
                "description": "Reference to the electronic band structure data.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/10/section_definitions/14"
                },
                "shape": [
                  "n_data"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "eigenvalues",
                "description": "Reference to the eigenvalues.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/10/section_definitions/13"
                },
                "shape": [
                  "n_data"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "potential",
                "description": "Reference to the potential data.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/10/section_definitions/26"
                },
                "shape": [
                  "n_data"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "density_charge",
                "description": "Reference to the charge density data.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/10/section_definitions/27"
                },
                "shape": [
                  "n_data"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "spectra",
                "description": "Reference to the spectral data.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/10/section_definitions/28"
                },
                "shape": [
                  "n_data"
                ]
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "SinglePointMethod",
            "base_sections": [
              "/packages/12/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "method",
                "description": "Calculation method used.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "name": "SinglePoint",
            "base_sections": [
              "/packages/12/section_definitions/2"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "method",
                "sub_section": "/packages/40/section_definitions/1"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "results",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/40/section_definitions/0"
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 3,
            "m_parent_sub_section": "section_definitions",
            "name": "ParallelSimulation",
            "base_sections": [
              "/packages/12/section_definitions/2"
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 41,
        "m_parent_sub_section": "packages",
        "name": "simulationworkflowschema.tb",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "FirstPrinciplesPlusTBResults",
            "description": "Groups first principles and TB outputs: band gaps, DOS, band structures. The ResultsNormalizer takes care of adding a label 'FirstPrinciples' or 'TB' in the method\n`get_tb_workflow_properties`.",
            "base_sections": [
              "/packages/12/section_definitions/1"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "first_principles_outputs",
                "sub_section": "/packages/12/section_definitions/7",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "tb_outputs",
                "sub_section": "/packages/12/section_definitions/7",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "FirstPrinciplesPlusTBMethod",
            "description": "Specifies both the first principles and the TB input methodologies.",
            "base_sections": [
              "/packages/12/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "first_principles_method_ref",
                "description": "First principles methodology reference.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/8/section_definitions/44"
                }
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "tb_method_ref",
                "description": "TB methodology reference.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/8/section_definitions/30"
                }
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "name": "FirstPrinciplesPlusTB",
            "description": "The TB (tight-binding) workflow is generated in an extra EntryArchive IF both the first principles SinglePoint and the TB SinglePoint EntryArchives are present in the upload.",
            "base_sections": [
              "/packages/12/section_definitions/4"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "method",
                "sub_section": "/packages/41/section_definitions/1"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "results",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/41/section_definitions/0"
              }
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 42,
        "m_parent_sub_section": "packages",
        "name": "simulationworkflowschema.thermodynamics",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "Decomposition",
            "description": "Section containing information about the system to which an unstable compound will decompose to.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "fraction",
                "description": "Amount of the resulting system.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "system_ref",
                "description": "Reference to the resulting system.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/9/section_definitions/9"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "formula",
                "description": "Chemical formula of the resulting system.",
                "type": {
                  "type_kind": "python",
                  "type_data": "str"
                },
                "shape": []
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "Stability",
            "description": "Section containing information regarding the stability of the system.",
            "base_sections": [
              "/packages/24/section_definitions/0"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_references",
                "description": "Number of reference systems.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "systems_ref",
                "description": "References to the reference systems.",
                "type": {
                  "type_kind": "reference",
                  "type_data": "/packages/9/section_definitions/9"
                },
                "shape": [
                  "n_references"
                ]
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "formation_energy",
                "description": "Calculated value of the formation energy of the compound.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "delta_formation_energy",
                "description": "Energy with respect to the convex hull.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "is_stable",
                "description": "Indicates if a compound is stable.",
                "type": {
                  "type_kind": "python",
                  "type_data": "bool"
                },
                "shape": []
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "decomposition",
                "sub_section": "/packages/42/section_definitions/0",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "name": "ThermodynamicsResults",
            "base_sections": [
              "/packages/12/section_definitions/1"
            ],
            "quantities": [
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 0,
                "m_parent_sub_section": "quantities",
                "name": "n_values",
                "description": "Number of thermodynamics property evaluations.",
                "type": {
                  "type_kind": "python",
                  "type_data": "int"
                },
                "shape": []
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 1,
                "m_parent_sub_section": "quantities",
                "name": "temperature",
                "description": "Specifies the temperatures at which properties such as the Helmholtz free energy\nare calculated.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 2,
                "m_parent_sub_section": "quantities",
                "name": "pressure",
                "description": "Array containing the values of the pressure (one third of the trace of the stress\ntensor) corresponding to each property evaluation.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "pascal"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 3,
                "m_parent_sub_section": "quantities",
                "name": "helmholtz_free_energy",
                "description": "Helmholtz free energy per unit cell at constant volume.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 4,
                "m_parent_sub_section": "quantities",
                "name": "heat_capacity_c_p",
                "description": "Heat capacity per cell unit at constant pressure.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule / kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 5,
                "m_parent_sub_section": "quantities",
                "name": "heat_capacity_c_v",
                "description": "Heat capacity per cell unit at constant volume.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule / kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 6,
                "m_parent_sub_section": "quantities",
                "name": "heat_capacity_c_v_specific",
                "description": "Specific heat capacity at constant volume.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule / kelvin / kilogram",
                "cached": true,
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 7,
                "m_parent_sub_section": "quantities",
                "name": "vibrational_free_energy_at_constant_volume",
                "description": "Holds the vibrational free energy per cell unit at constant volume.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 8,
                "m_parent_sub_section": "quantities",
                "name": "vibrational_free_energy_at_constant_volume_specific",
                "description": "Stores the specific vibrational free energy at constant volume.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule / kilogram",
                "cached": true,
                "virtual": true
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 9,
                "m_parent_sub_section": "quantities",
                "name": "vibrational_free_energy",
                "description": "Calculated value of the vibrational free energy, F_vib.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 10,
                "m_parent_sub_section": "quantities",
                "name": "vibrational_internal_energy",
                "description": "Calculated value of the vibrational internal energy, U_vib.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 11,
                "m_parent_sub_section": "quantities",
                "name": "vibrational_entropy",
                "description": "Calculated value of the vibrational entropy, S.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule / kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 12,
                "m_parent_sub_section": "quantities",
                "name": "gibbs_free_energy",
                "description": "Calculated value of the Gibbs free energy, G.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 13,
                "m_parent_sub_section": "quantities",
                "name": "entropy",
                "description": "Calculated value of the entropy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule / kelvin"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 14,
                "m_parent_sub_section": "quantities",
                "name": "enthalpy",
                "description": "Calculated value of enthalpy.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule"
              },
              {
                "m_def": "nomad.metainfo.metainfo.Quantity",
                "m_parent_index": 15,
                "m_parent_sub_section": "quantities",
                "name": "internal_energy",
                "description": "Calculated value of the internal energy, U.",
                "type": {
                  "type_kind": "numpy",
                  "type_data": "float64"
                },
                "shape": [
                  "n_values"
                ],
                "unit": "joule"
              }
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "stability",
                "sub_section": "/packages/42/section_definitions/1",
                "repeats": false
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 3,
            "m_parent_sub_section": "section_definitions",
            "name": "ThermodynamicsMethod",
            "base_sections": [
              "/packages/12/section_definitions/0"
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 4,
            "m_parent_sub_section": "section_definitions",
            "name": "Thermodynamics",
            "base_sections": [
              "/packages/12/section_definitions/4"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "method",
                "sub_section": "/packages/42/section_definitions/3"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "results",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/42/section_definitions/2"
              }
            ]
          }
        ]
      },
      {
        "m_def": "nomad.metainfo.metainfo.Package",
        "m_parent_index": 43,
        "m_parent_sub_section": "packages",
        "name": "simulationworkflowschema.xs",
        "section_definitions": [
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 0,
            "m_parent_sub_section": "section_definitions",
            "name": "XSResults",
            "description": "Groups DFT, GW and PhotonPolarization outputs: band gaps (DFT, GW), DOS (DFT, GW), band structures (DFT, GW), spectra (PhotonPolarization). The ResultsNormalizer takes\ncare of adding a label 'DFT' or 'GW' in the method `get_xs_workflow_properties`.",
            "base_sections": [
              "/packages/12/section_definitions/1"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "dft_outputs",
                "sub_section": "/packages/12/section_definitions/7",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "gw_outputs",
                "sub_section": "/packages/12/section_definitions/7",
                "repeats": false
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 2,
                "m_parent_sub_section": "sub_sections",
                "name": "spectra",
                "sub_section": "/packages/39/section_definitions/0",
                "repeats": true
              }
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 1,
            "m_parent_sub_section": "section_definitions",
            "name": "XSMethod",
            "base_sections": [
              "/packages/12/section_definitions/0"
            ]
          },
          {
            "m_def": "nomad.metainfo.metainfo.Section",
            "m_parent_index": 2,
            "m_parent_sub_section": "section_definitions",
            "name": "XS",
            "description": "The XS workflow is generated in an extra EntryArchive IF both the DFT SinglePoint and the PhotonPolarization EntryArchives are present in the upload.",
            "base_sections": [
              "/packages/12/section_definitions/5"
            ],
            "sub_sections": [
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 0,
                "m_parent_sub_section": "sub_sections",
                "name": "method",
                "sub_section": "/packages/43/section_definitions/1"
              },
              {
                "m_def": "nomad.metainfo.metainfo.SubSection",
                "m_parent_index": 1,
                "m_parent_sub_section": "sub_sections",
                "name": "results",
                "categories": [
                  "/packages/26/category_definitions/0"
                ],
                "sub_section": "/packages/43/section_definitions/0"
              }
            ]
          }
        ]
      }
    ]
  },
  "parserMetadata": {
    "VASP": {
      "codeCategory": "Atomistic code",
      "codeLabel": "VASP",
      "codeLabelStyle": "All in capitals",
      "codeName": "vasp",
      "codeUrl": "https://www.vasp.at/",
      "parserDirName": "dependencies/electronic/electronicparsers/vasp/",
      "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
      "parserSpecific": "",
      "preamble": "",
      "status": "production",
      "tableOfFiles": "|Input Filename| Description|\n|--- | --- |\n|`vasprun.xml` | **Mainfile** in plain-text (structured) XML format |\n|`OUTCAR` | plain-text (semi-structured) file, VAPS's detailed output. Read by NOMAD only as fallback to parse `outcar` data |\n"
    }
  },
  "northTools": {
    "jupyter": {
      "short_description": "Basic jupyter run with an empty notebook or on given notebook file.",
      "description": "### **Jupyter Notebook**: The Classic Notebook Interface\nThe Jupyter Notebook is the original web application for creating and sharing computational documents. It offers a simple, streamlined, document-centric experience.",
      "image": "gitlab-registry.mpcdf.mpg.de/nomad-lab/nomad-distro/jupyter:develop",
      "cmd": null,
      "image_pull_policy": "Always",
      "privileged": false,
      "default_url": "/lab",
      "path_prefix": "lab/tree",
      "with_path": true,
      "file_extensions": [
        "ipynb"
      ],
      "mount_path": "/home/jovyan",
      "icon": "logo/jupyter.svg",
      "maintainer": [
        {
          "name": "Markus Scheidgen",
          "email": "markus.scheidgen@physik.hu-berlin.de"
        }
      ],
      "external_mounts": []
    },
    "pyiron": {
      "short_description": "Jupyterlab with pyiron installed.",
      "description": "### **Pyiron**: Complex workflows made easy\nFrom rapid prototyping to high performance computing in materials science. [Homepage](https://pyiron.org/).",
      "image": "pyiron/pyiron:latest",
      "cmd": null,
      "image_pull_policy": "Always",
      "privileged": false,
      "default_url": "/lab",
      "path_prefix": "lab/tree",
      "with_path": true,
      "file_extensions": [
        "ipynb"
      ],
      "mount_path": "/home/jovyan",
      "icon": "logo/pyiron.png",
      "maintainer": [
        {
          "name": "Markus Scheidgen",
          "email": "markus.scheidgen@physik.hu-berlin.de"
        }
      ],
      "external_mounts": []
    },
    "nionswift": {
      "short_description": "Run Nion Swift to analyze data as well as prepare focus series reconstructions in NOMAD.",
      "description": "### **Nion Swift**:\nNion Swift is a software package for electron microscopy data analysis and visualization. It is designed to be easy to use and to provide a high degree of interactivity. [Homepage](https://nionswift.readthedocs.io/en/stable/).",
      "image": "gitlab-registry.mpcdf.mpg.de/nomad-lab/north/nionswift:refactor",
      "cmd": null,
      "image_pull_policy": "Always",
      "privileged": false,
      "default_url": "/desktop",
      "path_prefix": null,
      "with_path": false,
      "file_extensions": [
        "tiff",
        "tif",
        "dm3",
        "dm4",
        "hdf5",
        "h5",
        "nion"
      ],
      "mount_path": "/home/jovyan",
      "icon": "logo/nionswift.png",
      "maintainer": [
        {
          "name": "Sherjeel Shabih",
          "email": "sherjeel.shabih@hu-berlin.de"
        }
      ],
      "external_mounts": []
    },
    "nexustools": {
      "short_description": "Analyse your NeXus files in NOMAD with several NeXus-compatible tools.",
      "description": "### **NeXus**:\nIncludes multiple NeXus tools for visualization and analysis.",
      "image": "gitlab-registry.mpcdf.mpg.de/nomad-lab/north/nexus:weptop-replacement",
      "cmd": null,
      "image_pull_policy": "Always",
      "privileged": false,
      "default_url": "/lab",
      "path_prefix": null,
      "with_path": true,
      "file_extensions": [
        "nxs",
        "nx",
        "nexus",
        "hdf5",
        "hd5",
        "h5",
        "hdf",
        "ipynb"
      ],
      "mount_path": "/home/jovyan",
      "icon": "logo/nexus.png",
      "maintainer": [
        {
          "name": "Sandor Brockhauser",
          "email": "sandor.brockhauser@physik.hu-berlin.de"
        }
      ],
      "external_mounts": []
    },
    "fiji": {
      "short_description": "Use FIJI to analyze and visualize your images in your NOMAD files.",
      "description": "### **FIJI** (Fiji Is Just ImageJ): Image processing package\nIt can be used for tasks such as image editing, image analysis, and image processing. [Homepage](https://fiji.sc/).",
      "image": "gitlab-registry.mpcdf.mpg.de/nomad-lab/north/fiji:weptop-replacement",
      "cmd": null,
      "image_pull_policy": "Always",
      "privileged": false,
      "default_url": "/desktop",
      "path_prefix": null,
      "with_path": false,
      "file_extensions": [
        "tif",
        "tiff",
        "jpeg",
        "png",
        "gif",
        "bmp",
        "avi"
      ],
      "mount_path": "/home/jovyan",
      "icon": "logo/fiji.png",
      "maintainer": [
        {
          "name": "Markus K\u00fchbach",
          "email": "markus.kuehbach@physik.hu-berlin.de"
        }
      ],
      "external_mounts": []
    },
    "vesta": {
      "short_description": "Run VESTA to analyse and visualize your crystal structures in your NOMAD files.",
      "description": "### **VESTA**: Visualization for Electronic and STructural Analysis\nVESTA is a software program used for visualizing and analyzing crystal structures, electron density maps, and other three-dimensional data related to materials science and crystallography. [Homepage](http://jp-minerals.org/vesta/en/).",
      "image": "gitlab-registry.mpcdf.mpg.de/nomad-lab/north/abtem:refactor",
      "cmd": null,
      "image_pull_policy": "Always",
      "privileged": false,
      "default_url": "/desktop",
      "path_prefix": null,
      "with_path": false,
      "file_extensions": [
        "vesta",
        "cif",
        "res",
        "vasp",
        "xyz",
        "pdb",
        "mcif",
        "fsf",
        "fcf",
        "shelx",
        "stl",
        "cgo",
        "wrl",
        "pov",
        "spf"
      ],
      "mount_path": "/home/jovyan",
      "icon": "logo/vesta.png",
      "maintainer": [
        {
          "name": "Markus K\u00fchbach",
          "email": "markus.kuehbach@physik.hu-berlin.de"
        }
      ],
      "external_mounts": []
    },
    "abtem": {
      "short_description": "Electronic structure supported image simulation for transmission electron microscopy.",
      "description": "### **abTEM, GPAW and VESTA**:\nVESTA, GPAW, and abTEM configured in one container for simulating images and diffraction patterns in transmission electron microscopy.",
      "image": "gitlab-registry.mpcdf.mpg.de/nomad-lab/north/abtem:refactor",
      "cmd": null,
      "image_pull_policy": "Always",
      "privileged": false,
      "default_url": "/lab",
      "path_prefix": null,
      "with_path": true,
      "file_extensions": [
        "ipynb"
      ],
      "mount_path": "/home/jovyan",
      "icon": "logo/abtem.png",
      "maintainer": [
        {
          "name": "Markus K\u00fchbach",
          "email": "markus.kuehbach@physik.hu-berlin.de"
        }
      ],
      "external_mounts": []
    },
    "ellips": {
      "short_description": "An example for analyzing ellipsometric data.",
      "description": "### **Ellipsometry**:\nThis example presents the capabilities of the NOMAD platform to store and standardize ellipsometry data. It shows the generation of a NeXus file according to the [NXellipsometry](https://manual.nexusformat.org/classes/contributed_definitions/NXellipsometry.html#nxellipsometry) application definition and a successive analysis of a SiO2 on Si Psi/Delta measurement.",
      "image": "gitlab-registry.mpcdf.mpg.de/nomad-lab/north/ellips:refactor",
      "cmd": null,
      "image_pull_policy": "Always",
      "privileged": false,
      "default_url": "/lab",
      "path_prefix": "lab/tree",
      "with_path": true,
      "file_extensions": [
        "ipynb",
        "nxs"
      ],
      "mount_path": "/home/jovyan",
      "icon": "logo/jupyter.svg",
      "maintainer": [
        {
          "name": "Florian Dobener",
          "email": "florian.dobener@physik.hu-berlin.de"
        },
        {
          "name": "Carola Emminger",
          "email": "emminger.carola@physik.hu-berlin.de"
        }
      ],
      "external_mounts": []
    },
    "xps": {
      "short_description": "An example for analyzing XPS data.",
      "description": "### **XPES**: X-ray Photoelectron Spectroscopy\nIncludes tools for analyzing X-ray Photoelectron Spectroscopy (XPS) spectra and converting SPECS SLE files into NeXus.",
      "image": "gitlab-registry.mpcdf.mpg.de/nomad-lab/north/xps:refactor",
      "cmd": null,
      "image_pull_policy": "Always",
      "privileged": false,
      "default_url": "/lab",
      "path_prefix": "lab/tree",
      "with_path": true,
      "file_extensions": [
        "ipynb",
        "nxs",
        "h5",
        "hdf5"
      ],
      "mount_path": "/home/jovyan",
      "icon": "logo/jupyter.svg",
      "maintainer": [
        {
          "name": "Florian Dobener",
          "email": "florian.dobener@physik.hu-berlin.de"
        },
        {
          "name": "Lukas Pielsticker",
          "email": "lukas.pielsticker@cec.mpg.de"
        },
        {
          "name": "Rubel Mozumder",
          "email": "rubel.mozumder@physik.hu-berlin.de"
        }
      ],
      "external_mounts": []
    },
    "sts": {
      "short_description": "An example for analyzing SPM (STM / STS) experiment.",
      "description": "### **STS**: Scanning Tunneling Spectroscopy\nThis example is for two types of experiments: Scanning Tunneling Microscopy (STM) and Scanning Tunneling Spectroscopy (STS) from Scanning Probe Microscopy. It can transform the data from files generated by a the nanonis software into the NeXus application definition NXsts. The example contains data files from the two specific nanonis software versions generic 5e and generic 4.5.",
      "image": "gitlab-registry.mpcdf.mpg.de/nomad-lab/north/sts:refactor",
      "cmd": null,
      "image_pull_policy": "Always",
      "privileged": false,
      "default_url": "/lab",
      "path_prefix": "lab/tree",
      "with_path": true,
      "file_extensions": [
        "ipynb",
        "nxs",
        "h5",
        "hdf5"
      ],
      "mount_path": "/home/jovyan",
      "icon": "logo/jupyter.svg",
      "maintainer": [
        {
          "name": "Rubel Mozumder",
          "email": "rubel.mozumder@physik.hu-berlin.de"
        }
      ],
      "external_mounts": []
    },
    "apmtools": {
      "short_description": "An example for analyzing atom probe data.",
      "description": "### **APM tools**: Atom Probe Microscopy tools\nMiscellaneous tools from the atom probe community:\nCurrently APTyzer, paraprobe-toolbox, and APAV",
      "image": "gitlab-registry.mpcdf.mpg.de/nomad-lab/north/apmtools:refactor",
      "cmd": null,
      "image_pull_policy": "Always",
      "privileged": false,
      "default_url": "/lab",
      "path_prefix": null,
      "with_path": true,
      "file_extensions": [
        "ipynb"
      ],
      "mount_path": "/home/jovyan",
      "icon": "logo/jupyter.svg",
      "maintainer": [
        {
          "name": "Markus K\u00fchbach",
          "email": "markus.kuehbach@physik.hu-berlin.de"
        }
      ],
      "external_mounts": []
    }
  },
  "unitList": [
    {
      "name": "ampere",
      "dimension": "current",
      "label": "Ampere",
      "abbreviation": "A",
      "aliases": [
        "A",
        "amp"
      ]
    },
    {
      "name": "bit",
      "dimension": "information",
      "label": "Bit",
      "abbreviation": "bit",
      "aliases": []
    },
    {
      "name": "candela",
      "dimension": "luminosity",
      "label": "Candela",
      "abbreviation": "cd",
      "aliases": [
        "cd",
        "candle"
      ]
    },
    {
      "name": "dimensionless",
      "dimension": "dimensionless",
      "label": "Dimensionless",
      "abbreviation": ""
    },
    {
      "name": "kelvin",
      "dimension": "temperature",
      "label": "Kelvin",
      "abbreviation": "K",
      "aliases": [
        "K",
        "degK",
        "\u00b0K",
        "degree_Kelvin",
        "degreeK"
      ]
    },
    {
      "name": "kilogram",
      "dimension": "mass",
      "label": "Kilogram",
      "abbreviation": "kg"
    },
    {
      "name": "meter",
      "dimension": "length",
      "label": "Meter",
      "abbreviation": "m",
      "aliases": [
        "m",
        "metre"
      ]
    },
    {
      "name": "mole",
      "dimension": "substance",
      "label": "Mole",
      "abbreviation": "mol",
      "aliases": [
        "mol"
      ]
    },
    {
      "name": "pixel",
      "dimension": "digital_image_resolution",
      "label": "Pixel",
      "abbreviation": "px",
      "aliases": [
        "px",
        "pel"
      ]
    },
    {
      "name": "radian",
      "dimension": "angle",
      "label": "Radian",
      "abbreviation": "rad",
      "aliases": [
        "rad"
      ]
    },
    {
      "name": "second",
      "dimension": "time",
      "label": "Second",
      "abbreviation": "s",
      "aliases": [
        "s",
        "sec"
      ]
    },
    {
      "name": "UK_force_ton",
      "dimension": "force",
      "label": "UK force ton",
      "abbreviation": "UK_force_ton",
      "aliases": [
        "UK_ton_force"
      ],
      "definition": "9964.01641818352 kilogram * meter / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "UK_hundredweight",
      "dimension": "mass",
      "label": "UK hundredweight",
      "abbreviation": "UK_cwt",
      "aliases": [
        "UK_cwt"
      ],
      "definition": "50.80234544 kilogram",
      "offset": 0.0
    },
    {
      "name": "UK_ton",
      "dimension": "mass",
      "label": "UK ton",
      "abbreviation": "UK_ton",
      "aliases": [],
      "definition": "1016.0469088000001 kilogram",
      "offset": 0.0
    },
    {
      "name": "US_force_ton",
      "dimension": "force",
      "label": "US force ton",
      "abbreviation": "US_force_ton",
      "aliases": [
        "US_ton_force"
      ],
      "definition": "8896.443230521003 kilogram * meter / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "US_hundredweight",
      "dimension": "mass",
      "label": "US hundredweight",
      "abbreviation": "US_cwt",
      "aliases": [
        "US_cwt"
      ],
      "definition": "45.35923700000001 kilogram",
      "offset": 0.0
    },
    {
      "name": "US_international_ampere",
      "dimension": "current",
      "label": "US international ampere",
      "abbreviation": "A_US",
      "aliases": [
        "A_US"
      ],
      "definition": "0.9998350816345909 ampere",
      "offset": 0.0
    },
    {
      "name": "US_international_ohm",
      "dimension": "resistance",
      "label": "US international ohm",
      "abbreviation": "\u03a9_US",
      "aliases": [
        "\u03a9_US",
        "ohm_US"
      ],
      "definition": "1.000495 kilogram * meter ^ 2 / ampere ^ 2 / second ^ 3",
      "offset": 0.0
    },
    {
      "name": "US_international_volt",
      "dimension": "electric_potential",
      "label": "US international volt",
      "abbreviation": "V_US",
      "aliases": [
        "V_US"
      ],
      "definition": "1.00033 kilogram * meter ^ 2 / ampere / second ^ 3",
      "offset": 0.0
    },
    {
      "name": "US_ton",
      "dimension": "mass",
      "label": "US ton",
      "abbreviation": "US_ton",
      "aliases": [],
      "definition": "907.1847400000001 kilogram",
      "offset": 0.0
    },
    {
      "name": "abampere",
      "dimension": "current",
      "label": "Abampere",
      "abbreviation": "abA",
      "aliases": [
        "abA"
      ],
      "definition": "10 ampere",
      "offset": 0.0
    },
    {
      "name": "abcoulomb",
      "dimension": "charge",
      "label": "Abcoulomb",
      "abbreviation": "abC",
      "aliases": [
        "abC"
      ],
      "definition": "10 ampere * second",
      "offset": 0.0
    },
    {
      "name": "abfarad",
      "dimension": "capacitance",
      "label": "Abfarad",
      "abbreviation": "abF",
      "aliases": [
        "abF"
      ],
      "definition": "1000000000.0 ampere ^ 2 * second ^ 4 / kilogram / meter ^ 2",
      "offset": 0.0
    },
    {
      "name": "abhenry",
      "dimension": "inductance",
      "label": "Abhenry",
      "abbreviation": "abH",
      "aliases": [
        "abH"
      ],
      "definition": "1.0000000000000003e-09 kilogram * meter ^ 2 / ampere ^ 2 / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "abohm",
      "dimension": "resistance",
      "label": "Abohm",
      "abbreviation": "ab\u03a9",
      "aliases": [
        "ab\u03a9"
      ],
      "definition": "1.0000000000000003e-09 kilogram * meter ^ 2 / ampere ^ 2 / second ^ 3",
      "offset": 0.0
    },
    {
      "name": "absiemens",
      "dimension": "conductance",
      "label": "Absiemens",
      "abbreviation": "abS",
      "aliases": [
        "abS",
        "abmho"
      ],
      "definition": "1000000000.0 ampere ^ 2 * second ^ 3 / kilogram / meter ^ 2",
      "offset": 0.0
    },
    {
      "name": "abvolt",
      "dimension": "electric_potential",
      "label": "Abvolt",
      "abbreviation": "abV",
      "aliases": [
        "abV"
      ],
      "definition": "1e-08 kilogram * meter ^ 2 / ampere / second ^ 3",
      "offset": 0.0
    },
    {
      "name": "acre",
      "dimension": "area",
      "label": "Acre",
      "abbreviation": "acre",
      "aliases": [],
      "definition": "4046.8726098742513 meter ^ 2",
      "offset": 0.0
    },
    {
      "name": "acre_foot",
      "dimension": "volume",
      "label": "Acre foot",
      "abbreviation": "acre_foot",
      "aliases": [
        "acre_feet"
      ],
      "definition": "1233.4892384681486 meter ^ 3",
      "offset": 0.0
    },
    {
      "name": "angstrom",
      "dimension": "length",
      "label": "Angstrom",
      "abbreviation": "\u00c5",
      "aliases": [
        "\u00c5",
        "\u00e5ngstr\u00f6m",
        "\u212b"
      ],
      "definition": "1e-10 meter",
      "offset": 0.0
    },
    {
      "name": "arcminute",
      "dimension": "angle",
      "label": "Arcminute",
      "abbreviation": "arcmin",
      "aliases": [
        "arcmin",
        "arc_minute",
        "angular_minute"
      ],
      "definition": "0.00029088820866572163 radian",
      "offset": 0.0
    },
    {
      "name": "arcsecond",
      "dimension": "angle",
      "label": "Arcsecond",
      "abbreviation": "arcsec",
      "aliases": [
        "arcsec",
        "arc_second",
        "angular_second"
      ],
      "definition": "4.84813681109536e-06 radian",
      "offset": 0.0
    },
    {
      "name": "atomic_mass_constant",
      "dimension": "mass",
      "label": "Atomic mass constant",
      "abbreviation": "m_u",
      "aliases": [
        "m_u"
      ],
      "definition": "1.6605390666e-27 kilogram",
      "offset": 0.0
    },
    {
      "name": "atomic_unit_of_current",
      "dimension": "current",
      "label": "Atomic unit of current",
      "abbreviation": "a_u_current",
      "aliases": [
        "a_u_current"
      ],
      "definition": "0.006623618237509995 ampere",
      "offset": 0.0
    },
    {
      "name": "atomic_unit_of_electric_field",
      "dimension": "electric_field",
      "label": "Atomic unit of electric field",
      "abbreviation": "a_u_electric_field",
      "aliases": [
        "a_u_electric_field"
      ],
      "definition": "514220674762.31793 kilogram * meter / ampere / second ^ 3",
      "offset": 0.0
    },
    {
      "name": "atomic_unit_of_force",
      "dimension": "force",
      "label": "Atomic unit of force",
      "abbreviation": "a_u_force",
      "aliases": [
        "a_u_force"
      ],
      "definition": "8.238723498238991e-08 kilogram * meter / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "atomic_unit_of_intensity",
      "dimension": "intensity",
      "label": "Atomic unit of intensity",
      "abbreviation": "a_u_intensity",
      "aliases": [
        "a_u_intensity"
      ],
      "definition": "3.509445520566477e+20 kilogram / second ^ 3",
      "offset": 0.0
    },
    {
      "name": "atomic_unit_of_length",
      "dimension": "length",
      "label": "Atomic unit of length",
      "abbreviation": "bohr",
      "aliases": [
        "bohr",
        "a_0",
        "a0",
        "bohr_radius",
        "a_u_length"
      ],
      "definition": "5.2917721090397754e-11 meter",
      "offset": 0.0
    },
    {
      "name": "atomic_unit_of_pressure",
      "dimension": "pressure",
      "label": "Atomic unit of pressure",
      "abbreviation": "a_u_pressure",
      "aliases": [
        "a_u_pressure"
      ],
      "definition": "29421015696359.54 kilogram / meter / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "atomic_unit_of_temperature",
      "dimension": "temperature",
      "label": "Atomic unit of temperature",
      "abbreviation": "a_u_temp",
      "aliases": [
        "a_u_temp"
      ],
      "definition": "315775.0248040719 kelvin",
      "offset": 0.0
    },
    {
      "name": "atomic_unit_of_time",
      "dimension": "time",
      "label": "Atomic unit of time",
      "abbreviation": "a_u_time",
      "aliases": [
        "a_u_time"
      ],
      "definition": "2.4188843265856806e-17 second",
      "offset": 0.0
    },
    {
      "name": "bag",
      "dimension": "mass",
      "label": "Bag",
      "abbreviation": "bag",
      "aliases": [],
      "definition": "42.637682780000006 kilogram",
      "offset": 0.0
    },
    {
      "name": "bar",
      "dimension": "pressure",
      "label": "Bar",
      "abbreviation": "bar",
      "aliases": [],
      "definition": "100000.0 kilogram / meter / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "barn",
      "dimension": "area",
      "label": "Barn",
      "abbreviation": "b",
      "aliases": [
        "b"
      ],
      "definition": "1e-28 meter ^ 2",
      "offset": 0.0
    },
    {
      "name": "barye",
      "dimension": "pressure",
      "label": "Barye",
      "abbreviation": "Ba",
      "aliases": [
        "Ba",
        "barie",
        "barad",
        "barrie",
        "baryd"
      ],
      "definition": "0.1 kilogram / meter / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "becquerel",
      "dimension": "frequency",
      "label": "Becquerel",
      "abbreviation": "Bq",
      "aliases": [
        "Bq"
      ],
      "definition": "1.0 / second",
      "offset": 0.0
    },
    {
      "name": "biot",
      "dimension": "current",
      "label": "Biot",
      "abbreviation": "Bi",
      "aliases": [
        "Bi"
      ],
      "definition": "10 ampere",
      "offset": 0.0
    },
    {
      "name": "bohr_magneton",
      "dimension": "magnetic_dipole",
      "label": "Bohr magneton",
      "abbreviation": "\u00b5_B",
      "aliases": [
        "\u00b5_B",
        "mu_B"
      ],
      "definition": "9.274010078362164e-24 ampere * meter ^ 2",
      "offset": 0.0
    },
    {
      "name": "boltzmann_constant",
      "dimension": "entropy",
      "label": "Boltzmann constant",
      "abbreviation": "k",
      "aliases": [
        "k",
        "k_B"
      ],
      "definition": "1.380649e-23 kilogram * meter ^ 2 / kelvin / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "buckingham",
      "dimension": "electric_quadrupole",
      "label": "Buckingham",
      "abbreviation": "buckingham",
      "aliases": [],
      "definition": "3.335640951981521e-40 ampere * meter ^ 2 * second",
      "offset": 0.0
    },
    {
      "name": "byte",
      "dimension": "information",
      "label": "Byte",
      "abbreviation": "B",
      "aliases": [
        "B",
        "octet"
      ],
      "definition": "8 bit",
      "offset": 0.0
    },
    {
      "name": "cables_length",
      "dimension": "length",
      "label": "Cables length",
      "abbreviation": "cables_length",
      "aliases": [],
      "definition": "219.45643891287781 meter",
      "offset": 0.0
    },
    {
      "name": "calorie",
      "dimension": "energy",
      "label": "Calorie",
      "abbreviation": "cal",
      "aliases": [
        "cal",
        "thermochemical_calorie",
        "cal_th"
      ],
      "definition": "4.184 kilogram * meter ^ 2 / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "carat",
      "dimension": "mass",
      "label": "Carat",
      "abbreviation": "ct",
      "aliases": [
        "ct",
        "karat"
      ],
      "definition": "0.0002 kilogram",
      "offset": 0.0
    },
    {
      "name": "centimeter_H2O",
      "dimension": "pressure",
      "label": "Centimeter H2O",
      "abbreviation": "cmH2O",
      "aliases": [
        "cmH2O",
        "cm_H2O"
      ],
      "definition": "98.06649999999998 kilogram / meter / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "centimeter_Hg",
      "dimension": "pressure",
      "label": "Centimeter Hg",
      "abbreviation": "cmHg",
      "aliases": [
        "cmHg",
        "cm_Hg",
        "centimeter_Hg_0C"
      ],
      "definition": "1333.2238741499998 kilogram / meter / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "chain",
      "dimension": "length",
      "label": "Chain",
      "abbreviation": "chain",
      "aliases": [],
      "definition": "20.116840233680467 meter",
      "offset": 0.0
    },
    {
      "name": "classical_electron_radius",
      "dimension": "length",
      "label": "Classical electron radius",
      "abbreviation": "r_e",
      "aliases": [
        "r_e"
      ],
      "definition": "2.817940326216153e-15 meter",
      "offset": 0.0
    },
    {
      "name": "clausius",
      "dimension": "entropy",
      "label": "Clausius",
      "abbreviation": "Cl",
      "aliases": [
        "Cl"
      ],
      "definition": "4.184 kilogram * meter ^ 2 / kelvin / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "conductance_quantum",
      "dimension": "conductance",
      "label": "Conductance quantum",
      "abbreviation": "G_0",
      "aliases": [
        "G_0"
      ],
      "definition": "7.74809172986365e-05 ampere ^ 2 * second ^ 3 / kilogram / meter ^ 2",
      "offset": 0.0
    },
    {
      "name": "conventional_ampere_90",
      "dimension": "current",
      "label": "Conventional ampere 90",
      "abbreviation": "A_90",
      "aliases": [
        "A_90"
      ],
      "definition": "1.000000088871438 ampere",
      "offset": 0.0
    },
    {
      "name": "conventional_coulomb_90",
      "dimension": "charge",
      "label": "Conventional coulomb 90",
      "abbreviation": "C_90",
      "aliases": [
        "C_90"
      ],
      "definition": "1.000000088871438 ampere * second",
      "offset": 0.0
    },
    {
      "name": "conventional_farad_90",
      "dimension": "capacitance",
      "label": "Conventional farad 90",
      "abbreviation": "F_90",
      "aliases": [
        "F_90"
      ],
      "definition": "0.9999999822063327 ampere ^ 2 * second ^ 4 / kilogram / meter ^ 2",
      "offset": 0.0
    },
    {
      "name": "conventional_henry_90",
      "dimension": "inductance",
      "label": "Conventional henry 90",
      "abbreviation": "H_90",
      "aliases": [
        "H_90"
      ],
      "definition": "1.0000000177936679 kilogram * meter ^ 2 / ampere ^ 2 / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "conventional_ohm_90",
      "dimension": "resistance",
      "label": "Conventional ohm 90",
      "abbreviation": "\u03a9_90",
      "aliases": [
        "\u03a9_90",
        "ohm_90"
      ],
      "definition": "1.0000000177936679 kilogram * meter ^ 2 / ampere ^ 2 / second ^ 3",
      "offset": 0.0
    },
    {
      "name": "conventional_volt_90",
      "dimension": "electric_potential",
      "label": "Conventional volt 90",
      "abbreviation": "V_90",
      "aliases": [
        "V_90"
      ],
      "definition": "1.0000001066651074 kilogram * meter ^ 2 / ampere / second ^ 3",
      "offset": 0.0
    },
    {
      "name": "conventional_von_klitzing_constant",
      "dimension": "resistance",
      "label": "Conventional von klitzing constant",
      "abbreviation": "R_K90",
      "aliases": [
        "R_K90"
      ],
      "definition": "25812.807 kilogram * meter ^ 2 / ampere ^ 2 / second ^ 3",
      "offset": 0.0
    },
    {
      "name": "conventional_watt_90",
      "dimension": "power",
      "label": "Conventional watt 90",
      "abbreviation": "W_90",
      "aliases": [
        "W_90"
      ],
      "definition": "1.0000001955365547 kilogram * meter ^ 2 / second ^ 3",
      "offset": 0.0
    },
    {
      "name": "coulomb",
      "dimension": "charge",
      "label": "Coulomb",
      "abbreviation": "C",
      "aliases": [
        "C"
      ],
      "definition": "1 ampere * second",
      "offset": 0.0
    },
    {
      "name": "counts_per_second",
      "dimension": "frequency",
      "label": "Counts per second",
      "abbreviation": "cps",
      "aliases": [
        "cps"
      ],
      "definition": "1.0 / second",
      "offset": 0.0
    },
    {
      "name": "cubic_foot",
      "dimension": "volume",
      "label": "Cubic foot",
      "abbreviation": "cu_ft",
      "aliases": [
        "cu_ft",
        "cubic_feet"
      ],
      "definition": "0.028316846591999994 meter ^ 3",
      "offset": 0.0
    },
    {
      "name": "cubic_inch",
      "dimension": "volume",
      "label": "Cubic inch",
      "abbreviation": "cu_in",
      "aliases": [
        "cu_in"
      ],
      "definition": "1.6387063999999996e-05 meter ^ 3",
      "offset": 0.0
    },
    {
      "name": "cubic_yard",
      "dimension": "volume",
      "label": "Cubic yard",
      "abbreviation": "cu_yd",
      "aliases": [
        "cu_yd"
      ],
      "definition": "0.764554857984 meter ^ 3",
      "offset": 0.0
    },
    {
      "name": "curie",
      "dimension": "frequency",
      "label": "Curie",
      "abbreviation": "Ci",
      "aliases": [
        "Ci"
      ],
      "definition": "37000000000.0 / second",
      "offset": 0.0
    },
    {
      "name": "dalton",
      "dimension": "mass",
      "label": "Dalton",
      "abbreviation": "Da",
      "aliases": [
        "Da"
      ],
      "definition": "1.6605390666e-27 kilogram",
      "offset": 0.0
    },
    {
      "name": "darcy",
      "dimension": "area",
      "label": "Darcy",
      "abbreviation": "darcy",
      "aliases": [],
      "definition": "9.86923266716013e-13 meter ^ 2",
      "offset": 0.0
    },
    {
      "name": "debye",
      "dimension": "electric_dipole",
      "label": "Debye",
      "abbreviation": "D",
      "aliases": [
        "D"
      ],
      "definition": "3.335640951981521e-30 ampere * meter * second",
      "offset": 0.0
    },
    {
      "name": "degree",
      "dimension": "angle",
      "label": "Degree",
      "abbreviation": "\u00b0",
      "aliases": [
        "\u00b0",
        "deg",
        "arcdeg",
        "arcdegree",
        "angular_degree"
      ],
      "definition": "0.017453292519943295 radian",
      "offset": 0.0
    },
    {
      "name": "degree_Celsius",
      "dimension": "temperature",
      "label": "Degree Celsius",
      "abbreviation": "\u00b0C",
      "aliases": [
        "\u00b0C",
        "celsius",
        "degC",
        "degreeC"
      ],
      "definition": "1 kelvin",
      "offset": 273.15
    },
    {
      "name": "degree_Fahrenheit",
      "dimension": "temperature",
      "label": "Degree Fahrenheit",
      "abbreviation": "\u00b0F",
      "aliases": [
        "\u00b0F",
        "fahrenheit",
        "degF",
        "degreeF"
      ],
      "definition": "0.5555555555555556 kelvin",
      "offset": 459.67
    },
    {
      "name": "degree_Rankine",
      "dimension": "temperature",
      "label": "Degree Rankine",
      "abbreviation": "\u00b0R",
      "aliases": [
        "\u00b0R",
        "rankine",
        "degR",
        "degreeR"
      ],
      "definition": "0.5555555555555556 kelvin",
      "offset": 0.0
    },
    {
      "name": "degree_Reaumur",
      "dimension": "temperature",
      "label": "Degree Reaumur",
      "abbreviation": "\u00b0Re",
      "aliases": [
        "\u00b0Re",
        "reaumur",
        "degRe",
        "degreeRe",
        "degree_R\u00e9aumur",
        "r\u00e9aumur"
      ],
      "definition": "0.8 kelvin",
      "offset": 341.43749999999994
    },
    {
      "name": "dram",
      "dimension": "mass",
      "label": "Dram",
      "abbreviation": "dr",
      "aliases": [
        "dr",
        "avoirdupois_dram",
        "avdp_dram",
        "drachm"
      ],
      "definition": "0.0017718451953125003 kilogram",
      "offset": 0.0
    },
    {
      "name": "dyne",
      "dimension": "force",
      "label": "Dyne",
      "abbreviation": "dyn",
      "aliases": [
        "dyn"
      ],
      "definition": "1e-05 kilogram * meter / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "electrical_horsepower",
      "dimension": "power",
      "label": "Electrical horsepower",
      "abbreviation": "electrical_horsepower",
      "aliases": [],
      "definition": "746.0 kilogram * meter ^ 2 / second ^ 3",
      "offset": 0.0
    },
    {
      "name": "electron_mass",
      "dimension": "mass",
      "label": "Electron mass",
      "abbreviation": "m_e",
      "aliases": [
        "m_e",
        "atomic_unit_of_mass",
        "a_u_mass"
      ],
      "definition": "9.1093837015e-31 kilogram",
      "offset": 0.0
    },
    {
      "name": "electron_volt",
      "dimension": "energy",
      "label": "Electron volt",
      "abbreviation": "eV",
      "aliases": [
        "eV"
      ],
      "definition": "1.602176634e-19 kilogram * meter ^ 2 / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "elementary_charge",
      "dimension": "charge",
      "label": "Elementary charge",
      "abbreviation": "e",
      "aliases": [
        "e"
      ],
      "definition": "1.602176634e-19 ampere * second",
      "offset": 0.0
    },
    {
      "name": "entropy_unit",
      "dimension": "molar_entropy",
      "label": "Entropy unit",
      "abbreviation": "eu",
      "aliases": [
        "eu"
      ],
      "definition": "4.184 kilogram * meter ^ 2 / kelvin / mole / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "enzyme_unit",
      "dimension": "activity",
      "label": "Enzyme unit",
      "abbreviation": "U",
      "aliases": [
        "U",
        "enzymeunit"
      ],
      "definition": "1.6666666666666667e-08 mole / second",
      "offset": 0.0
    },
    {
      "name": "erg",
      "dimension": "energy",
      "label": "Erg",
      "abbreviation": "erg",
      "aliases": [],
      "definition": "1.0000000000000001e-07 kilogram * meter ^ 2 / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "farad",
      "dimension": "capacitance",
      "label": "Farad",
      "abbreviation": "F",
      "aliases": [
        "F"
      ],
      "definition": "1.0 ampere ^ 2 * second ^ 4 / kilogram / meter ^ 2",
      "offset": 0.0
    },
    {
      "name": "faraday",
      "dimension": "charge",
      "label": "Faraday",
      "abbreviation": "faraday",
      "aliases": [],
      "definition": "96485.33212331001 ampere * second",
      "offset": 0.0
    },
    {
      "name": "fathom",
      "dimension": "length",
      "label": "Fathom",
      "abbreviation": "fathom",
      "aliases": [],
      "definition": "1.828803657607315 meter",
      "offset": 0.0
    },
    {
      "name": "fermi",
      "dimension": "length",
      "label": "Fermi",
      "abbreviation": "fermi",
      "aliases": [],
      "definition": "1e-15 meter",
      "offset": 0.0
    },
    {
      "name": "fifteen_degree_calorie",
      "dimension": "energy",
      "label": "Fifteen degree calorie",
      "abbreviation": "cal_15",
      "aliases": [
        "cal_15"
      ],
      "definition": "4.1855 kilogram * meter ^ 2 / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "fifth",
      "dimension": "volume",
      "label": "Fifth",
      "abbreviation": "fifth",
      "aliases": [
        "US_liquid_fifth"
      ],
      "definition": "0.0007570823567999999 meter ^ 3",
      "offset": 0.0
    },
    {
      "name": "fluid_dram",
      "dimension": "volume",
      "label": "Fluid dram",
      "abbreviation": "fldr",
      "aliases": [
        "fldr",
        "fluidram",
        "US_fluid_dram",
        "US_liquid_dram"
      ],
      "definition": "3.6966911953124993e-06 meter ^ 3",
      "offset": 0.0
    },
    {
      "name": "fluid_ounce",
      "dimension": "volume",
      "label": "Fluid ounce",
      "abbreviation": "floz",
      "aliases": [
        "floz",
        "US_fluid_ounce",
        "US_liquid_ounce"
      ],
      "definition": "2.9573529562499994e-05 meter ^ 3",
      "offset": 0.0
    },
    {
      "name": "foot",
      "dimension": "length",
      "label": "Foot",
      "abbreviation": "ft",
      "aliases": [
        "ft",
        "international_foot",
        "feet",
        "international_feet"
      ],
      "definition": "0.30479999999999996 meter",
      "offset": 0.0
    },
    {
      "name": "foot_H2O",
      "dimension": "pressure",
      "label": "Foot H2O",
      "abbreviation": "ftH2O",
      "aliases": [
        "ftH2O",
        "feet_H2O"
      ],
      "definition": "2989.0669199999993 kilogram / meter / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "foot_per_second",
      "dimension": "speed",
      "label": "Foot per second",
      "abbreviation": "fps",
      "aliases": [
        "fps"
      ],
      "definition": "0.30479999999999996 meter / second",
      "offset": 0.0
    },
    {
      "name": "force_gram",
      "dimension": "force",
      "label": "Force gram",
      "abbreviation": "gf",
      "aliases": [
        "gf",
        "gram_force"
      ],
      "definition": "0.00980665 kilogram * meter / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "force_kilogram",
      "dimension": "force",
      "label": "Force kilogram",
      "abbreviation": "pond",
      "aliases": [
        "pond"
      ],
      "definition": "9.80665 kilogram * meter / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "force_long_ton",
      "dimension": "force",
      "label": "Force long ton",
      "abbreviation": "force_long_ton",
      "aliases": [
        "long_ton_force"
      ],
      "definition": "9964.01641818352 kilogram * meter / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "force_metric_ton",
      "dimension": "force",
      "label": "Force metric ton",
      "abbreviation": "tf",
      "aliases": [
        "tf",
        "metric_ton_force",
        "force_t",
        "t_force"
      ],
      "definition": "9806.65 kilogram * meter / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "force_ounce",
      "dimension": "force",
      "label": "Force ounce",
      "abbreviation": "ozf",
      "aliases": [
        "ozf",
        "ounce_force"
      ],
      "definition": "0.2780138509537813 kilogram * meter / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "force_pound",
      "dimension": "force",
      "label": "Force pound",
      "abbreviation": "lbf",
      "aliases": [
        "lbf",
        "pound_force"
      ],
      "definition": "4.4482216152605005 kilogram * meter / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "force_ton",
      "dimension": "force",
      "label": "Force ton",
      "abbreviation": "force_ton",
      "aliases": [
        "ton_force",
        "force_short_ton",
        "short_ton_force"
      ],
      "definition": "8896.443230521003 kilogram * meter / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "furlong",
      "dimension": "length",
      "label": "Furlong",
      "abbreviation": "fur",
      "aliases": [
        "fur"
      ],
      "definition": "201.16840233680466 meter",
      "offset": 0.0
    },
    {
      "name": "galileo",
      "dimension": "acceleration",
      "label": "Galileo",
      "abbreviation": "Gal",
      "aliases": [
        "Gal"
      ],
      "definition": "0.01 meter / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "gallon",
      "dimension": "volume",
      "label": "Gallon",
      "abbreviation": "gal",
      "aliases": [
        "gal",
        "liquid_gallon",
        "US_liquid_gallon"
      ],
      "definition": "0.0037854117839999993 meter ^ 3",
      "offset": 0.0
    },
    {
      "name": "gamma",
      "dimension": "magnetic_field",
      "label": "Gamma",
      "abbreviation": "\u03b3",
      "aliases": [
        "\u03b3"
      ],
      "definition": "1.0000000000000003e-09 kilogram / ampere / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "gamma_mass",
      "dimension": "mass",
      "label": "Gamma mass",
      "abbreviation": "gamma_mass",
      "aliases": [],
      "definition": "1e-09 kilogram",
      "offset": 0.0
    },
    {
      "name": "gauss",
      "dimension": "magnetic_field",
      "label": "Gauss",
      "abbreviation": "G",
      "aliases": [
        "G"
      ],
      "definition": "0.0001 kilogram / ampere / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "gill",
      "dimension": "volume",
      "label": "Gill",
      "abbreviation": "gi",
      "aliases": [
        "gi",
        "liquid_gill",
        "US_liquid_gill"
      ],
      "definition": "0.00011829411824999998 meter ^ 3",
      "offset": 0.0
    },
    {
      "name": "grade",
      "dimension": "angle",
      "label": "Grade",
      "abbreviation": "grad",
      "aliases": [
        "grad",
        "gon"
      ],
      "definition": "0.015707963267948967 radian",
      "offset": 0.0
    },
    {
      "name": "grain",
      "dimension": "mass",
      "label": "Grain",
      "abbreviation": "gr",
      "aliases": [
        "gr"
      ],
      "definition": "6.479891000000001e-05 kilogram",
      "offset": 0.0
    },
    {
      "name": "gram",
      "dimension": "mass",
      "label": "Gram",
      "abbreviation": "g",
      "aliases": [
        "g"
      ],
      "definition": "0.001 kilogram",
      "offset": 0.0
    },
    {
      "name": "hand",
      "dimension": "length",
      "label": "Hand",
      "abbreviation": "hand",
      "aliases": [],
      "definition": "0.1016 meter",
      "offset": 0.0
    },
    {
      "name": "hartree",
      "dimension": "energy",
      "label": "Hartree",
      "abbreviation": "Ha",
      "aliases": [
        "Ha",
        "E_h",
        "hartree_energy",
        "atomic_unit_of_energy",
        "a_u_energy"
      ],
      "definition": "4.35974472220717e-18 kilogram * meter ^ 2 / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "henry",
      "dimension": "inductance",
      "label": "Henry",
      "abbreviation": "H",
      "aliases": [
        "H"
      ],
      "definition": "1.0 kilogram * meter ^ 2 / ampere ^ 2 / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "hertz",
      "dimension": "frequency",
      "label": "Hertz",
      "abbreviation": "Hz",
      "aliases": [
        "Hz"
      ],
      "definition": "1.0 / second",
      "offset": 0.0
    },
    {
      "name": "horsepower",
      "dimension": "power",
      "label": "Horsepower",
      "abbreviation": "hp",
      "aliases": [
        "hp",
        "UK_horsepower",
        "hydraulic_horsepower"
      ],
      "definition": "745.6998715822701 kilogram * meter ^ 2 / second ^ 3",
      "offset": 0.0
    },
    {
      "name": "hour",
      "dimension": "time",
      "label": "Hour",
      "abbreviation": "hr",
      "aliases": [
        "hr"
      ],
      "definition": "3600 second",
      "offset": 0.0
    },
    {
      "name": "hundredweight",
      "dimension": "mass",
      "label": "Hundredweight",
      "abbreviation": "cwt",
      "aliases": [
        "cwt",
        "short_hundredweight"
      ],
      "definition": "45.35923700000001 kilogram",
      "offset": 0.0
    },
    {
      "name": "impedance_of_free_space",
      "dimension": "resistance",
      "label": "Impedance of free space",
      "abbreviation": "Z_0",
      "aliases": [
        "Z_0",
        "characteristic_impedance_of_vacuum"
      ],
      "definition": "376.73031366837046 kilogram * meter ^ 2 / ampere ^ 2 / second ^ 3",
      "offset": 0.0
    },
    {
      "name": "imperial_barrel",
      "dimension": "volume",
      "label": "Imperial barrel",
      "abbreviation": "imperial_bbl",
      "aliases": [
        "imperial_bbl",
        "UK_bbl"
      ],
      "definition": "0.16365924000000004 meter ^ 3",
      "offset": 0.0
    },
    {
      "name": "imperial_bushel",
      "dimension": "volume",
      "label": "Imperial bushel",
      "abbreviation": "imperial_bu",
      "aliases": [
        "imperial_bu",
        "UK_bushel"
      ],
      "definition": "0.036368720000000014 meter ^ 3",
      "offset": 0.0
    },
    {
      "name": "imperial_cup",
      "dimension": "volume",
      "label": "Imperial cup",
      "abbreviation": "imperial_cp",
      "aliases": [
        "imperial_cp",
        "UK_cup"
      ],
      "definition": "0.0002841306250000001 meter ^ 3",
      "offset": 0.0
    },
    {
      "name": "imperial_fluid_drachm",
      "dimension": "volume",
      "label": "Imperial fluid drachm",
      "abbreviation": "imperial_fldr",
      "aliases": [
        "imperial_fldr",
        "imperial_fluid_dram"
      ],
      "definition": "3.551632812500001e-06 meter ^ 3",
      "offset": 0.0
    },
    {
      "name": "imperial_fluid_ounce",
      "dimension": "volume",
      "label": "Imperial fluid ounce",
      "abbreviation": "imperial_floz",
      "aliases": [
        "imperial_floz",
        "UK_fluid_ounce"
      ],
      "definition": "2.8413062500000008e-05 meter ^ 3",
      "offset": 0.0
    },
    {
      "name": "imperial_fluid_scruple",
      "dimension": "volume",
      "label": "Imperial fluid scruple",
      "abbreviation": "imperial_fluid_scruple",
      "aliases": [],
      "definition": "1.1838776041666672e-06 meter ^ 3",
      "offset": 0.0
    },
    {
      "name": "imperial_gallon",
      "dimension": "volume",
      "label": "Imperial gallon",
      "abbreviation": "imperial_gal",
      "aliases": [
        "imperial_gal",
        "UK_gallon"
      ],
      "definition": "0.004546090000000002 meter ^ 3",
      "offset": 0.0
    },
    {
      "name": "imperial_gill",
      "dimension": "volume",
      "label": "Imperial gill",
      "abbreviation": "imperial_gi",
      "aliases": [
        "imperial_gi",
        "UK_gill"
      ],
      "definition": "0.00014206531250000006 meter ^ 3",
      "offset": 0.0
    },
    {
      "name": "imperial_minim",
      "dimension": "volume",
      "label": "Imperial minim",
      "abbreviation": "imperial_minim",
      "aliases": [],
      "definition": "5.919388020833336e-08 meter ^ 3",
      "offset": 0.0
    },
    {
      "name": "imperial_peck",
      "dimension": "volume",
      "label": "Imperial peck",
      "abbreviation": "imperial_pk",
      "aliases": [
        "imperial_pk",
        "UK_pk"
      ],
      "definition": "0.009092180000000004 meter ^ 3",
      "offset": 0.0
    },
    {
      "name": "imperial_pint",
      "dimension": "volume",
      "label": "Imperial pint",
      "abbreviation": "imperial_pt",
      "aliases": [
        "imperial_pt",
        "UK_pint"
      ],
      "definition": "0.0005682612500000002 meter ^ 3",
      "offset": 0.0
    },
    {
      "name": "imperial_quart",
      "dimension": "volume",
      "label": "Imperial quart",
      "abbreviation": "imperial_qt",
      "aliases": [
        "imperial_qt",
        "UK_quart"
      ],
      "definition": "0.0011365225000000004 meter ^ 3",
      "offset": 0.0
    },
    {
      "name": "inch",
      "dimension": "length",
      "label": "Inch",
      "abbreviation": "in",
      "aliases": [
        "in",
        "international_inch",
        "inches",
        "international_inches"
      ],
      "definition": "0.0254 meter",
      "offset": 0.0
    },
    {
      "name": "inch_H2O_39F",
      "dimension": "pressure",
      "label": "Inch H2O 39F",
      "abbreviation": "inch_H2O_39F",
      "aliases": [],
      "definition": "249.08193551052 kilogram / meter / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "inch_H2O_60F",
      "dimension": "pressure",
      "label": "Inch H2O 60F",
      "abbreviation": "inch_H2O_60F",
      "aliases": [],
      "definition": "248.84007017890997 kilogram / meter / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "inch_Hg",
      "dimension": "pressure",
      "label": "Inch Hg",
      "abbreviation": "inHg",
      "aliases": [
        "inHg",
        "in_Hg",
        "inch_Hg_32F"
      ],
      "definition": "3386.3886403409997 kilogram / meter / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "inch_Hg_60F",
      "dimension": "pressure",
      "label": "Inch Hg 60F",
      "abbreviation": "inch_Hg_60F",
      "aliases": [],
      "definition": "3376.8485350879996 kilogram / meter / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "international_calorie",
      "dimension": "energy",
      "label": "International calorie",
      "abbreviation": "cal_it",
      "aliases": [
        "cal_it",
        "international_steam_table_calorie"
      ],
      "definition": "4.1868 kilogram * meter ^ 2 / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "joule",
      "dimension": "energy",
      "label": "Joule",
      "abbreviation": "J",
      "aliases": [
        "J"
      ],
      "definition": "1.0 kilogram * meter ^ 2 / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "katal",
      "dimension": "activity",
      "label": "Katal",
      "abbreviation": "kat",
      "aliases": [
        "kat"
      ],
      "definition": "1.0 mole / second",
      "offset": 0.0
    },
    {
      "name": "kilometer_per_hour",
      "dimension": "speed",
      "label": "Kilometer per hour",
      "abbreviation": "kph",
      "aliases": [
        "kph",
        "KPH"
      ],
      "definition": "0.2777777777777778 meter / second",
      "offset": 0.0
    },
    {
      "name": "kilometer_per_second",
      "dimension": "speed",
      "label": "Kilometer per second",
      "abbreviation": "kmps",
      "aliases": [
        "kps"
      ],
      "definition": "1000.0 meter / second",
      "offset": 0.0
    },
    {
      "name": "kip",
      "dimension": "force",
      "label": "Kip",
      "abbreviation": "kip",
      "aliases": [],
      "definition": "4448.2216152605015 kilogram * meter / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "kip_per_square_inch",
      "dimension": "pressure",
      "label": "Kip per square inch",
      "abbreviation": "ksi",
      "aliases": [
        "ksi"
      ],
      "definition": "6894757.293168365 kilogram / meter / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "lambda",
      "dimension": "volume",
      "label": "Lambda",
      "abbreviation": "\u03bb",
      "aliases": [
        "\u03bb"
      ],
      "definition": "1.0000000000000003e-09 meter ^ 3",
      "offset": 0.0
    },
    {
      "name": "lambert",
      "dimension": "luminance",
      "label": "Lambert",
      "abbreviation": "lambert",
      "aliases": [],
      "definition": "3183.098861837907 candela / meter ^ 2",
      "offset": 0.0
    },
    {
      "name": "league",
      "dimension": "length",
      "label": "League",
      "abbreviation": "league",
      "aliases": [],
      "definition": "4828.041656083312 meter",
      "offset": 0.0
    },
    {
      "name": "link",
      "dimension": "length",
      "label": "Link",
      "abbreviation": "li",
      "aliases": [
        "li",
        "survey_link"
      ],
      "definition": "0.20116840233680466 meter",
      "offset": 0.0
    },
    {
      "name": "liter",
      "dimension": "volume",
      "label": "Liter",
      "abbreviation": "l",
      "aliases": [
        "l",
        "L",
        "litre"
      ],
      "definition": "0.0010000000000000002 meter ^ 3",
      "offset": 0.0
    },
    {
      "name": "long_hundredweight",
      "dimension": "mass",
      "label": "Long hundredweight",
      "abbreviation": "long_hundredweight",
      "aliases": [],
      "definition": "50.80234544 kilogram",
      "offset": 0.0
    },
    {
      "name": "long_ton",
      "dimension": "mass",
      "label": "Long ton",
      "abbreviation": "long_ton",
      "aliases": [],
      "definition": "1016.0469088000001 kilogram",
      "offset": 0.0
    },
    {
      "name": "lumen",
      "dimension": "luminous_flux",
      "label": "Lumen",
      "abbreviation": "lm",
      "aliases": [
        "lm"
      ],
      "definition": "1 candela * radian ^ 2",
      "offset": 0.0
    },
    {
      "name": "lux",
      "dimension": "illuminance",
      "label": "Lux",
      "abbreviation": "lx",
      "aliases": [
        "lx"
      ],
      "definition": "1.0 candela * radian ^ 2 / meter ^ 2",
      "offset": 0.0
    },
    {
      "name": "magnetic_flux_quantum",
      "dimension": "magnetic_flux",
      "label": "Magnetic flux quantum",
      "abbreviation": "\u03a6_0",
      "aliases": [
        "\u03a6_0",
        "Phi_0"
      ],
      "definition": "2.0678338484619295e-15 kilogram * meter ^ 2 / ampere / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "mean_international_ampere",
      "dimension": "current",
      "label": "Mean international ampere",
      "abbreviation": "A_it",
      "aliases": [
        "A_it"
      ],
      "definition": "0.9998500734640026 ampere",
      "offset": 0.0
    },
    {
      "name": "mean_international_ohm",
      "dimension": "resistance",
      "label": "Mean international ohm",
      "abbreviation": "\u03a9_it",
      "aliases": [
        "\u03a9_it",
        "ohm_it"
      ],
      "definition": "1.00049 kilogram * meter ^ 2 / ampere ^ 2 / second ^ 3",
      "offset": 0.0
    },
    {
      "name": "mean_international_volt",
      "dimension": "electric_potential",
      "label": "Mean international volt",
      "abbreviation": "V_it",
      "aliases": [
        "V_it"
      ],
      "definition": "1.00034 kilogram * meter ^ 2 / ampere / second ^ 3",
      "offset": 0.0
    },
    {
      "name": "mercury",
      "dimension": "density",
      "label": "Mercury",
      "abbreviation": "Hg",
      "aliases": [
        "Hg",
        "Hg_0C",
        "Hg_32F",
        "conventional_mercury"
      ],
      "definition": "13595.099999999999 kilogram / meter ^ 3",
      "offset": 0.0
    },
    {
      "name": "mercury_60F",
      "dimension": "density",
      "label": "Mercury 60F",
      "abbreviation": "Hg_60F",
      "aliases": [
        "Hg_60F"
      ],
      "definition": "13556.800000000001 kilogram / meter ^ 3",
      "offset": 0.0
    },
    {
      "name": "meter_per_second",
      "dimension": "speed",
      "label": "Meter per second",
      "abbreviation": "mps",
      "aliases": [
        "mps"
      ],
      "definition": "1.0 meter / second",
      "offset": 0.0
    },
    {
      "name": "metric_horsepower",
      "dimension": "power",
      "label": "Metric horsepower",
      "abbreviation": "metric_horsepower",
      "aliases": [],
      "definition": "735.49875 kilogram * meter ^ 2 / second ^ 3",
      "offset": 0.0
    },
    {
      "name": "metric_ton",
      "dimension": "mass",
      "label": "Metric ton",
      "abbreviation": "tonne",
      "aliases": [
        "tonne"
      ],
      "definition": "1000.0 kilogram",
      "offset": 0.0
    },
    {
      "name": "micron",
      "dimension": "length",
      "label": "Micron",
      "abbreviation": "\u00b5",
      "aliases": [
        "\u00b5"
      ],
      "definition": "1e-06 meter",
      "offset": 0.0
    },
    {
      "name": "mil",
      "dimension": "angle",
      "label": "Mil",
      "abbreviation": "mil",
      "aliases": [],
      "definition": "9.817477042468104e-05 radian",
      "offset": 0.0
    },
    {
      "name": "mile",
      "dimension": "length",
      "label": "Mile",
      "abbreviation": "mi",
      "aliases": [
        "mi",
        "international_mile"
      ],
      "definition": "1609.344 meter",
      "offset": 0.0
    },
    {
      "name": "mile_per_hour",
      "dimension": "speed",
      "label": "Mile per hour",
      "abbreviation": "mph",
      "aliases": [
        "mph",
        "MPH"
      ],
      "definition": "0.44704000000000005 meter / second",
      "offset": 0.0
    },
    {
      "name": "milliarcsecond",
      "dimension": "angle",
      "label": "Milliarcsecond",
      "abbreviation": "marcsec",
      "aliases": [
        "mas"
      ],
      "definition": "4.84813681109536e-09 radian",
      "offset": 0.0
    },
    {
      "name": "millimeter_Hg",
      "dimension": "pressure",
      "label": "Millimeter Hg",
      "abbreviation": "mmHg",
      "aliases": [
        "mmHg",
        "mm_Hg",
        "millimeter_Hg_0C"
      ],
      "definition": "133.32238741499998 kilogram / meter / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "minim",
      "dimension": "volume",
      "label": "Minim",
      "abbreviation": "minim",
      "aliases": [],
      "definition": "6.161151992187499e-08 meter ^ 3",
      "offset": 0.0
    },
    {
      "name": "minute",
      "dimension": "time",
      "label": "Minute",
      "abbreviation": "minute",
      "aliases": [],
      "definition": "60 second",
      "offset": 0.0
    },
    {
      "name": "molar",
      "dimension": "concentration",
      "label": "Molar",
      "abbreviation": "M",
      "aliases": [
        "M"
      ],
      "definition": "999.9999999999999 mole / meter ^ 3",
      "offset": 0.0
    },
    {
      "name": "molar_gas_constant",
      "dimension": "molar_entropy",
      "label": "Molar gas constant",
      "abbreviation": "R",
      "aliases": [
        "R"
      ],
      "definition": "8.314462618153241 kilogram * meter ^ 2 / kelvin / mole / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "neutron_mass",
      "dimension": "mass",
      "label": "Neutron mass",
      "abbreviation": "m_n",
      "aliases": [
        "m_n"
      ],
      "definition": "1.67492749804e-27 kilogram",
      "offset": 0.0
    },
    {
      "name": "newton",
      "dimension": "force",
      "label": "Newton",
      "abbreviation": "N",
      "aliases": [
        "N"
      ],
      "definition": "1.0 kilogram * meter / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "nit",
      "dimension": "luminance",
      "label": "Nit",
      "abbreviation": "nit",
      "aliases": [],
      "definition": "1.0 candela / meter ^ 2",
      "offset": 0.0
    },
    {
      "name": "nuclear_magneton",
      "dimension": "magnetic_dipole",
      "label": "Nuclear magneton",
      "abbreviation": "\u00b5_N",
      "aliases": [
        "\u00b5_N",
        "mu_N"
      ],
      "definition": "5.050783746096374e-27 ampere * meter ^ 2",
      "offset": 0.0
    },
    {
      "name": "ohm",
      "dimension": "resistance",
      "label": "Ohm",
      "abbreviation": "\u03a9",
      "aliases": [
        "\u03a9"
      ],
      "definition": "1.0 kilogram * meter ^ 2 / ampere ^ 2 / second ^ 3",
      "offset": 0.0
    },
    {
      "name": "ounce",
      "dimension": "mass",
      "label": "Ounce",
      "abbreviation": "oz",
      "aliases": [
        "oz",
        "avoirdupois_ounce",
        "avdp_ounce"
      ],
      "definition": "0.028349523125000005 kilogram",
      "offset": 0.0
    },
    {
      "name": "particle",
      "dimension": "substance",
      "label": "Particle",
      "abbreviation": "particle",
      "aliases": [
        "molec",
        "molecule"
      ],
      "definition": "1.6605390671738466e-24 mole",
      "offset": 0.0
    },
    {
      "name": "pascal",
      "dimension": "pressure",
      "label": "Pascal",
      "abbreviation": "Pa",
      "aliases": [
        "Pa"
      ],
      "definition": "1.0 kilogram / meter / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "pennyweight",
      "dimension": "mass",
      "label": "Pennyweight",
      "abbreviation": "dwt",
      "aliases": [
        "dwt"
      ],
      "definition": "0.00155517384 kilogram",
      "offset": 0.0
    },
    {
      "name": "pint",
      "dimension": "volume",
      "label": "Pint",
      "abbreviation": "liquid_pint",
      "aliases": [
        "liquid_pint",
        "US_pint"
      ],
      "definition": "0.0004731764729999999 meter ^ 3",
      "offset": 0.0
    },
    {
      "name": "pixels_per_centimeter",
      "dimension": "pixel_density",
      "label": "Pixels per centimeter",
      "abbreviation": "PPCM",
      "aliases": [
        "PPCM",
        "ppcm"
      ],
      "definition": "100.0 pixel / meter",
      "offset": 0.0
    },
    {
      "name": "pixels_per_inch",
      "dimension": "pixel_density",
      "label": "Pixels per inch",
      "abbreviation": "PPI",
      "aliases": [
        "PPI",
        "ppi"
      ],
      "definition": "39.37007874015748 pixel / meter",
      "offset": 0.0
    },
    {
      "name": "planck_current",
      "dimension": "current",
      "label": "Planck current",
      "abbreviation": "planck_current",
      "aliases": [],
      "definition": "3.478872753744379e+25 ampere",
      "offset": 0.0
    },
    {
      "name": "planck_length",
      "dimension": "length",
      "label": "Planck length",
      "abbreviation": "planck_length",
      "aliases": [],
      "definition": "1.616255024423705e-35 meter",
      "offset": 0.0
    },
    {
      "name": "planck_mass",
      "dimension": "mass",
      "label": "Planck mass",
      "abbreviation": "planck_mass",
      "aliases": [],
      "definition": "2.1764343427178987e-08 kilogram",
      "offset": 0.0
    },
    {
      "name": "planck_temperature",
      "dimension": "temperature",
      "label": "Planck temperature",
      "abbreviation": "planck_temperature",
      "aliases": [],
      "definition": "1.4167841621573425e+32 kelvin",
      "offset": 0.0
    },
    {
      "name": "planck_time",
      "dimension": "time",
      "label": "Planck time",
      "abbreviation": "planck_time",
      "aliases": [],
      "definition": "5.391246448313604e-44 second",
      "offset": 0.0
    },
    {
      "name": "poise",
      "dimension": "viscosity",
      "label": "Poise",
      "abbreviation": "P",
      "aliases": [
        "P"
      ],
      "definition": "0.1 kilogram / meter / second",
      "offset": 0.0
    },
    {
      "name": "pound",
      "dimension": "mass",
      "label": "Pound",
      "abbreviation": "lb",
      "aliases": [
        "lb",
        "avoirdupois_pound",
        "avdp_pound"
      ],
      "definition": "0.4535923700000001 kilogram",
      "offset": 0.0
    },
    {
      "name": "pound_force_per_square_inch",
      "dimension": "pressure",
      "label": "Pound force per square inch",
      "abbreviation": "psi",
      "aliases": [
        "psi"
      ],
      "definition": "6894.7572931683635 kilogram / meter / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "poundal",
      "dimension": "force",
      "label": "Poundal",
      "abbreviation": "pdl",
      "aliases": [
        "pdl"
      ],
      "definition": "0.138254954376 kilogram * meter / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "proton_mass",
      "dimension": "mass",
      "label": "Proton mass",
      "abbreviation": "m_p",
      "aliases": [
        "m_p"
      ],
      "definition": "1.67262192369e-27 kilogram",
      "offset": 0.0
    },
    {
      "name": "quart",
      "dimension": "volume",
      "label": "Quart",
      "abbreviation": "qt",
      "aliases": [
        "qt",
        "liquid_quart",
        "US_liquid_quart"
      ],
      "definition": "0.0009463529459999998 meter ^ 3",
      "offset": 0.0
    },
    {
      "name": "quarter",
      "dimension": "mass",
      "label": "Quarter",
      "abbreviation": "quarter",
      "aliases": [],
      "definition": "177.80820904 kilogram",
      "offset": 0.0
    },
    {
      "name": "reciprocal_centimeter",
      "dimension": "wavenumber",
      "label": "Reciprocal centimeter",
      "abbreviation": "cm_1",
      "aliases": [
        "cm_1",
        "kayser"
      ],
      "definition": "100.0 / meter",
      "offset": 0.0
    },
    {
      "name": "revolutions_per_minute",
      "dimension": "frequency",
      "label": "Revolutions per minute",
      "abbreviation": "rpm",
      "aliases": [
        "rpm"
      ],
      "definition": "0.016666666666666666 / second",
      "offset": 0.0
    },
    {
      "name": "revolutions_per_second",
      "dimension": "frequency",
      "label": "Revolutions per second",
      "abbreviation": "rps",
      "aliases": [
        "rps"
      ],
      "definition": "1.0 / second",
      "offset": 0.0
    },
    {
      "name": "reyn",
      "dimension": "viscosity",
      "label": "Reyn",
      "abbreviation": "reyn",
      "aliases": [],
      "definition": "6894.7572931683635 kilogram / meter / second",
      "offset": 0.0
    },
    {
      "name": "rhe",
      "dimension": "fluidity",
      "label": "Rhe",
      "abbreviation": "rhe",
      "aliases": [],
      "definition": "10.0 meter * second / kilogram",
      "offset": 0.0
    },
    {
      "name": "rod",
      "dimension": "length",
      "label": "Rod",
      "abbreviation": "rd",
      "aliases": [
        "rd",
        "pole",
        "perch"
      ],
      "definition": "5.029210058420117 meter",
      "offset": 0.0
    },
    {
      "name": "rutherford",
      "dimension": "frequency",
      "label": "Rutherford",
      "abbreviation": "Rd",
      "aliases": [
        "Rd"
      ],
      "definition": "1000000.0 / second",
      "offset": 0.0
    },
    {
      "name": "rydberg",
      "dimension": "energy",
      "label": "Rydberg",
      "abbreviation": "Ry",
      "aliases": [
        "Ry"
      ],
      "definition": "2.179872361103585e-18 kilogram * meter ^ 2 / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "rydberg_constant",
      "dimension": "wavenumber",
      "label": "Rydberg constant",
      "abbreviation": "R_\u221e",
      "aliases": [
        "R_\u221e",
        "R_inf"
      ],
      "definition": "10973731.56816 / meter",
      "offset": 0.0
    },
    {
      "name": "siemens",
      "dimension": "conductance",
      "label": "Siemens",
      "abbreviation": "S",
      "aliases": [
        "S",
        "mho"
      ],
      "definition": "1.0 ampere ^ 2 * second ^ 3 / kilogram / meter ^ 2",
      "offset": 0.0
    },
    {
      "name": "slinch",
      "dimension": "mass",
      "label": "Slinch",
      "abbreviation": "blob",
      "aliases": [
        "blob",
        "slugette"
      ],
      "definition": "175.12683524647645 kilogram",
      "offset": 0.0
    },
    {
      "name": "slug",
      "dimension": "mass",
      "label": "Slug",
      "abbreviation": "slug",
      "aliases": [],
      "definition": "14.59390293720637 kilogram",
      "offset": 0.0
    },
    {
      "name": "speed_of_light",
      "dimension": "speed",
      "label": "Speed of light",
      "abbreviation": "c",
      "aliases": [
        "c",
        "c_0"
      ],
      "definition": "299792458.0 meter / second",
      "offset": 0.0
    },
    {
      "name": "square_foot",
      "dimension": "area",
      "label": "Square foot",
      "abbreviation": "sq_ft",
      "aliases": [
        "sq_ft",
        "square_feet"
      ],
      "definition": "0.09290303999999999 meter ^ 2",
      "offset": 0.0
    },
    {
      "name": "square_inch",
      "dimension": "area",
      "label": "Square inch",
      "abbreviation": "sq_in",
      "aliases": [
        "sq_in",
        "square_inches"
      ],
      "definition": "0.00064516 meter ^ 2",
      "offset": 0.0
    },
    {
      "name": "square_league",
      "dimension": "area",
      "label": "Square league",
      "abbreviation": "square_league",
      "aliases": [],
      "definition": "23309986.232875686 meter ^ 2",
      "offset": 0.0
    },
    {
      "name": "square_mile",
      "dimension": "area",
      "label": "Square mile",
      "abbreviation": "sq_mi",
      "aliases": [
        "sq_mi"
      ],
      "definition": "2589988.110336 meter ^ 2",
      "offset": 0.0
    },
    {
      "name": "square_rod",
      "dimension": "area",
      "label": "Square rod",
      "abbreviation": "sq_rod",
      "aliases": [
        "sq_rod",
        "sq_pole",
        "sq_perch"
      ],
      "definition": "25.29295381171407 meter ^ 2",
      "offset": 0.0
    },
    {
      "name": "square_survey_mile",
      "dimension": "area",
      "label": "Square survey mile",
      "abbreviation": "square_survey_mile",
      "aliases": [
        "section"
      ],
      "definition": "2589998.4703195207 meter ^ 2",
      "offset": 0.0
    },
    {
      "name": "square_yard",
      "dimension": "area",
      "label": "Square yard",
      "abbreviation": "sq_yd",
      "aliases": [
        "sq_yd"
      ],
      "definition": "0.83612736 meter ^ 2",
      "offset": 0.0
    },
    {
      "name": "standard_atmosphere",
      "dimension": "pressure",
      "label": "Standard atmosphere",
      "abbreviation": "atm",
      "aliases": [
        "atm",
        "atmosphere"
      ],
      "definition": "101325.0 kilogram / meter / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "standard_gravity",
      "dimension": "acceleration",
      "label": "Standard gravity",
      "abbreviation": "g_0",
      "aliases": [
        "g_0",
        "g0",
        "g_n",
        "gravity"
      ],
      "definition": "9.80665 meter / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "standard_liter_per_minute",
      "dimension": "power",
      "label": "Standard liter per minute",
      "abbreviation": "slpm",
      "aliases": [
        "slpm",
        "slm"
      ],
      "definition": "1.6887500000000004 kilogram * meter ^ 2 / second ^ 3",
      "offset": 0.0
    },
    {
      "name": "stilb",
      "dimension": "luminance",
      "label": "Stilb",
      "abbreviation": "stilb",
      "aliases": [],
      "definition": "10000.0 candela / meter ^ 2",
      "offset": 0.0
    },
    {
      "name": "stokes",
      "dimension": "kinematic_viscosity",
      "label": "Stokes",
      "abbreviation": "St",
      "aliases": [
        "St"
      ],
      "definition": "0.0001 meter ^ 2 / second",
      "offset": 0.0
    },
    {
      "name": "stone",
      "dimension": "mass",
      "label": "Stone",
      "abbreviation": "stone",
      "aliases": [],
      "definition": "6.35029318 kilogram",
      "offset": 0.0
    },
    {
      "name": "survey_foot",
      "dimension": "length",
      "label": "Survey foot",
      "abbreviation": "sft",
      "aliases": [
        "sft"
      ],
      "definition": "0.3048006096012192 meter",
      "offset": 0.0
    },
    {
      "name": "survey_mile",
      "dimension": "length",
      "label": "Survey mile",
      "abbreviation": "smi",
      "aliases": [
        "smi",
        "us_statute_mile"
      ],
      "definition": "1609.3472186944373 meter",
      "offset": 0.0
    },
    {
      "name": "tesla",
      "dimension": "magnetic_field",
      "label": "Tesla",
      "abbreviation": "T",
      "aliases": [
        "T"
      ],
      "definition": "1.0 kilogram / ampere / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "thomson_cross_section",
      "dimension": "area",
      "label": "Thomson cross section",
      "abbreviation": "\u03c3_e",
      "aliases": [
        "\u03c3_e",
        "sigma_e"
      ],
      "definition": "6.652458732226516e-29 meter ^ 2",
      "offset": 0.0
    },
    {
      "name": "thou",
      "dimension": "length",
      "label": "Thou",
      "abbreviation": "th",
      "aliases": [
        "th",
        "mil_length"
      ],
      "definition": "2.5399999999999997e-05 meter",
      "offset": 0.0
    },
    {
      "name": "ton",
      "dimension": "mass",
      "label": "Ton",
      "abbreviation": "ton",
      "aliases": [
        "short_ton"
      ],
      "definition": "907.1847400000001 kilogram",
      "offset": 0.0
    },
    {
      "name": "torr",
      "dimension": "pressure",
      "label": "Torr",
      "abbreviation": "torr",
      "aliases": [],
      "definition": "133.32236842105263 kilogram / meter / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "troy_ounce",
      "dimension": "mass",
      "label": "Troy ounce",
      "abbreviation": "toz",
      "aliases": [
        "toz",
        "ozt"
      ],
      "definition": "0.03110347680000001 kilogram",
      "offset": 0.0
    },
    {
      "name": "troy_pound",
      "dimension": "mass",
      "label": "Troy pound",
      "abbreviation": "tlb",
      "aliases": [
        "tlb",
        "lbt"
      ],
      "definition": "0.3732417216000001 kilogram",
      "offset": 0.0
    },
    {
      "name": "unified_atomic_mass_unit",
      "dimension": "mass",
      "label": "Unified atomic mass unit",
      "abbreviation": "u",
      "aliases": [
        "u",
        "amu"
      ],
      "definition": "1.6605390666e-27 kilogram",
      "offset": 0.0
    },
    {
      "name": "unit_pole",
      "dimension": "magnetic_flux",
      "label": "Unit pole",
      "abbreviation": "unit_pole",
      "aliases": [],
      "definition": "1.2566370621250598e-07 kilogram * meter ^ 2 / ampere / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "volt",
      "dimension": "electric_potential",
      "label": "Volt",
      "abbreviation": "V",
      "aliases": [
        "V"
      ],
      "definition": "1.0 kilogram * meter ^ 2 / ampere / second ^ 3",
      "offset": 0.0
    },
    {
      "name": "volt_ampere",
      "dimension": "power",
      "label": "Volt ampere",
      "abbreviation": "VA",
      "aliases": [
        "VA"
      ],
      "definition": "1.0 kilogram * meter ^ 2 / second ^ 3",
      "offset": 0.0
    },
    {
      "name": "von_klitzing_constant",
      "dimension": "resistance",
      "label": "Von klitzing constant",
      "abbreviation": "R_K",
      "aliases": [
        "R_K"
      ],
      "definition": "25812.807459304513 kilogram * meter ^ 2 / ampere ^ 2 / second ^ 3",
      "offset": 0.0
    },
    {
      "name": "water",
      "dimension": "density",
      "label": "Water",
      "abbreviation": "H2O",
      "aliases": [
        "H2O",
        "conventional_water"
      ],
      "definition": "999.9999999999999 kilogram / meter ^ 3",
      "offset": 0.0
    },
    {
      "name": "water_39F",
      "dimension": "density",
      "label": "Water 39F",
      "abbreviation": "water_4C",
      "aliases": [
        "water_4C"
      ],
      "definition": "999.9719999999999 kilogram / meter ^ 3",
      "offset": 0.0
    },
    {
      "name": "water_60F",
      "dimension": "density",
      "label": "Water 60F",
      "abbreviation": "water_60F",
      "aliases": [],
      "definition": "999.0009999999999 kilogram / meter ^ 3",
      "offset": 0.0
    },
    {
      "name": "watt",
      "dimension": "power",
      "label": "Watt",
      "abbreviation": "W",
      "aliases": [
        "W"
      ],
      "definition": "1.0 kilogram * meter ^ 2 / second ^ 3",
      "offset": 0.0
    },
    {
      "name": "watt_hour",
      "dimension": "energy",
      "label": "Watt hour",
      "abbreviation": "Wh",
      "aliases": [
        "Wh",
        "watthour"
      ],
      "definition": "3600.0 kilogram * meter ^ 2 / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "weber",
      "dimension": "magnetic_flux",
      "label": "Weber",
      "abbreviation": "Wb",
      "aliases": [
        "Wb"
      ],
      "definition": "1.0 kilogram * meter ^ 2 / ampere / second ^ 2",
      "offset": 0.0
    },
    {
      "name": "yard",
      "dimension": "length",
      "label": "Yard",
      "abbreviation": "yd",
      "aliases": [
        "yd",
        "international_yard"
      ],
      "definition": "0.9144 meter",
      "offset": 0.0
    }
  ],
  "unitPrefixes": {
    "": {
      "name": "",
      "value": 1,
      "scientific": true
    },
    "yocto": {
      "name": "yocto",
      "value": 1e-24,
      "scientific": true
    },
    "y": {
      "name": "y",
      "value": 1e-24,
      "scientific": true
    },
    "zepto": {
      "name": "zepto",
      "value": 1e-21,
      "scientific": true
    },
    "z": {
      "name": "z",
      "value": 1e-21,
      "scientific": true
    },
    "atto": {
      "name": "atto",
      "value": 1e-18,
      "scientific": true
    },
    "a": {
      "name": "a",
      "value": 1e-18,
      "scientific": true
    },
    "femto": {
      "name": "femto",
      "value": 1e-15,
      "scientific": true
    },
    "f": {
      "name": "f",
      "value": 1e-15,
      "scientific": true
    },
    "pico": {
      "name": "pico",
      "value": 1e-12,
      "scientific": true
    },
    "p": {
      "name": "p",
      "value": 1e-12,
      "scientific": true
    },
    "nano": {
      "name": "nano",
      "value": 1e-09,
      "scientific": true
    },
    "n": {
      "name": "n",
      "value": 1e-09,
      "scientific": true
    },
    "micro": {
      "name": "micro",
      "value": 1e-06,
      "scientific": true
    },
    "\u00b5": {
      "name": "\u00b5",
      "value": 1e-06,
      "scientific": true
    },
    "u": {
      "name": "u",
      "value": 1e-06,
      "scientific": true
    },
    "milli": {
      "name": "milli",
      "value": 0.001,
      "scientific": true
    },
    "m": {
      "name": "m",
      "value": 0.001,
      "scientific": true
    },
    "centi": {
      "name": "centi",
      "value": 0.01,
      "scientific": true
    },
    "c": {
      "name": "c",
      "value": 0.01,
      "scientific": true
    },
    "deci": {
      "name": "deci",
      "value": 0.1,
      "scientific": true
    },
    "d": {
      "name": "d",
      "value": 0.1,
      "scientific": true
    },
    "deca": {
      "name": "deca",
      "value": 10.0,
      "scientific": true
    },
    "da": {
      "name": "da",
      "value": 10.0,
      "scientific": true
    },
    "deka": {
      "name": "deka",
      "value": 10.0,
      "scientific": true
    },
    "hecto": {
      "name": "hecto",
      "value": 100.0,
      "scientific": true
    },
    "h": {
      "name": "h",
      "value": 100.0,
      "scientific": true
    },
    "kilo": {
      "name": "kilo",
      "value": 1000.0,
      "scientific": true
    },
    "k": {
      "name": "k",
      "value": 1000.0,
      "scientific": true
    },
    "mega": {
      "name": "mega",
      "value": 1000000.0,
      "scientific": true
    },
    "M": {
      "name": "M",
      "value": 1000000.0,
      "scientific": true
    },
    "giga": {
      "name": "giga",
      "value": 1000000000.0,
      "scientific": true
    },
    "G": {
      "name": "G",
      "value": 1000000000.0,
      "scientific": true
    },
    "tera": {
      "name": "tera",
      "value": 1000000000000.0,
      "scientific": true
    },
    "T": {
      "name": "T",
      "value": 1000000000000.0,
      "scientific": true
    },
    "peta": {
      "name": "peta",
      "value": 1000000000000000.0,
      "scientific": true
    },
    "P": {
      "name": "P",
      "value": 1000000000000000.0,
      "scientific": true
    },
    "exa": {
      "name": "exa",
      "value": 1e+18,
      "scientific": true
    },
    "E": {
      "name": "E",
      "value": 1e+18,
      "scientific": true
    },
    "zetta": {
      "name": "zetta",
      "value": 1e+21,
      "scientific": true
    },
    "Z": {
      "name": "Z",
      "value": 1e+21,
      "scientific": true
    },
    "yotta": {
      "name": "yotta",
      "value": 1e+24,
      "scientific": true
    },
    "Y": {
      "name": "Y",
      "value": 1e+24,
      "scientific": true
    },
    "kibi": {
      "name": "kibi",
      "value": 1024,
      "scientific": true
    },
    "Ki": {
      "name": "Ki",
      "value": 1024,
      "scientific": true
    },
    "mebi": {
      "name": "mebi",
      "value": 1048576,
      "scientific": true
    },
    "Mi": {
      "name": "Mi",
      "value": 1048576,
      "scientific": true
    },
    "gibi": {
      "name": "gibi",
      "value": 1073741824,
      "scientific": true
    },
    "Gi": {
      "name": "Gi",
      "value": 1073741824,
      "scientific": true
    },
    "tebi": {
      "name": "tebi",
      "value": 1099511627776,
      "scientific": true
    },
    "Ti": {
      "name": "Ti",
      "value": 1099511627776,
      "scientific": true
    },
    "pebi": {
      "name": "pebi",
      "value": 1125899906842624,
      "scientific": true
    },
    "Pi": {
      "name": "Pi",
      "value": 1125899906842624,
      "scientific": true
    },
    "exbi": {
      "name": "exbi",
      "value": 1152921504606846976,
      "scientific": true
    },
    "Ei": {
      "name": "Ei",
      "value": 1152921504606846976,
      "scientific": true
    },
    "zebi": {
      "name": "zebi",
      "value": 1180591620717411303424,
      "scientific": true
    },
    "Zi": {
      "name": "Zi",
      "value": 1180591620717411303424,
      "scientific": true
    },
    "yobi": {
      "name": "yobi",
      "value": 1208925819614629174706176,
      "scientific": true
    },
    "Yi": {
      "name": "Yi",
      "value": 1208925819614629174706176,
      "scientific": true
    }
  }
};

