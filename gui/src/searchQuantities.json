{
  "upload_id": {
    "name": "upload_id",
    "description": "The persistent and globally unique identifier for the upload of the entry",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "upload_name": {
    "name": "upload_name",
    "description": "The user provided upload name",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "upload_create_time": {
    "name": "upload_create_time",
    "description": "The date and time when the upload was created in nomad",
    "type": {
      "type_kind": "custom",
      "type_data": "nomad.metainfo.metainfo._Datetime"
    },
    "aggregatable": false
  },
  "entry_id": {
    "name": "entry_id",
    "description": "A persistent and globally unique identifier for the entry",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "entry_name": {
    "name": "entry_name",
    "description": "A brief human readable name for the entry.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true,
    "suggestion": true
  },
  "entry_name.prefix": {
    "name": "entry_name",
    "description": "A brief human readable name for the entry.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": false
  },
  "entry_type": {
    "name": "entry_type",
    "description": "The main schema definition. This is the name of the section used for data.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "calc_id": {
    "name": "calc_id",
    "description": "Legacy field name, use `entry_id` instead.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "entry_create_time": {
    "name": "entry_create_time",
    "description": "The date and time when the entry was created in nomad",
    "type": {
      "type_kind": "custom",
      "type_data": "nomad.metainfo.metainfo._Datetime"
    },
    "aggregatable": false
  },
  "parser_name": {
    "name": "parser_name",
    "description": "The NOMAD parser used for the last processing",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "mainfile": {
    "name": "mainfile",
    "description": "The path to the mainfile from the root directory of the uploaded files",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true,
    "suggestion": true
  },
  "mainfile.path": {
    "name": "mainfile",
    "description": "The path to the mainfile from the root directory of the uploaded files",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": false
  },
  "mainfile_key": {
    "name": "mainfile_key",
    "description": "Key used to differentiate between different *child entries* of an entry.\nFor parent entries and entries that do not have any children, the value should\nbe empty.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "mainfile_key.path": {
    "name": "mainfile_key",
    "description": "Key used to differentiate between different *child entries* of an entry.\nFor parent entries and entries that do not have any children, the value should\nbe empty.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": false
  },
  "files": {
    "name": "files",
    "description": "The paths to the files within the upload that belong to this entry.\nAll files within the same directory as the entry's mainfile are considered the\nauxiliary files that belong to the entry.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [
      "0..*"
    ],
    "aggregatable": true
  },
  "files.path": {
    "name": "files",
    "description": "The paths to the files within the upload that belong to this entry.\nAll files within the same directory as the entry's mainfile are considered the\nauxiliary files that belong to the entry.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [
      "0..*"
    ],
    "aggregatable": false
  },
  "pid": {
    "name": "pid",
    "description": "The unique, sequentially enumerated, integer PID that was used in the legacy\nNOMAD CoE. It allows to resolve URLs of the old NOMAD CoE Repository.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "raw_id": {
    "name": "raw_id",
    "description": "The code specific identifier extracted from the entry's raw files by the parser,\nif supported.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "external_id": {
    "name": "external_id",
    "description": "A user provided external id. Usually the id for an entry in an external database\nwhere the data was imported from.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "published": {
    "name": "published",
    "description": "Indicates if the entry is published",
    "type": {
      "type_kind": "python",
      "type_data": "bool"
    },
    "aggregatable": true
  },
  "publish_time": {
    "name": "publish_time",
    "description": "The date and time when the upload was published in nomad",
    "type": {
      "type_kind": "custom",
      "type_data": "nomad.metainfo.metainfo._Datetime"
    },
    "aggregatable": false
  },
  "with_embargo": {
    "name": "with_embargo",
    "description": "Indicated if this entry is under an embargo",
    "type": {
      "type_kind": "python",
      "type_data": "bool"
    },
    "aggregatable": true
  },
  "processed": {
    "name": "processed",
    "description": "Indicates that the entry is successfully processed.",
    "type": {
      "type_kind": "python",
      "type_data": "bool"
    },
    "aggregatable": true
  },
  "last_processing_time": {
    "name": "last_processing_time",
    "description": "The date and time of the last processing.",
    "type": {
      "type_kind": "custom",
      "type_data": "nomad.metainfo.metainfo._Datetime"
    },
    "aggregatable": false
  },
  "processing_errors": {
    "name": "processing_errors",
    "description": "Errors that occurred during processing",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [
      "*"
    ],
    "aggregatable": true
  },
  "nomad_version": {
    "name": "nomad_version",
    "description": "The NOMAD version used for the last processing",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "nomad_commit": {
    "name": "nomad_commit",
    "description": "The NOMAD commit used for the last processing",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "comment": {
    "name": "comment",
    "description": "A user provided comment for this entry",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": false
  },
  "references": {
    "name": "references",
    "description": "User provided references (URLs) for this entry",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [
      "0..*"
    ],
    "aggregatable": true
  },
  "external_db": {
    "name": "external_db",
    "description": "The repository or external database where the original data resides",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "The Perovskite Database Project",
        "EELS Data Base",
        "Materials Project",
        "AFLOW",
        "OQMD",
        "Kyoto Phonopy Database"
      ]
    },
    "aggregatable": true
  },
  "origin": {
    "name": "origin",
    "description": "A short human readable description of the entries origin. Usually it is the\nhandle of an external database/repository or the name of the main author.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "main_author.name": {
    "name": "name",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true,
    "suggestion": true
  },
  "main_author.name.text": {
    "name": "name",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": false
  },
  "main_author.user_id": {
    "name": "user_id",
    "description": "The unique, persistent keycloak UUID",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "main_author": {
    "name": "main_author",
    "description": "The main author of the entry",
    "type": {
      "type_kind": "User",
      "type_data": "User"
    },
    "aggregatable": false
  },
  "authors.name": {
    "name": "name",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true,
    "suggestion": true
  },
  "authors.name.text": {
    "name": "name",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": false
  },
  "authors": {
    "name": "authors",
    "description": "All authors (main author and co-authors)",
    "type": {
      "type_kind": "Author",
      "type_data": "Author"
    },
    "shape": [
      "0..*"
    ],
    "aggregatable": false
  },
  "writers.name": {
    "name": "name",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true,
    "suggestion": true
  },
  "writers.name.text": {
    "name": "name",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": false
  },
  "writers.user_id": {
    "name": "user_id",
    "description": "The unique, persistent keycloak UUID",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "writers": {
    "name": "writers",
    "description": "All writers (main author, upload coauthors)",
    "type": {
      "type_kind": "User",
      "type_data": "User"
    },
    "shape": [
      "0..*"
    ],
    "aggregatable": false
  },
  "viewers.name": {
    "name": "name",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true,
    "suggestion": true
  },
  "viewers.name.text": {
    "name": "name",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": false
  },
  "viewers.user_id": {
    "name": "user_id",
    "description": "The unique, persistent keycloak UUID",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "viewers": {
    "name": "viewers",
    "description": "All viewers (main author, upload coauthors, and reviewers)",
    "type": {
      "type_kind": "User",
      "type_data": "User"
    },
    "shape": [
      "0..*"
    ],
    "aggregatable": false
  },
  "datasets.dataset_id": {
    "name": "dataset_id",
    "description": "The unique identifier for this dataset as a string. It should be\na randomly generated UUID, similar to other nomad ids.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "datasets.dataset_name": {
    "name": "dataset_name",
    "description": "The human-readable name of the dataset as string. The dataset name must be\nunique for the user.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true,
    "suggestion": true
  },
  "datasets.doi": {
    "name": "doi",
    "description": "The optional Document Object Identifier (DOI) associated with this dataset.\nNomad can register DOIs that link back to the respective representation of\nthe dataset in the nomad UI. This quantity holds the string representation of\nthis DOI. There is only one per dataset. The DOI is just the DOI name, not its\nfull URL, e.g. \"10.17172/nomad/2019.10.29-1\".",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "datasets.dataset_create_time": {
    "name": "dataset_create_time",
    "description": "The date when the dataset was first created.",
    "type": {
      "type_kind": "custom",
      "type_data": "nomad.metainfo.metainfo._Datetime"
    },
    "aggregatable": false
  },
  "datasets.dataset_modified_time": {
    "name": "dataset_modified_time",
    "description": "The date when the dataset was last modified. An owned dataset\ncan only be extended after a DOI was assigned. A foreign dataset cannot be changed\nonce a DOI was assigned.",
    "type": {
      "type_kind": "custom",
      "type_data": "nomad.metainfo.metainfo._Datetime"
    },
    "aggregatable": false
  },
  "datasets.dataset_type": {
    "name": "dataset_type",
    "description": "The type determined if a dataset is owned, i.e. was created by\nthe authors of the contained entries; or if a dataset is foreign,\ni.e. it was created by someone not necessarily related to the entries.",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "owned",
        "foreign"
      ]
    },
    "aggregatable": true
  },
  "datasets": {
    "name": "datasets",
    "description": "A list of user curated datasets this entry belongs to.",
    "type": {
      "type_kind": "reference",
      "type_data": "/packages/14/section_definitions/0"
    },
    "shape": [
      "0..*"
    ],
    "aggregatable": false
  },
  "domain": {
    "name": "domain",
    "description": "The material science domain",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "dft",
        "ems"
      ]
    },
    "aggregatable": true
  },
  "n_quantities": {
    "name": "n_quantities",
    "description": "Number of metainfo quantities parsed from the entry.",
    "type": {
      "type_kind": "python",
      "type_data": "int"
    },
    "aggregatable": false
  },
  "quantities": {
    "name": "quantities",
    "description": "All quantities that are used by this entry.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [
      "0..*"
    ],
    "aggregatable": true
  },
  "quantities.path": {
    "name": "quantities",
    "description": "All quantities that are used by this entry.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [
      "0..*"
    ],
    "aggregatable": false
  },
  "sections": {
    "name": "sections",
    "description": "All sections that are present in this entry. This field is deprecated and will be removed.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [
      "*"
    ],
    "aggregatable": true
  },
  "optimade.elements": {
    "name": "elements",
    "description": "Names of the different elements present in the structure.",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "X",
        "H",
        "He",
        "Li",
        "Be",
        "B",
        "C",
        "N",
        "O",
        "F",
        "Ne",
        "Na",
        "Mg",
        "Al",
        "Si",
        "P",
        "S",
        "Cl",
        "Ar",
        "K",
        "Ca",
        "Sc",
        "Ti",
        "V",
        "Cr",
        "Mn",
        "Fe",
        "Co",
        "Ni",
        "Cu",
        "Zn",
        "Ga",
        "Ge",
        "As",
        "Se",
        "Br",
        "Kr",
        "Rb",
        "Sr",
        "Y",
        "Zr",
        "Nb",
        "Mo",
        "Tc",
        "Ru",
        "Rh",
        "Pd",
        "Ag",
        "Cd",
        "In",
        "Sn",
        "Sb",
        "Te",
        "I",
        "Xe",
        "Cs",
        "Ba",
        "La",
        "Ce",
        "Pr",
        "Nd",
        "Pm",
        "Sm",
        "Eu",
        "Gd",
        "Tb",
        "Dy",
        "Ho",
        "Er",
        "Tm",
        "Yb",
        "Lu",
        "Hf",
        "Ta",
        "W",
        "Re",
        "Os",
        "Ir",
        "Pt",
        "Au",
        "Hg",
        "Tl",
        "Pb",
        "Bi",
        "Po",
        "At",
        "Rn",
        "Fr",
        "Ra",
        "Ac",
        "Th",
        "Pa",
        "U",
        "Np",
        "Pu",
        "Am",
        "Cm",
        "Bk",
        "Cf",
        "Es",
        "Fm",
        "Md",
        "No",
        "Lr",
        "Rf",
        "Db",
        "Sg",
        "Bh",
        "Hs",
        "Mt",
        "Ds",
        "Rg",
        "Cn",
        "Nh",
        "Fl",
        "Mc",
        "Lv",
        "Ts",
        "Og"
      ]
    },
    "shape": [
      "1..*"
    ],
    "aggregatable": true
  },
  "optimade.nelements": {
    "name": "nelements",
    "description": "Number of different elements in the structure as an integer.",
    "type": {
      "type_kind": "python",
      "type_data": "int"
    },
    "aggregatable": false
  },
  "optimade.elements_ratios": {
    "name": "elements_ratios",
    "description": "Relative proportions of different elements in the structure.",
    "type": {
      "type_kind": "python",
      "type_data": "float"
    },
    "shape": [
      "nelements"
    ],
    "aggregatable": false
  },
  "optimade.chemical_formula_descriptive": {
    "name": "chemical_formula_descriptive",
    "description": "The chemical formula for a structure as a string in a form chosen by the API\nimplementation.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "optimade.chemical_formula_reduced": {
    "name": "chemical_formula_reduced",
    "description": "The reduced chemical formula for a structure as a string with element symbols and\ninteger chemical proportion numbers. The proportion number MUST be omitted if it is 1.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "optimade.chemical_formula_hill": {
    "name": "chemical_formula_hill",
    "description": "The chemical formula for a structure in Hill form with element symbols followed by\ninteger chemical proportion numbers. The proportion number MUST be omitted if it is 1.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "optimade.chemical_formula_anonymous": {
    "name": "chemical_formula_anonymous",
    "description": "The anonymous formula is the chemical_formula_reduced, but where the elements are\ninstead first ordered by their chemical proportion number, and then, in order left to\nright, replaced by anonymous symbols A, B, C, ..., Z, Aa, Ba, ..., Za, Ab, Bb, ... and\nso on.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "optimade.nperiodic_dimensions": {
    "name": "nperiodic_dimensions",
    "description": "An integer specifying the number of periodic dimensions in the structure, equivalent\nto the number of non-zero entries in dimension_types.",
    "type": {
      "type_kind": "python",
      "type_data": "int"
    },
    "aggregatable": false
  },
  "optimade.nsites": {
    "name": "nsites",
    "description": "An integer specifying the length of the cartesian_site_positions property.",
    "type": {
      "type_kind": "python",
      "type_data": "int"
    },
    "aggregatable": false
  },
  "optimade.species_at_sites": {
    "name": "species_at_sites",
    "description": "Name of the species at each site (where values for sites are specified with the same\norder of the cartesian_site_positions property). The properties of the species are\nfound in the species property.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [
      "nsites"
    ],
    "aggregatable": true
  },
  "optimade.structure_features": {
    "name": "structure_features",
    "description": "A list of strings that flag which special features are used by the structure.\n\n- disorder: This flag MUST be present if any one entry in the species list has a\nchemical_symbols list that is longer than 1 element.\n- unknown_positions: This flag MUST be present if at least one component of the\ncartesian_site_positions list of lists has value null.\n- assemblies: This flag MUST be present if the assemblies list is present.",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "disorder",
        "unknown_positions",
        "assemblies"
      ]
    },
    "shape": [
      "1..*"
    ],
    "aggregatable": true
  },
  "section_defs.definition_qualified_name": {
    "name": "definition_qualified_name",
    "description": "The qualified name of the compatible section.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "section_defs.definition_id": {
    "name": "definition_id",
    "description": "The definition id of the compatible section.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "section_defs.used_directly": {
    "name": "used_directly",
    "description": "If the compatible section is directly used as base section.",
    "type": {
      "type_kind": "python",
      "type_data": "bool"
    },
    "aggregatable": true
  },
  "entry_references.target_reference": {
    "name": "target_reference",
    "description": "The full url like reference of the the target.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "entry_references.target_entry_id": {
    "name": "target_entry_id",
    "description": "The id of the entry containing the target.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "entry_references.target_name": {
    "name": "target_name",
    "description": "The name of the target quantity/section.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "entry_references.target_path": {
    "name": "target_path",
    "description": "The path of the target quantity/section in its archive.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "entry_references.source_name": {
    "name": "source_name",
    "description": "The name of the source (self) quantity/section in its archive.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "entry_references.source_path": {
    "name": "source_path",
    "description": "The path of the source (self) quantity/section in its archive.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "entry_references.source_quantity": {
    "name": "source_quantity",
    "description": "A reference to the quantity definition that defines the reference",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "searchable_quantities.quantity_name": {
    "name": "quantity_name",
    "description": "The name of the quantity holding the value.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "searchable_quantities.section_definition": {
    "name": "section_definition",
    "description": "A reference to the section definition for the section that holds the quantity that holds the value.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "searchable_quantities.path": {
    "name": "path",
    "description": "The path to the quantity holding the value.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "searchable_quantities.keyword_value": {
    "name": "keyword_value",
    "description": "The value mapped as an ES keyword field.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "searchable_quantities.text_value": {
    "name": "text_value",
    "description": "The value mapped as an ES text field.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": false
  },
  "searchable_quantities.long_value": {
    "name": "long_value",
    "description": "The value mapped as an ES long number field.",
    "type": {
      "type_kind": "python",
      "type_data": "int"
    },
    "aggregatable": false
  },
  "searchable_quantities.double_value": {
    "name": "double_value",
    "description": "The value mapped as an ES double number field.",
    "type": {
      "type_kind": "python",
      "type_data": "float"
    },
    "aggregatable": false
  },
  "searchable_quantities.date_value": {
    "name": "date_value",
    "description": "The value mapped as an ES date field.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": false
  },
  "results.material.material_id": {
    "name": "material_id",
    "description": "A fixed length, unique material identifier in the form of a hash\ndigest.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "results.material.material_name": {
    "name": "material_name",
    "description": "Meaningful names for this a material if any can be assigned.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.structural_type": {
    "name": "structural_type",
    "description": "Structural class determined from the atomic structure.",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "bulk",
        "surface",
        "2D",
        "1D",
        "molecule / cluster",
        "atom",
        "unavailable",
        "not processed"
      ]
    },
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.functional_type": {
    "name": "functional_type",
    "description": "Classification based on the functional properties.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [
      "0..*"
    ],
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.compound_type": {
    "name": "compound_type",
    "description": "Classification based on the chemical formula.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [
      "0..*"
    ],
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.elements": {
    "name": "elements",
    "description": "Names of the different elements present in the structure.",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "X",
        "H",
        "He",
        "Li",
        "Be",
        "B",
        "C",
        "N",
        "O",
        "F",
        "Ne",
        "Na",
        "Mg",
        "Al",
        "Si",
        "P",
        "S",
        "Cl",
        "Ar",
        "K",
        "Ca",
        "Sc",
        "Ti",
        "V",
        "Cr",
        "Mn",
        "Fe",
        "Co",
        "Ni",
        "Cu",
        "Zn",
        "Ga",
        "Ge",
        "As",
        "Se",
        "Br",
        "Kr",
        "Rb",
        "Sr",
        "Y",
        "Zr",
        "Nb",
        "Mo",
        "Tc",
        "Ru",
        "Rh",
        "Pd",
        "Ag",
        "Cd",
        "In",
        "Sn",
        "Sb",
        "Te",
        "I",
        "Xe",
        "Cs",
        "Ba",
        "La",
        "Ce",
        "Pr",
        "Nd",
        "Pm",
        "Sm",
        "Eu",
        "Gd",
        "Tb",
        "Dy",
        "Ho",
        "Er",
        "Tm",
        "Yb",
        "Lu",
        "Hf",
        "Ta",
        "W",
        "Re",
        "Os",
        "Ir",
        "Pt",
        "Au",
        "Hg",
        "Tl",
        "Pb",
        "Bi",
        "Po",
        "At",
        "Rn",
        "Fr",
        "Ra",
        "Ac",
        "Th",
        "Pa",
        "U",
        "Np",
        "Pu",
        "Am",
        "Cm",
        "Bk",
        "Cf",
        "Es",
        "Fm",
        "Md",
        "No",
        "Lr",
        "Rf",
        "Db",
        "Sg",
        "Bh",
        "Hs",
        "Mt",
        "Ds",
        "Rg",
        "Cn",
        "Nh",
        "Fl",
        "Mc",
        "Lv",
        "Ts",
        "Og"
      ]
    },
    "shape": [
      "0..*"
    ],
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.n_elements": {
    "name": "n_elements",
    "description": "Number of different elements in the structure as an integer.",
    "type": {
      "type_kind": "python",
      "type_data": "int"
    },
    "aggregatable": false
  },
  "results.material.elements_exclusive": {
    "name": "elements_exclusive",
    "description": "String containing the chemical elements in alphabetical order and\nseparated by a single whitespace. This quantity can be used for\nexclusive element searches where you want to find entries/materials\nwith only certain given elements.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "results.material.chemical_formula_descriptive": {
    "name": "chemical_formula_descriptive",
    "description": "The chemical formula for a structure as a string in a form chosen by the API\nimplementation.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.chemical_formula_reduced": {
    "name": "chemical_formula_reduced",
    "description": "Alphabetically sorted chemical formula with reduced integer chemical\nproportion numbers. The proportion number is omitted if it is 1.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.chemical_formula_hill": {
    "name": "chemical_formula_hill",
    "description": "The chemical formula for a structure in Hill form with element\nsymbols followed by non-reduced integer chemical proportion numbers.\nThe proportion number is omitted if it is 1.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.chemical_formula_iupac": {
    "name": "chemical_formula_iupac",
    "description": "Formula where the elements are ordered using a formal list loosely\nbased on electronegativity as defined in the IUPAC nomenclature of\ninorganic chemistry (2005). Contains reduced integer chemical\nproportion numbers where the proportion number is omitted if it is\n1.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.chemical_formula_anonymous": {
    "name": "chemical_formula_anonymous",
    "description": "Formula with the elements ordered by their reduced integer chemical\nproportion number, and the chemical species replaced by\nalphabetically ordered letters. The proportion number is omitted if\nit is 1. E.g.  H2O becomes A2B and H2O2 becomes AB. The letters are\ndrawn from the english alphabet that may be extended by increasing\nthe number of letters, e.g. A, B, ..., Z, Aa, Ab and so on. This\ndefinition is in line with the similarly named OPTIMADE definition.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.chemical_formula_reduced_fragments": {
    "name": "chemical_formula_reduced_fragments",
    "description": "Alphabetically sorted chemical formula with reduced integer chemical\nproportion numbers. The proportion number is omitted if it is 1.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [
      "*"
    ],
    "aggregatable": false
  },
  "results.material.symmetry.bravais_lattice": {
    "name": "bravais_lattice",
    "description": "Identifier for the Bravais lattice in Pearson notation. The first lowercase letter\nidentifies the crystal family and can be one of the following: a (triclinic), b\n(monoclinic), o (orthorhombic), t (tetragonal), h (hexagonal) or c (cubic). The\nsecond uppercase letter identifies the centring and can be one of the following: P\n(primitive), S (face centred), I (body centred), R (rhombohedral centring) or F\n(all faces centred).",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "aP",
        "mP",
        "mS",
        "oP",
        "oS",
        "oF",
        "oI",
        "tP",
        "tI",
        "hP",
        "hR",
        "cP",
        "cF",
        "cI"
      ]
    },
    "shape": [],
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.symmetry.crystal_system": {
    "name": "crystal_system",
    "description": "Name of the crystal system.",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "triclinic",
        "monoclinic",
        "orthorhombic",
        "tetragonal",
        "trigonal",
        "hexagonal",
        "cubic"
      ]
    },
    "shape": [],
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.symmetry.hall_number": {
    "name": "hall_number",
    "description": "The Hall number for this system.",
    "type": {
      "type_kind": "numpy",
      "type_data": "int32"
    },
    "shape": [],
    "aggregatable": false
  },
  "results.material.symmetry.hall_symbol": {
    "name": "hall_symbol",
    "description": "The Hall symbol for this system.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [],
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.symmetry.point_group": {
    "name": "point_group",
    "description": "Symbol of the crystallographic point group in the Hermann-Mauguin notation.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [],
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.symmetry.space_group_number": {
    "name": "space_group_number",
    "description": "Specifies the International Union of Crystallography (IUC) number of the 3D space\ngroup of this system.",
    "type": {
      "type_kind": "numpy",
      "type_data": "int32"
    },
    "shape": [],
    "aggregatable": false
  },
  "results.material.symmetry.space_group_symbol": {
    "name": "space_group_symbol",
    "description": "The International Union of Crystallography (IUC) short symbol of the 3D\nspace group of this system.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [],
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.symmetry.prototype_formula": {
    "name": "prototype_formula",
    "description": "The formula of the prototypical material for this structure.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "results.material.symmetry.prototype_aflow_id": {
    "name": "prototype_aflow_id",
    "description": "The identifier of this structure in the AFLOW encyclopedia of\ncrystallographic prototypes:\nhttp://www.aflowlib.org/prototype-encyclopedia/index.html",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.symmetry.structure_name": {
    "name": "structure_name",
    "description": "A common name for this structure, e.g. fcc, bcc.",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "4-member ring",
        "Heusler",
        "bcc",
        "bct",
        "bct5",
        "clathrate",
        "cuprite",
        "diamond",
        "fcc",
        "fct",
        "half-Heusler",
        "hcp",
        "perovskite",
        "rock salt",
        "simple cubic",
        "wurtzite",
        "zincblende"
      ]
    },
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.symmetry.strukturbericht_designation": {
    "name": "strukturbericht_designation",
    "description": "Classification of the material according to the historically grown\n'strukturbericht'.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.topology.system_id": {
    "name": "system_id",
    "description": "That path of this section within the metainfo that is used as a unique\nidentifier.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "results.material.topology.label": {
    "name": "label",
    "description": "Descriptive label that identifies this structural part.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "results.material.topology.method": {
    "name": "method",
    "description": "The method used for identifying this system.",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "parser",
        "user",
        "matid"
      ]
    },
    "aggregatable": true
  },
  "results.material.topology.description": {
    "name": "description",
    "description": "A short description about this part of the topology.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "results.material.topology.material_id": {
    "name": "material_id",
    "description": "A fixed length, unique material identifier in the form of a hash\ndigest.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "results.material.topology.material_name": {
    "name": "material_name",
    "description": "Meaningful names for this a material if any can be assigned.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.topology.structural_type": {
    "name": "structural_type",
    "description": "Structural class determined from the atomic structure.",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "bulk",
        "surface",
        "2D",
        "1D",
        "molecule / cluster",
        "atom",
        "unavailable",
        "not processed",
        "group",
        "molecule",
        "monomer"
      ]
    },
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.topology.functional_type": {
    "name": "functional_type",
    "description": "Classification based on the functional properties.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [
      "0..*"
    ],
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.topology.compound_type": {
    "name": "compound_type",
    "description": "Classification based on the chemical formula.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [
      "0..*"
    ],
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.topology.elements": {
    "name": "elements",
    "description": "Names of the different elements present in the structure.",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "X",
        "H",
        "He",
        "Li",
        "Be",
        "B",
        "C",
        "N",
        "O",
        "F",
        "Ne",
        "Na",
        "Mg",
        "Al",
        "Si",
        "P",
        "S",
        "Cl",
        "Ar",
        "K",
        "Ca",
        "Sc",
        "Ti",
        "V",
        "Cr",
        "Mn",
        "Fe",
        "Co",
        "Ni",
        "Cu",
        "Zn",
        "Ga",
        "Ge",
        "As",
        "Se",
        "Br",
        "Kr",
        "Rb",
        "Sr",
        "Y",
        "Zr",
        "Nb",
        "Mo",
        "Tc",
        "Ru",
        "Rh",
        "Pd",
        "Ag",
        "Cd",
        "In",
        "Sn",
        "Sb",
        "Te",
        "I",
        "Xe",
        "Cs",
        "Ba",
        "La",
        "Ce",
        "Pr",
        "Nd",
        "Pm",
        "Sm",
        "Eu",
        "Gd",
        "Tb",
        "Dy",
        "Ho",
        "Er",
        "Tm",
        "Yb",
        "Lu",
        "Hf",
        "Ta",
        "W",
        "Re",
        "Os",
        "Ir",
        "Pt",
        "Au",
        "Hg",
        "Tl",
        "Pb",
        "Bi",
        "Po",
        "At",
        "Rn",
        "Fr",
        "Ra",
        "Ac",
        "Th",
        "Pa",
        "U",
        "Np",
        "Pu",
        "Am",
        "Cm",
        "Bk",
        "Cf",
        "Es",
        "Fm",
        "Md",
        "No",
        "Lr",
        "Rf",
        "Db",
        "Sg",
        "Bh",
        "Hs",
        "Mt",
        "Ds",
        "Rg",
        "Cn",
        "Nh",
        "Fl",
        "Mc",
        "Lv",
        "Ts",
        "Og"
      ]
    },
    "shape": [
      "0..*"
    ],
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.topology.n_elements": {
    "name": "n_elements",
    "description": "Number of different elements in the structure as an integer.",
    "type": {
      "type_kind": "python",
      "type_data": "int"
    },
    "aggregatable": false
  },
  "results.material.topology.elements_exclusive": {
    "name": "elements_exclusive",
    "description": "String containing the chemical elements in alphabetical order and\nseparated by a single whitespace. This quantity can be used for\nexclusive element searches where you want to find entries/materials\nwith only certain given elements.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "results.material.topology.chemical_formula_descriptive": {
    "name": "chemical_formula_descriptive",
    "description": "The chemical formula for a structure as a string in a form chosen by the API\nimplementation.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.topology.chemical_formula_reduced": {
    "name": "chemical_formula_reduced",
    "description": "Alphabetically sorted chemical formula with reduced integer chemical\nproportion numbers. The proportion number is omitted if it is 1.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.topology.chemical_formula_hill": {
    "name": "chemical_formula_hill",
    "description": "The chemical formula for a structure in Hill form with element\nsymbols followed by non-reduced integer chemical proportion numbers.\nThe proportion number is omitted if it is 1.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.topology.chemical_formula_iupac": {
    "name": "chemical_formula_iupac",
    "description": "Formula where the elements are ordered using a formal list loosely\nbased on electronegativity as defined in the IUPAC nomenclature of\ninorganic chemistry (2005). Contains reduced integer chemical\nproportion numbers where the proportion number is omitted if it is\n1.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.topology.chemical_formula_anonymous": {
    "name": "chemical_formula_anonymous",
    "description": "Formula with the elements ordered by their reduced integer chemical\nproportion number, and the chemical species replaced by\nalphabetically ordered letters. The proportion number is omitted if\nit is 1. E.g.  H2O becomes A2B and H2O2 becomes AB. The letters are\ndrawn from the english alphabet that may be extended by increasing\nthe number of letters, e.g. A, B, ..., Z, Aa, Ab and so on. This\ndefinition is in line with the similarly named OPTIMADE definition.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.topology.chemical_formula_reduced_fragments": {
    "name": "chemical_formula_reduced_fragments",
    "description": "Alphabetically sorted chemical formula with reduced integer chemical\nproportion numbers. The proportion number is omitted if it is 1.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [
      "*"
    ],
    "aggregatable": false
  },
  "results.material.topology.parent_system": {
    "name": "parent_system",
    "description": "Reference to the parent system.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "results.material.topology.child_systems": {
    "name": "child_systems",
    "description": "References to the child systems.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [
      "*"
    ],
    "aggregatable": true
  },
  "results.material.topology.n_atoms": {
    "name": "n_atoms",
    "description": "The total number of species (atoms, particles) in the system.",
    "type": {
      "type_kind": "python",
      "type_data": "int"
    },
    "shape": [],
    "aggregatable": false
  },
  "results.material.topology.system_relation.type": {
    "name": "type",
    "description": "The type of relation.",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "subsystem",
        "idealization"
      ]
    },
    "aggregatable": true
  },
  "results.material.topology.cell.a": {
    "name": "a",
    "description": "Length of the first basis vector.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "meter",
    "aggregatable": false
  },
  "results.material.topology.cell.b": {
    "name": "b",
    "description": "Length of the second basis vector.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "meter",
    "aggregatable": false
  },
  "results.material.topology.cell.c": {
    "name": "c",
    "description": "Length of the third basis vector.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "meter",
    "aggregatable": false
  },
  "results.material.topology.cell.alpha": {
    "name": "alpha",
    "description": "Angle between second and third basis vector.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "radian",
    "aggregatable": false
  },
  "results.material.topology.cell.beta": {
    "name": "beta",
    "description": "Angle between first and third basis vector.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "radian",
    "aggregatable": false
  },
  "results.material.topology.cell.gamma": {
    "name": "gamma",
    "description": "Angle between first and second basis vector.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "radian",
    "aggregatable": false
  },
  "results.material.topology.cell.volume": {
    "name": "volume",
    "description": "Volume of the cell.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "meter ** 3",
    "aggregatable": false
  },
  "results.material.topology.cell.atomic_density": {
    "name": "atomic_density",
    "description": "Atomic density of the material (atoms/volume).'",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "1 / meter ** 3",
    "aggregatable": false
  },
  "results.material.topology.cell.mass_density": {
    "name": "mass_density",
    "description": "Mass density of the material.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "kilogram / meter ** 3",
    "aggregatable": false
  },
  "results.material.topology.symmetry.bravais_lattice": {
    "name": "bravais_lattice",
    "description": "Identifier for the Bravais lattice in Pearson notation. The first lowercase letter\nidentifies the crystal family and can be one of the following: a (triclinic), b\n(monoclinic), o (orthorhombic), t (tetragonal), h (hexagonal) or c (cubic). The\nsecond uppercase letter identifies the centring and can be one of the following: P\n(primitive), S (face centred), I (body centred), R (rhombohedral centring) or F\n(all faces centred).",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "aP",
        "mP",
        "mS",
        "oP",
        "oS",
        "oF",
        "oI",
        "tP",
        "tI",
        "hP",
        "hR",
        "cP",
        "cF",
        "cI"
      ]
    },
    "shape": [],
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.topology.symmetry.crystal_system": {
    "name": "crystal_system",
    "description": "Name of the crystal system.",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "triclinic",
        "monoclinic",
        "orthorhombic",
        "tetragonal",
        "trigonal",
        "hexagonal",
        "cubic"
      ]
    },
    "shape": [],
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.topology.symmetry.hall_number": {
    "name": "hall_number",
    "description": "The Hall number for this system.",
    "type": {
      "type_kind": "numpy",
      "type_data": "int32"
    },
    "shape": [],
    "aggregatable": false
  },
  "results.material.topology.symmetry.hall_symbol": {
    "name": "hall_symbol",
    "description": "The Hall symbol for this system.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [],
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.topology.symmetry.point_group": {
    "name": "point_group",
    "description": "Symbol of the crystallographic point group in the Hermann-Mauguin notation.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [],
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.topology.symmetry.space_group_number": {
    "name": "space_group_number",
    "description": "Specifies the International Union of Crystallography (IUC) number of the 3D space\ngroup of this system.",
    "type": {
      "type_kind": "numpy",
      "type_data": "int32"
    },
    "shape": [],
    "aggregatable": false
  },
  "results.material.topology.symmetry.space_group_symbol": {
    "name": "space_group_symbol",
    "description": "The International Union of Crystallography (IUC) short symbol of the 3D\nspace group of this system.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [],
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.topology.symmetry.strukturbericht_designation": {
    "name": "strukturbericht_designation",
    "description": "Classification of the material according to the historically grown\n'strukturbericht'.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.topology.prototype.aflow_id": {
    "name": "aflow_id",
    "description": "AFLOW id of the prototype (see\nhttp://aflowlib.org/CrystalDatabase/prototype_index.html) identified on the basis\nof the space_group and normalized_wyckoff.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [],
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.topology.prototype.name": {
    "name": "name",
    "description": "A common name for this prototypical structure, e.g. fcc, bcc.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true,
    "suggestion": true
  },
  "results.material.topology.prototype.formula": {
    "name": "formula",
    "description": "The formula of the prototypical material for this structure.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "results.method.method_id": {
    "name": "method_id",
    "description": "Identifier for the used method. Only available for a subset of entries\nfor which the methodology has been identified with precision.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true
  },
  "results.method.method_name": {
    "name": "method_name",
    "description": "Common name for the used method.",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "DFT",
        "Projection",
        "GW",
        "DMFT",
        "CoreHole",
        "BSE",
        "EELS",
        "XPS",
        "unavailable"
      ]
    },
    "aggregatable": true,
    "suggestion": true
  },
  "results.method.workflow_name": {
    "name": "workflow_name",
    "description": "The workflow type.",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "GW",
        "single_point",
        "geometry_optimization",
        "phonon",
        "elastic",
        "molecular_dynamics",
        "debye_model",
        "equation_of_state",
        "nudged_elastic_band",
        "convex_hull",
        "adsorption",
        "magnetic_ordering",
        "raman",
        "interface",
        "thermodynamics"
      ]
    },
    "shape": [],
    "aggregatable": true,
    "suggestion": true
  },
  "results.method.simulation.program_name": {
    "name": "program_name",
    "description": "The name of the used program.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true,
    "suggestion": true
  },
  "results.method.simulation.program_version": {
    "name": "program_version",
    "description": "The version of the used program.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true,
    "suggestion": true
  },
  "results.method.simulation.dft.basis_set_type": {
    "name": "basis_set_type",
    "description": "The used basis set functions.",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "(L)APW+lo",
        "gaussians",
        "numeric AOs",
        "plane waves",
        "psinc functions",
        "real-space grid",
        "unavailable",
        "not processed"
      ]
    },
    "aggregatable": true,
    "suggestion": true
  },
  "results.method.simulation.dft.basis_set_name": {
    "name": "basis_set_name",
    "description": "Identifies the basis set.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [],
    "aggregatable": true,
    "suggestion": true
  },
  "results.method.simulation.dft.core_electron_treatment": {
    "name": "core_electron_treatment",
    "description": "How the core electrons are described.",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "full all electron",
        "all electron frozen core",
        "pseudopotential",
        "unavailable"
      ]
    },
    "aggregatable": true,
    "suggestion": true
  },
  "results.method.simulation.dft.spin_polarized": {
    "name": "spin_polarized",
    "description": "Whether the calculation is spin-polarized.",
    "type": {
      "type_kind": "python",
      "type_data": "bool"
    },
    "aggregatable": true
  },
  "results.method.simulation.dft.scf_threshold_energy_change": {
    "name": "scf_threshold_energy_change",
    "description": "Specifies the threshold for the total energy change between two subsequent\nself-consistent field (SCF) iterations. The SCF is considered converged when the\ntotal-energy change between two SCF cycles is below the threshold (possibly in\ncombination with other criteria).",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "joule",
    "shape": [],
    "aggregatable": false
  },
  "results.method.simulation.dft.van_der_Waals_method": {
    "name": "van_der_Waals_method",
    "description": "The used van der Waals method.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [],
    "aggregatable": true,
    "suggestion": true
  },
  "results.method.simulation.dft.relativity_method": {
    "name": "relativity_method",
    "description": "Describes the relativistic treatment used for the calculation of the final energy\nand related quantities. If skipped or empty, no relativistic treatment is applied.",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "scalar_relativistic",
        "pseudo_scalar_relativistic",
        "scalar_relativistic_atomic_ZORA"
      ]
    },
    "shape": [],
    "aggregatable": true,
    "suggestion": true
  },
  "results.method.simulation.dft.smearing_kind": {
    "name": "smearing_kind",
    "description": "Specifies the kind of smearing on the electron occupation used to calculate the\nfree energy (see energy_free)\n\nValid values are:\n\n| Smearing kind             | Description                       |\n\n| ------------------------- | --------------------------------- |\n\n| `\"empty\"`                 | No smearing is applied            |\n\n| `\"gaussian\"`              | Gaussian smearing                 |\n\n| `\"fermi\"`                 | Fermi smearing                    |\n\n| `\"marzari-vanderbilt\"`    | Marzari-Vanderbilt smearing       |\n\n| `\"methfessel-paxton\"`     | Methfessel-Paxton smearing        |\n\n| `\"tetrahedra\"`            | Interpolation of state energies and occupations\n(ignores smearing_width) |",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [],
    "aggregatable": true,
    "suggestion": true
  },
  "results.method.simulation.dft.smearing_width": {
    "name": "smearing_width",
    "description": "Specifies the width of the smearing in energy for the electron occupation used to\ncalculate the free energy (see energy_free).\n\n*NOTE:* Not all methods specified in smearing_kind uses this value.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "shape": [],
    "aggregatable": false
  },
  "results.method.simulation.dft.xc_functional_type": {
    "name": "xc_functional_type",
    "description": "The libXC based xc functional classification used in the simulation.",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "GGA",
        "HF",
        "OEP",
        "hybrid",
        "meta-GGA",
        "vdW",
        "LDA",
        "unavailable",
        "not processed"
      ]
    },
    "aggregatable": true
  },
  "results.method.simulation.dft.xc_functional_names": {
    "name": "xc_functional_names",
    "description": "The list of libXC functional names that where used in this entry.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [
      "*"
    ],
    "aggregatable": true,
    "suggestion": true
  },
  "results.method.simulation.dft.exact_exchange_mixing_factor": {
    "name": "exact_exchange_mixing_factor",
    "description": "Amount of exact exchange mixed in with the XC functional (value range = [0,1]).",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "aggregatable": false
  },
  "results.method.simulation.dft.hubbard_kanamori_model.u_effective": {
    "name": "u_effective",
    "description": "Value of the effective U parameter (u - j).",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "joule",
    "shape": [],
    "aggregatable": false
  },
  "results.method.simulation.dft.hubbard_kanamori_model.u": {
    "name": "u",
    "description": "Value of the (intraorbital) Hubbard interaction",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "joule",
    "shape": [],
    "aggregatable": false
  },
  "results.method.simulation.dft.hubbard_kanamori_model.j": {
    "name": "j",
    "description": "Value of the exchange interaction. In rotational invariant systems, j = jh.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "joule",
    "shape": [],
    "aggregatable": false
  },
  "results.method.simulation.projection.type": {
    "name": "type",
    "description": "Projection type for the virtual orbitals: Wannier or Slater-Koster formalisms, or a\ncustom tight-binding model.",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "wannier",
        "slater_koster",
        "custom"
      ]
    },
    "aggregatable": true,
    "suggestion": true
  },
  "results.method.simulation.projection.localization_type": {
    "name": "localization_type",
    "description": "Localization type of the virtual Wannier orbitals.",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "single_shot",
        "maximally_localized"
      ]
    },
    "aggregatable": true,
    "suggestion": true
  },
  "results.method.simulation.gw.type": {
    "name": "type",
    "description": "GW Hedin's self-consistency cycle:\n\n| Name      | Description                      | Reference             |\n\n| --------- | -------------------------------- | --------------------- |\n\n| `\"G0W0\"`  | single-shot                      | PRB 74, 035101 (2006) |\n\n| `\"scGW\"`  | self-consistent G and W               | PRB 75, 235102 (2007) |\n\n| `\"scGW0\"` | self-consistent G with fixed W0  | PRB 54, 8411 (1996)   |\n\n| `\"scG0W\"` | self-consistent W with fixed G0  | -                     |\n\n| `\"ev-scGW0\"`  | eigenvalues self-consistent G with fixed W0   | PRB 34, 5390 (1986)   |\n\n| `\"ev-scGW\"`  | eigenvalues self-consistent G and W   | PRB 74, 045102 (2006)   |\n\n| `\"qp-scGW0\"`  | quasiparticle self-consistent G with fixed W0 | PRL 99, 115109 (2007) |\n\n| `\"qp-scGW\"`  | quasiparticle self-consistent G and W | PRL 96, 226402 (2006) |",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "G0W0",
        "scGW",
        "scGW0",
        "scG0W",
        "ev-scGW0",
        "ev-scGW",
        "qp-scGW0",
        "qp-scGW"
      ]
    },
    "shape": [],
    "aggregatable": true,
    "suggestion": true
  },
  "results.method.simulation.gw.basis_set_type": {
    "name": "basis_set_type",
    "description": "The used basis set functions.",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "(L)APW+lo",
        "gaussians",
        "numeric AOs",
        "plane waves",
        "psinc functions",
        "real-space grid",
        "unavailable",
        "not processed"
      ]
    },
    "aggregatable": true,
    "suggestion": true
  },
  "results.method.simulation.gw.basis_set_name": {
    "name": "basis_set_name",
    "description": "Identifies the basis set.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [],
    "aggregatable": true,
    "suggestion": true
  },
  "results.method.simulation.gw.starting_point_type": {
    "name": "starting_point_type",
    "description": "The libXC based xc functional classification used in the starting point DFT simulation.",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "GGA",
        "HF",
        "OEP",
        "hybrid",
        "meta-GGA",
        "vdW",
        "LDA",
        "unavailable",
        "not processed"
      ]
    },
    "aggregatable": true
  },
  "results.method.simulation.gw.starting_point_names": {
    "name": "starting_point_names",
    "description": "The list of libXC functional names that where used in this entry.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [
      "*"
    ],
    "aggregatable": true,
    "suggestion": true
  },
  "results.method.simulation.dmft.impurity_solver_type": {
    "name": "impurity_solver_type",
    "description": "Impurity solver method used in the DMFT loop:\n\n| Name              | Reference                            |\n\n| ----------------- | ------------------------------------ |\n\n| `\"CT-INT\"`        | Rubtsov et al., JEPT Lett 80 (2004)  |\n\n| `\"CT-HYB\"`        | Werner et al., PRL 97 (2006)         |\n\n| `\"CT-AUX\"`        | Gull et al., EPL 82 (2008)           |\n\n| `\"ED\"`            | Caffarrel et al, PRL 72 (1994)       |\n\n| `\"NRG\"`           | Bulla et al., RMP 80 (2008)          |\n\n| `\"MPS\"`           | Ganahl et al., PRB 90 (2014)         |\n\n| `\"IPT\"`           | Georges et al., PRB 45 (1992)        |\n\n| `\"NCA\"`           | Pruschke et al., PRB 47 (1993)       |\n\n| `\"OCA\"`           | Pruschke et al., PRB 47 (1993)       |\n\n| `\"slave_bosons\"`  | Kotliar et al., PRL 57 (1986)        |\n\n| `\"hubbard_I\"`     | -                                    |",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "CT-INT",
        "CT-HYB",
        "CT-AUX",
        "ED",
        "NRG",
        "MPS",
        "IPT",
        "NCA",
        "OCA",
        "slave_bosons",
        "hubbard_I"
      ]
    },
    "shape": [],
    "aggregatable": true,
    "suggestion": true
  },
  "results.method.simulation.dmft.total_filling": {
    "name": "total_filling",
    "description": "Total filling of the correlated atoms in the unit cell per spin \u2208[0.0, 1.0]. E.g., half-filling\nis defined as 0.5.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "aggregatable": false
  },
  "results.method.simulation.dmft.inverse_temperature": {
    "name": "inverse_temperature",
    "description": "Inverse temperature = 1/(kB*T).",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "1 / joule",
    "shape": [],
    "aggregatable": false
  },
  "results.method.simulation.dmft.magnetic_state": {
    "name": "magnetic_state",
    "description": "Magnetic state in which the DMFT calculation is done.",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "paramagnetic",
        "ferromagnetic",
        "antiferromagnetic"
      ]
    },
    "shape": [],
    "aggregatable": true,
    "suggestion": true
  },
  "results.method.simulation.dmft.u": {
    "name": "u",
    "description": "Value of the (intraorbital) Hubbard interaction",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "joule",
    "shape": [],
    "aggregatable": false
  },
  "results.method.simulation.dmft.hunds_hubbard_ratio": {
    "name": "hunds_hubbard_ratio",
    "description": "Ratio JH/U, with JH being the Hunds coupling and U being the Hubbard local interaction.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "aggregatable": false
  },
  "results.properties.n_calculations": {
    "name": "n_calculations",
    "description": "The number of performed single configuration calculations.'",
    "type": {
      "type_kind": "python",
      "type_data": "int"
    },
    "aggregatable": false
  },
  "results.properties.available_properties": {
    "name": "available_properties",
    "description": "Subset of the property names that are present in this entry.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [
      "0..*"
    ],
    "aggregatable": true
  },
  "results.properties.structural.radial_distribution_function.type": {
    "name": "type",
    "description": "Describes if the observable is calculated at the molecular or atomic level.",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "molecular",
        "atomic"
      ]
    },
    "shape": [],
    "aggregatable": true,
    "suggestion": true
  },
  "results.properties.structural.radial_distribution_function.label": {
    "name": "label",
    "description": "Describes the group of atoms/molecule/groups of molecules involved in determining the property.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [],
    "aggregatable": true,
    "suggestion": true
  },
  "results.properties.structural.radial_distribution_function.methodology.molecular_dynamics.time_step": {
    "name": "time_step",
    "description": "The timestep at which the numerical integration is performed.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "second",
    "shape": [],
    "aggregatable": false
  },
  "results.properties.structural.radial_distribution_function.methodology.molecular_dynamics.ensemble_type": {
    "name": "ensemble_type",
    "description": "The type of thermodynamic ensemble that was simulated.\n\nAllowed values are:\n\n| Thermodynamic Ensemble          | Description                               |\n\n| ---------------------- | ----------------------------------------- |\n\n| `\"NVE\"`           | Constant number of particles, volume, and energy |\n\n| `\"NVT\"`           | Constant number of particles, volume, and temperature |\n\n| `\"NPT\"`           | Constant number of particles, pressure, and temperature |\n\n| `\"NPH\"`           | Constant number of particles, pressure, and enthalpy |",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "NVE",
        "NVT",
        "NPT",
        "NPH"
      ]
    },
    "shape": [],
    "aggregatable": true
  },
  "results.properties.structural.radius_of_gyration.kind": {
    "name": "kind",
    "description": "Kind of the quantity.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [],
    "aggregatable": true,
    "suggestion": true
  },
  "results.properties.structural.radius_of_gyration.label": {
    "name": "label",
    "description": "Describes the atoms or molecule types involved in determining the property.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [],
    "aggregatable": true,
    "suggestion": true
  },
  "results.properties.structural.radius_of_gyration.methodology.molecular_dynamics.time_step": {
    "name": "time_step",
    "description": "The timestep at which the numerical integration is performed.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "second",
    "shape": [],
    "aggregatable": false
  },
  "results.properties.structural.radius_of_gyration.methodology.molecular_dynamics.ensemble_type": {
    "name": "ensemble_type",
    "description": "The type of thermodynamic ensemble that was simulated.\n\nAllowed values are:\n\n| Thermodynamic Ensemble          | Description                               |\n\n| ---------------------- | ----------------------------------------- |\n\n| `\"NVE\"`           | Constant number of particles, volume, and energy |\n\n| `\"NVT\"`           | Constant number of particles, volume, and temperature |\n\n| `\"NPT\"`           | Constant number of particles, pressure, and temperature |\n\n| `\"NPH\"`           | Constant number of particles, pressure, and enthalpy |",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "NVE",
        "NVT",
        "NPT",
        "NPH"
      ]
    },
    "shape": [],
    "aggregatable": true
  },
  "results.properties.dynamical.mean_squared_displacement.type": {
    "name": "type",
    "description": "Describes if the correlation function is calculated at the molecular or atomic level.",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "molecular",
        "atomic"
      ]
    },
    "shape": [],
    "aggregatable": true,
    "suggestion": true
  },
  "results.properties.dynamical.mean_squared_displacement.label": {
    "name": "label",
    "description": "Describes the group of atoms/molecule/groups of molecules involved in determining the property.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [],
    "aggregatable": true,
    "suggestion": true
  },
  "results.properties.dynamical.mean_squared_displacement.methodology.molecular_dynamics.time_step": {
    "name": "time_step",
    "description": "The timestep at which the numerical integration is performed.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "second",
    "shape": [],
    "aggregatable": false
  },
  "results.properties.dynamical.mean_squared_displacement.methodology.molecular_dynamics.ensemble_type": {
    "name": "ensemble_type",
    "description": "The type of thermodynamic ensemble that was simulated.\n\nAllowed values are:\n\n| Thermodynamic Ensemble          | Description                               |\n\n| ---------------------- | ----------------------------------------- |\n\n| `\"NVE\"`           | Constant number of particles, volume, and energy |\n\n| `\"NVT\"`           | Constant number of particles, volume, and temperature |\n\n| `\"NPT\"`           | Constant number of particles, pressure, and temperature |\n\n| `\"NPH\"`           | Constant number of particles, pressure, and enthalpy |",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "NVE",
        "NVT",
        "NPT",
        "NPH"
      ]
    },
    "shape": [],
    "aggregatable": true
  },
  "results.properties.structures.structure_original.nperiodic_dimensions": {
    "name": "nperiodic_dimensions",
    "description": "An integer specifying the number of periodic dimensions in the\nstructure, equivalent to the number of non-zero entries in\ndimension_types.",
    "type": {
      "type_kind": "python",
      "type_data": "int"
    },
    "aggregatable": false
  },
  "results.properties.structures.structure_original.n_sites": {
    "name": "n_sites",
    "description": "An integer specifying the length of the cartesian_site_positions property.",
    "type": {
      "type_kind": "python",
      "type_data": "int"
    },
    "aggregatable": false
  },
  "results.properties.structures.structure_original.cell_volume": {
    "name": "cell_volume",
    "description": "Volume of the cell.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "meter ** 3",
    "aggregatable": false
  },
  "results.properties.structures.structure_original.lattice_parameters.a": {
    "name": "a",
    "description": "Length of the first basis vector.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "meter",
    "aggregatable": false
  },
  "results.properties.structures.structure_original.lattice_parameters.b": {
    "name": "b",
    "description": "Length of the second basis vector.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "meter",
    "aggregatable": false
  },
  "results.properties.structures.structure_original.lattice_parameters.c": {
    "name": "c",
    "description": "Length of the third basis vector.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "meter",
    "aggregatable": false
  },
  "results.properties.structures.structure_original.lattice_parameters.alpha": {
    "name": "alpha",
    "description": "Angle between second and third basis vector.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "radian",
    "aggregatable": false
  },
  "results.properties.structures.structure_original.lattice_parameters.beta": {
    "name": "beta",
    "description": "Angle between first and third basis vector.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "radian",
    "aggregatable": false
  },
  "results.properties.structures.structure_original.lattice_parameters.gamma": {
    "name": "gamma",
    "description": "Angle between first and second basis vector.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "radian",
    "aggregatable": false
  },
  "results.properties.structures.structure_conventional.nperiodic_dimensions": {
    "name": "nperiodic_dimensions",
    "description": "An integer specifying the number of periodic dimensions in the\nstructure, equivalent to the number of non-zero entries in\ndimension_types.",
    "type": {
      "type_kind": "python",
      "type_data": "int"
    },
    "aggregatable": false
  },
  "results.properties.structures.structure_conventional.n_sites": {
    "name": "n_sites",
    "description": "An integer specifying the length of the cartesian_site_positions property.",
    "type": {
      "type_kind": "python",
      "type_data": "int"
    },
    "aggregatable": false
  },
  "results.properties.structures.structure_conventional.cell_volume": {
    "name": "cell_volume",
    "description": "Volume of the cell.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "meter ** 3",
    "aggregatable": false
  },
  "results.properties.structures.structure_conventional.lattice_parameters.a": {
    "name": "a",
    "description": "Length of the first basis vector.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "meter",
    "aggregatable": false
  },
  "results.properties.structures.structure_conventional.lattice_parameters.b": {
    "name": "b",
    "description": "Length of the second basis vector.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "meter",
    "aggregatable": false
  },
  "results.properties.structures.structure_conventional.lattice_parameters.c": {
    "name": "c",
    "description": "Length of the third basis vector.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "meter",
    "aggregatable": false
  },
  "results.properties.structures.structure_conventional.lattice_parameters.alpha": {
    "name": "alpha",
    "description": "Angle between second and third basis vector.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "radian",
    "aggregatable": false
  },
  "results.properties.structures.structure_conventional.lattice_parameters.beta": {
    "name": "beta",
    "description": "Angle between first and third basis vector.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "radian",
    "aggregatable": false
  },
  "results.properties.structures.structure_conventional.lattice_parameters.gamma": {
    "name": "gamma",
    "description": "Angle between first and second basis vector.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "radian",
    "aggregatable": false
  },
  "results.properties.structures.structure_primitive.nperiodic_dimensions": {
    "name": "nperiodic_dimensions",
    "description": "An integer specifying the number of periodic dimensions in the\nstructure, equivalent to the number of non-zero entries in\ndimension_types.",
    "type": {
      "type_kind": "python",
      "type_data": "int"
    },
    "aggregatable": false
  },
  "results.properties.structures.structure_primitive.n_sites": {
    "name": "n_sites",
    "description": "An integer specifying the length of the cartesian_site_positions property.",
    "type": {
      "type_kind": "python",
      "type_data": "int"
    },
    "aggregatable": false
  },
  "results.properties.structures.structure_primitive.cell_volume": {
    "name": "cell_volume",
    "description": "Volume of the cell.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "meter ** 3",
    "aggregatable": false
  },
  "results.properties.structures.structure_primitive.lattice_parameters.a": {
    "name": "a",
    "description": "Length of the first basis vector.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "meter",
    "aggregatable": false
  },
  "results.properties.structures.structure_primitive.lattice_parameters.b": {
    "name": "b",
    "description": "Length of the second basis vector.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "meter",
    "aggregatable": false
  },
  "results.properties.structures.structure_primitive.lattice_parameters.c": {
    "name": "c",
    "description": "Length of the third basis vector.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "meter",
    "aggregatable": false
  },
  "results.properties.structures.structure_primitive.lattice_parameters.alpha": {
    "name": "alpha",
    "description": "Angle between second and third basis vector.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "radian",
    "aggregatable": false
  },
  "results.properties.structures.structure_primitive.lattice_parameters.beta": {
    "name": "beta",
    "description": "Angle between first and third basis vector.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "radian",
    "aggregatable": false
  },
  "results.properties.structures.structure_primitive.lattice_parameters.gamma": {
    "name": "gamma",
    "description": "Angle between first and second basis vector.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "radian",
    "aggregatable": false
  },
  "results.properties.electronic.band_structure_electronic.spin_polarized": {
    "name": "spin_polarized",
    "description": "Whether the band structure is spin-polarized, i.e. is contains channels\nfor both spin values.",
    "type": {
      "type_kind": "python",
      "type_data": "bool"
    },
    "aggregatable": true
  },
  "results.properties.electronic.band_structure_electronic.band_gap.index": {
    "name": "index",
    "description": "Index of the data, e.g. spin channel index.",
    "type": {
      "type_kind": "numpy",
      "type_data": "int32"
    },
    "aggregatable": false
  },
  "results.properties.electronic.band_structure_electronic.band_gap.value": {
    "name": "value",
    "description": "Band gap value. Value of zero corresponds to not having a band gap.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "joule",
    "shape": [],
    "aggregatable": false
  },
  "results.properties.electronic.band_structure_electronic.band_gap.type": {
    "name": "type",
    "description": "Band gap type.",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "direct",
        "indirect"
      ]
    },
    "shape": [],
    "aggregatable": true,
    "suggestion": true
  },
  "results.properties.electronic.dos_electronic.spin_polarized": {
    "name": "spin_polarized",
    "description": "Whether the DOS is spin-polarized, i.e. is contains channels for both\nspin values.",
    "type": {
      "type_kind": "python",
      "type_data": "bool"
    },
    "aggregatable": true
  },
  "results.properties.electronic.dos_electronic.band_gap.index": {
    "name": "index",
    "description": "Index of the data, e.g. spin channel index.",
    "type": {
      "type_kind": "numpy",
      "type_data": "int32"
    },
    "aggregatable": false
  },
  "results.properties.electronic.dos_electronic.band_gap.value": {
    "name": "value",
    "description": "Band gap value. Value of zero corresponds to not having a band gap.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "joule",
    "shape": [],
    "aggregatable": false
  },
  "results.properties.electronic.dos_electronic.band_gap.type": {
    "name": "type",
    "description": "Band gap type.",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "direct",
        "indirect"
      ]
    },
    "shape": [],
    "aggregatable": true,
    "suggestion": true
  },
  "results.properties.optoelectronic.solar_cell.efficiency": {
    "name": "efficiency",
    "description": "Power conversion effciency of a solar cell in percentage %.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "shape": [],
    "aggregatable": false
  },
  "results.properties.optoelectronic.solar_cell.fill_factor": {
    "name": "fill_factor",
    "description": "Fill factor of a solar cell in absolute values (from 0 to 1).",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "shape": [],
    "aggregatable": false
  },
  "results.properties.optoelectronic.solar_cell.open_circuit_voltage": {
    "name": "open_circuit_voltage",
    "description": "Open circuit voltage of a solar cell.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "volt",
    "shape": [],
    "aggregatable": false
  },
  "results.properties.optoelectronic.solar_cell.short_circuit_current_density": {
    "name": "short_circuit_current_density",
    "description": "Short circuit current density of a solar cell.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "ampere / meter ** 2",
    "shape": [],
    "aggregatable": false
  },
  "results.properties.optoelectronic.solar_cell.illumination_intensity": {
    "name": "illumination_intensity",
    "description": "The light intensity during the IV measurement.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "watt / meter ** 2",
    "shape": [],
    "aggregatable": false
  },
  "results.properties.optoelectronic.solar_cell.device_area": {
    "name": "device_area",
    "description": "The total area of the cell during IV and stability measurements under illumination.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "meter ** 2",
    "shape": [],
    "aggregatable": false
  },
  "results.properties.optoelectronic.solar_cell.device_architecture": {
    "name": "device_architecture",
    "description": "Device architecture of the solar cell. Examples are:\n`pn-Heterojunction`, `pin`, `nip`, ...",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true,
    "suggestion": true
  },
  "results.properties.optoelectronic.solar_cell.device_stack": {
    "name": "device_stack",
    "description": "Layers of the entire device.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [
      "0..*"
    ],
    "aggregatable": true,
    "suggestion": true
  },
  "results.properties.optoelectronic.solar_cell.absorber": {
    "name": "absorber",
    "description": "Absorber layers used in the solar cell.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [
      "0..*"
    ],
    "aggregatable": true,
    "suggestion": true
  },
  "results.properties.optoelectronic.solar_cell.absorber_fabrication": {
    "name": "absorber_fabrication",
    "description": "Technique describing the fabrication of the absorber layer. Examples are:\n`Spin-coating`, `Evaporation`, `Doctor blading`, ...",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [
      "0..*"
    ],
    "aggregatable": true,
    "suggestion": true
  },
  "results.properties.optoelectronic.solar_cell.electron_transport_layer": {
    "name": "electron_transport_layer",
    "description": "Electron selective contact layers used in the solar cell.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [
      "0..*"
    ],
    "aggregatable": true,
    "suggestion": true
  },
  "results.properties.optoelectronic.solar_cell.hole_transport_layer": {
    "name": "hole_transport_layer",
    "description": "Hole selective contact layers used in the solar cell.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [
      "0..*"
    ],
    "aggregatable": true,
    "suggestion": true
  },
  "results.properties.optoelectronic.solar_cell.substrate": {
    "name": "substrate",
    "description": "Substrate layers used in the solar cell.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [
      "0..*"
    ],
    "aggregatable": true,
    "suggestion": true
  },
  "results.properties.optoelectronic.solar_cell.back_contact": {
    "name": "back_contact",
    "description": "Back contact layers used in the solar cell.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [
      "0..*"
    ],
    "aggregatable": true,
    "suggestion": true
  },
  "results.properties.mechanical.energy_volume_curve.type": {
    "name": "type",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "raw",
        "mie_gruneisen",
        "pack_evans_james",
        "vinet",
        "tait",
        "birch_euler",
        "pourier_tarantola",
        "birch_lagrange",
        "birch_murnaghan",
        "murnaghan"
      ]
    },
    "aggregatable": true,
    "suggestion": true
  },
  "results.properties.mechanical.bulk_modulus.type": {
    "name": "type",
    "description": "Describes the methodology for obtaining the value.",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "mie_gruneisen",
        "pack_evans_james",
        "vinet",
        "tait",
        "birch_euler",
        "pourier_tarantola",
        "birch_lagrange",
        "birch_murnaghan",
        "murnaghan",
        "voigt_average",
        "reuss_average",
        "voigt_reuss_hill_average"
      ]
    },
    "aggregatable": true,
    "suggestion": true
  },
  "results.properties.mechanical.bulk_modulus.value": {
    "name": "value",
    "description": "Bulk modulus value.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "pascal",
    "aggregatable": false
  },
  "results.properties.mechanical.shear_modulus.type": {
    "name": "type",
    "description": "Describes the methodology for obtaining the value.",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "voigt_average",
        "reuss_average",
        "voigt_reuss_hill_average"
      ]
    },
    "aggregatable": true,
    "suggestion": true
  },
  "results.properties.mechanical.shear_modulus.value": {
    "name": "value",
    "description": "Shear modulus value.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "pascal",
    "aggregatable": false
  },
  "results.properties.thermodynamic.trajectory.available_properties": {
    "name": "available_properties",
    "description": "Subset of the property names that are present in this trajectory.",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "temperature",
        "pressure",
        "volume",
        "energy_potential"
      ]
    },
    "shape": [
      "0..*"
    ],
    "aggregatable": true
  },
  "results.properties.thermodynamic.trajectory.methodology.molecular_dynamics.time_step": {
    "name": "time_step",
    "description": "The timestep at which the numerical integration is performed.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "second",
    "shape": [],
    "aggregatable": false
  },
  "results.properties.thermodynamic.trajectory.methodology.molecular_dynamics.ensemble_type": {
    "name": "ensemble_type",
    "description": "The type of thermodynamic ensemble that was simulated.\n\nAllowed values are:\n\n| Thermodynamic Ensemble          | Description                               |\n\n| ---------------------- | ----------------------------------------- |\n\n| `\"NVE\"`           | Constant number of particles, volume, and energy |\n\n| `\"NVT\"`           | Constant number of particles, volume, and temperature |\n\n| `\"NPT\"`           | Constant number of particles, pressure, and temperature |\n\n| `\"NPH\"`           | Constant number of particles, pressure, and enthalpy |",
    "type": {
      "type_kind": "Enum",
      "type_data": [
        "NVE",
        "NVT",
        "NPT",
        "NPH"
      ]
    },
    "shape": [],
    "aggregatable": true
  },
  "results.properties.spectroscopy.eels.detector_type": {
    "name": "detector_type",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "aggregatable": true,
    "suggestion": true
  },
  "results.properties.spectroscopy.eels.resolution": {
    "name": "resolution",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "joule",
    "aggregatable": false
  },
  "results.properties.spectroscopy.eels.max_energy": {
    "name": "max_energy",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "joule",
    "aggregatable": false
  },
  "results.properties.spectroscopy.eels.min_energy": {
    "name": "min_energy",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "joule",
    "aggregatable": false
  },
  "results.properties.geometry_optimization.convergence_tolerance_energy_difference": {
    "name": "convergence_tolerance_energy_difference",
    "description": "The input energy difference tolerance criterion.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "joule",
    "shape": [],
    "aggregatable": false
  },
  "results.properties.geometry_optimization.convergence_tolerance_force_maximum": {
    "name": "convergence_tolerance_force_maximum",
    "description": "The input maximum net force tolerance criterion.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "newton",
    "shape": [],
    "aggregatable": false
  },
  "results.properties.geometry_optimization.final_force_maximum": {
    "name": "final_force_maximum",
    "description": "The maximum net force in the last optimization step.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "newton",
    "shape": [],
    "aggregatable": false
  },
  "results.properties.geometry_optimization.final_energy_difference": {
    "name": "final_energy_difference",
    "description": "The difference in the energy_total between the last two steps during\noptimization.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "joule",
    "shape": [],
    "aggregatable": false
  },
  "results.properties.geometry_optimization.final_displacement_maximum": {
    "name": "final_displacement_maximum",
    "description": "The maximum displacement in the last optimization step with respect to previous.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "meter",
    "shape": [],
    "aggregatable": false
  },
  "results.properties.geometry_optimization.structure_optimized.nperiodic_dimensions": {
    "name": "nperiodic_dimensions",
    "description": "An integer specifying the number of periodic dimensions in the\nstructure, equivalent to the number of non-zero entries in\ndimension_types.",
    "type": {
      "type_kind": "python",
      "type_data": "int"
    },
    "aggregatable": false
  },
  "results.properties.geometry_optimization.structure_optimized.n_sites": {
    "name": "n_sites",
    "description": "An integer specifying the length of the cartesian_site_positions property.",
    "type": {
      "type_kind": "python",
      "type_data": "int"
    },
    "aggregatable": false
  },
  "results.properties.geometry_optimization.structure_optimized.cell_volume": {
    "name": "cell_volume",
    "description": "Volume of the cell.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "meter ** 3",
    "aggregatable": false
  },
  "results.properties.geometry_optimization.structure_optimized.lattice_parameters.a": {
    "name": "a",
    "description": "Length of the first basis vector.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "meter",
    "aggregatable": false
  },
  "results.properties.geometry_optimization.structure_optimized.lattice_parameters.b": {
    "name": "b",
    "description": "Length of the second basis vector.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "meter",
    "aggregatable": false
  },
  "results.properties.geometry_optimization.structure_optimized.lattice_parameters.c": {
    "name": "c",
    "description": "Length of the third basis vector.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "meter",
    "aggregatable": false
  },
  "results.properties.geometry_optimization.structure_optimized.lattice_parameters.alpha": {
    "name": "alpha",
    "description": "Angle between second and third basis vector.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "radian",
    "aggregatable": false
  },
  "results.properties.geometry_optimization.structure_optimized.lattice_parameters.beta": {
    "name": "beta",
    "description": "Angle between first and third basis vector.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "radian",
    "aggregatable": false
  },
  "results.properties.geometry_optimization.structure_optimized.lattice_parameters.gamma": {
    "name": "gamma",
    "description": "Angle between first and second basis vector.",
    "type": {
      "type_kind": "numpy",
      "type_data": "float64"
    },
    "unit": "radian",
    "aggregatable": false
  },
  "results.eln.sections": {
    "name": "sections",
    "description": "The type of sections used in entries to search for. By default these are the names\nof the used section definitions.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [
      "*"
    ],
    "aggregatable": true
  },
  "results.eln.tags": {
    "name": "tags",
    "description": "Short tags that are useful to quickly search based on various\nuser defined criteria.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [
      "*"
    ],
    "aggregatable": true
  },
  "results.eln.names": {
    "name": "names",
    "description": "Short human readable and descriptive names that appear in\nELN entries.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [
      "*"
    ],
    "aggregatable": false
  },
  "results.eln.descriptions": {
    "name": "descriptions",
    "description": "'Human descriptions that appear in ELN entries.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [
      "*"
    ],
    "aggregatable": false
  },
  "results.eln.instruments": {
    "name": "instruments",
    "description": "The name or type of instrument used in an activity, e.g. process or\nmeasurement.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [
      "*"
    ],
    "aggregatable": true
  },
  "results.eln.methods": {
    "name": "methods",
    "description": "The name or the applied method in an activity, e.g. process or measurement",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [
      "*"
    ],
    "aggregatable": true
  },
  "results.eln.lab_ids": {
    "name": "lab_ids",
    "description": "The laboratory specific id for any item, e.g. sample, chemical, instrument.",
    "type": {
      "type_kind": "python",
      "type_data": "str"
    },
    "shape": [
      "*"
    ],
    "aggregatable": true,
    "suggestion": true
  },
  "results.material": {
    "name": "material",
    "description": "\n        Contains information that is specific to bulk crystalline materials.\n        ",
    "nested": false,
    "repeats": false
  },
  "results.material.symmetry": {
    "name": "symmetry",
    "description": "\n        Section containing information about the symmetry of the material. All\n        of these properties are derived by running a symmetry analysis on a\n        representative geometry from the original data. This original geometry\n        is stored in results.properties together with the primitive and\n        conventional structures.\n        ",
    "nested": false,
    "repeats": false
  },
  "results.material.topology": {
    "name": "topology",
    "description": "\n        Describes a a structural part that has been identified within the entry.\n        May be related to other systems.\n        ",
    "nested": true,
    "repeats": true
  },
  "results.material.topology.atoms": {
    "name": "atoms",
    "description": "Describes the atomic structure of the physical system. This includes the atom positions, lattice vectors, etc.",
    "nested": false,
    "repeats": true
  },
  "results.material.topology.system_relation": {
    "name": "system_relation",
    "description": "Contains information about the relation between two different systems.",
    "nested": false,
    "repeats": true
  },
  "results.material.topology.cell": {
    "name": "cell",
    "description": "\n        Properties of a unit cell.\n        ",
    "nested": false,
    "repeats": true
  },
  "results.material.topology.symmetry": {
    "name": "symmetry",
    "description": "\n        Section containing information about the symmetry properties of a\n        conventional cell related to a system.\n        ",
    "nested": false,
    "repeats": true
  },
  "results.material.topology.prototype": {
    "name": "prototype",
    "description": "Information on the prototype corresponding to the current section.",
    "nested": false,
    "repeats": true
  },
  "results.method": {
    "name": "method",
    "description": "\n        Contains a summary of the methodology that has been used in this entry.\n        This methodology applies to all of the reported properties and\n        determines the result of a single energy evalution. The individual\n        properties may be further methodological details affect e.g. the\n        sampling.\n        ",
    "nested": false,
    "repeats": false
  },
  "results.method.simulation": {
    "name": "simulation",
    "description": "\n        Contains method details for a simulation entry.\n        ",
    "nested": false,
    "repeats": false
  },
  "results.method.simulation.dft": {
    "name": "dft",
    "description": "\n        Methodology for a DFT calculation.\n        ",
    "nested": false,
    "repeats": false
  },
  "results.method.simulation.dft.hubbard_kanamori_model": {
    "name": "hubbard_kanamori_model",
    "description": "Setup of the Hubbard model used in DFT+U",
    "nested": true,
    "repeats": true
  },
  "results.method.simulation.projection": {
    "name": "projection",
    "description": "\n        Methodology for a Projection calculation.\n        ",
    "nested": false,
    "repeats": false
  },
  "results.method.simulation.gw": {
    "name": "gw",
    "description": "\n        Methodology for a GW calculation.\n        ",
    "nested": false,
    "repeats": false
  },
  "results.method.simulation.dmft": {
    "name": "dmft",
    "description": "\n        Methodology for a DMFT calculation.\n        ",
    "nested": false,
    "repeats": false
  },
  "results.method.simulation.quantum_cms": {
    "name": "quantum_cms",
    "nested": false,
    "repeats": false
  },
  "results.method.simulation.quantum_cms.quantum_circuit": {
    "name": "quantum_circuit",
    "nested": false
  },
  "results.method.simulation.precision": {
    "name": "precision",
    "description": "\n        Contains parameters for controlling or evaluating the convergence of the electronic structure.\n        ",
    "nested": false,
    "repeats": false
  },
  "results.properties": {
    "name": "properties",
    "description": "\n        Contains the physical properties that have been calculated or used in\n        this entry.\n        ",
    "nested": false,
    "repeats": false
  },
  "results.properties.structural": {
    "name": "structural",
    "description": "\n        Structural properties.\n        ",
    "nested": false,
    "repeats": false
  },
  "results.properties.structural.radial_distribution_function": {
    "name": "radial_distribution_function",
    "description": "\n        Radial distribution function.\n        ",
    "nested": true,
    "repeats": true
  },
  "results.properties.structural.radial_distribution_function.methodology": {
    "name": "methodology",
    "description": "\n        Contains methodological information and can be attached to any physical\n        property.\n        ",
    "nested": false,
    "repeats": true
  },
  "results.properties.structural.radial_distribution_function.methodology.molecular_dynamics": {
    "name": "molecular_dynamics",
    "description": "\n        Methodology for molecular dynamics.\n        ",
    "nested": false,
    "repeats": true
  },
  "results.properties.structural.radius_of_gyration": {
    "name": "radius_of_gyration",
    "description": "\n        Contains Radius of Gyration values as a trajectory.\n        ",
    "nested": true,
    "repeats": true
  },
  "results.properties.structural.radius_of_gyration.methodology": {
    "name": "methodology",
    "description": "\n        Contains methodological information and can be attached to any physical\n        property.\n        ",
    "nested": false,
    "repeats": true
  },
  "results.properties.structural.radius_of_gyration.methodology.molecular_dynamics": {
    "name": "molecular_dynamics",
    "description": "\n        Methodology for molecular dynamics.\n        ",
    "nested": false,
    "repeats": true
  },
  "results.properties.dynamical": {
    "name": "dynamical",
    "description": "\n        Dynamical properties.\n        ",
    "nested": false,
    "repeats": false
  },
  "results.properties.dynamical.mean_squared_displacement": {
    "name": "mean_squared_displacement",
    "description": "\n        Mean Squared Displacements.\n        ",
    "nested": true,
    "repeats": true
  },
  "results.properties.dynamical.mean_squared_displacement.methodology": {
    "name": "methodology",
    "description": "\n        Contains methodological information and can be attached to any physical\n        property.\n        ",
    "nested": false,
    "repeats": true
  },
  "results.properties.dynamical.mean_squared_displacement.methodology.molecular_dynamics": {
    "name": "molecular_dynamics",
    "description": "\n        Methodology for molecular dynamics.\n        ",
    "nested": false,
    "repeats": true
  },
  "results.properties.structures": {
    "name": "structures",
    "description": "\n        Contains full atomistic representations of the material in different\n        forms.\n        ",
    "nested": false,
    "repeats": false
  },
  "results.properties.structures.structure_original": {
    "name": "structure_original",
    "description": "\n        Describes an atomistic structure.\n        ",
    "nested": false,
    "repeats": false
  },
  "results.properties.structures.structure_original.species": {
    "name": "species",
    "description": "Used to describe the species of the sites of this structure. Species can be pure chemical elements, or virtual-crystal atoms representing a statistical occupation of a\ngiven site by multiple chemical elements.",
    "nested": false,
    "repeats": true
  },
  "results.properties.structures.structure_original.lattice_parameters": {
    "name": "lattice_parameters",
    "description": "\n        Lattice parameters of a cell.\n        ",
    "nested": false
  },
  "results.properties.structures.structure_original.wyckoff_sets": {
    "name": "wyckoff_sets",
    "description": "\n        Section for storing Wyckoff set information. Only available for\n        conventional cells that have undergone symmetry analysis.\n        ",
    "nested": false,
    "repeats": true
  },
  "results.properties.structures.structure_conventional": {
    "name": "structure_conventional",
    "description": "\n        Describes an atomistic structure.\n        ",
    "nested": false,
    "repeats": false
  },
  "results.properties.structures.structure_conventional.species": {
    "name": "species",
    "description": "Used to describe the species of the sites of this structure. Species can be pure chemical elements, or virtual-crystal atoms representing a statistical occupation of a\ngiven site by multiple chemical elements.",
    "nested": false,
    "repeats": true
  },
  "results.properties.structures.structure_conventional.lattice_parameters": {
    "name": "lattice_parameters",
    "description": "\n        Lattice parameters of a cell.\n        ",
    "nested": false
  },
  "results.properties.structures.structure_conventional.wyckoff_sets": {
    "name": "wyckoff_sets",
    "description": "\n        Section for storing Wyckoff set information. Only available for\n        conventional cells that have undergone symmetry analysis.\n        ",
    "nested": false,
    "repeats": true
  },
  "results.properties.structures.structure_primitive": {
    "name": "structure_primitive",
    "description": "\n        Describes an atomistic structure.\n        ",
    "nested": false,
    "repeats": false
  },
  "results.properties.structures.structure_primitive.species": {
    "name": "species",
    "description": "Used to describe the species of the sites of this structure. Species can be pure chemical elements, or virtual-crystal atoms representing a statistical occupation of a\ngiven site by multiple chemical elements.",
    "nested": false,
    "repeats": true
  },
  "results.properties.structures.structure_primitive.lattice_parameters": {
    "name": "lattice_parameters",
    "description": "\n        Lattice parameters of a cell.\n        ",
    "nested": false
  },
  "results.properties.structures.structure_primitive.wyckoff_sets": {
    "name": "wyckoff_sets",
    "description": "\n        Section for storing Wyckoff set information. Only available for\n        conventional cells that have undergone symmetry analysis.\n        ",
    "nested": false,
    "repeats": true
  },
  "results.properties.vibrational": {
    "name": "vibrational",
    "description": "\n        Vibrational properties.\n        ",
    "nested": false,
    "repeats": false
  },
  "results.properties.vibrational.band_structure_phonon": {
    "name": "band_structure_phonon",
    "description": "\n        This section stores information on a vibrational band structure\n        evaluation along one-dimensional pathways in the reciprocal space.\n        ",
    "nested": false,
    "repeats": false
  },
  "results.properties.vibrational.dos_phonon": {
    "name": "dos_phonon",
    "description": "\n        Contains the total phonon density of states.\n        ",
    "nested": false,
    "repeats": false
  },
  "results.properties.vibrational.heat_capacity_constant_volume": {
    "name": "heat_capacity_constant_volume",
    "description": "\n        Contains the values of the specific (per mass) and isochoric (constant\n        volume) heat capacity at different temperatures.\n        ",
    "nested": false,
    "repeats": false
  },
  "results.properties.vibrational.energy_free_helmholtz": {
    "name": "energy_free_helmholtz",
    "description": "\n        Contains the values of the Helmholtz free energy per atom at constant\n        volume and at different temperatures.\n        ",
    "nested": false,
    "repeats": false
  },
  "results.properties.electronic": {
    "name": "electronic",
    "description": "\n        Electronic properties.\n        ",
    "nested": false,
    "repeats": false
  },
  "results.properties.electronic.band_structure_electronic": {
    "name": "band_structure_electronic",
    "description": "\n        This section stores information on a electonic band structure\n        evaluation along one-dimensional pathways in the reciprocal space.\n        ",
    "nested": false,
    "repeats": true
  },
  "results.properties.electronic.band_structure_electronic.band_gap": {
    "name": "band_gap",
    "description": "\n        Band gap information for electronic structure.\n        ",
    "nested": true,
    "repeats": true
  },
  "results.properties.electronic.dos_electronic": {
    "name": "dos_electronic",
    "description": "\n        Contains the total electronic density of states.\n        ",
    "nested": false,
    "repeats": true
  },
  "results.properties.electronic.dos_electronic.band_gap": {
    "name": "band_gap",
    "description": "\n        Band gap information for electronic structure.\n        ",
    "nested": true,
    "repeats": true
  },
  "results.properties.electronic.greens_functions_electronic": {
    "name": "greens_functions_electronic",
    "description": "\n        Base class for Green's functions information.\n        ",
    "nested": false,
    "repeats": true
  },
  "results.properties.optoelectronic": {
    "name": "optoelectronic",
    "description": "\n        Optoelectronic properties.\n        ",
    "nested": false,
    "repeats": false
  },
  "results.properties.optoelectronic.solar_cell": {
    "name": "solar_cell",
    "description": "\n        Properties of solar cells.\n        ",
    "nested": false,
    "repeats": false
  },
  "results.properties.mechanical": {
    "name": "mechanical",
    "description": "\n        Mechanical properties.\n        ",
    "nested": false,
    "repeats": false
  },
  "results.properties.mechanical.energy_volume_curve": {
    "name": "energy_volume_curve",
    "description": "\n        Energy volume curve.\n        ",
    "nested": false,
    "repeats": true
  },
  "results.properties.mechanical.bulk_modulus": {
    "name": "bulk_modulus",
    "description": "\n        Contains bulk modulus values calculated with different methodologies.\n        ",
    "nested": true,
    "repeats": true
  },
  "results.properties.mechanical.shear_modulus": {
    "name": "shear_modulus",
    "description": "\n        Contains shear modulus values calculated with different methodologies.\n        ",
    "nested": true,
    "repeats": true
  },
  "results.properties.thermodynamic": {
    "name": "thermodynamic",
    "description": "\n        Thermodynamic properties.\n        ",
    "nested": false,
    "repeats": false
  },
  "results.properties.thermodynamic.trajectory": {
    "name": "trajectory",
    "description": "\n        Thermodynamic properties reported for an ensemble evolving in time.\n        ",
    "nested": true,
    "repeats": true
  },
  "results.properties.thermodynamic.trajectory.methodology": {
    "name": "methodology",
    "description": "\n        Contains methodological information and can be attached to any physical\n        property.\n        ",
    "nested": false,
    "repeats": true
  },
  "results.properties.thermodynamic.trajectory.methodology.molecular_dynamics": {
    "name": "molecular_dynamics",
    "description": "\n        Methodology for molecular dynamics.\n        ",
    "nested": false,
    "repeats": true
  },
  "results.properties.thermodynamic.trajectory.temperature": {
    "name": "temperature",
    "description": "\n        Contains temperature values evaluated at different times.\n        ",
    "nested": false,
    "repeats": true
  },
  "results.properties.thermodynamic.trajectory.pressure": {
    "name": "pressure",
    "description": "\n        Contains pressure values evaluated at different times.\n        ",
    "nested": false,
    "repeats": true
  },
  "results.properties.thermodynamic.trajectory.volume": {
    "name": "volume",
    "description": "\n        Contains volume values evaluated at different times.\n        ",
    "nested": false,
    "repeats": true
  },
  "results.properties.thermodynamic.trajectory.energy_potential": {
    "name": "energy_potential",
    "description": "\n        Contains energy values evaluated at different times.\n        ",
    "nested": false,
    "repeats": true
  },
  "results.properties.spectroscopy": {
    "name": "spectroscopy",
    "description": "\n        Spectroscopic properties.\n        ",
    "nested": false,
    "repeats": false
  },
  "results.properties.spectroscopy.eels": {
    "name": "eels",
    "nested": true
  },
  "results.properties.geometry_optimization": {
    "name": "geometry_optimization",
    "description": "\n        Geometry optimization results and settings.\n        ",
    "nested": false,
    "repeats": false
  },
  "results.properties.geometry_optimization.structure_optimized": {
    "name": "structure_optimized",
    "description": "\n        Describes an atomistic structure.\n        ",
    "nested": false,
    "repeats": false
  },
  "results.properties.geometry_optimization.structure_optimized.species": {
    "name": "species",
    "description": "Used to describe the species of the sites of this structure. Species can be pure chemical elements, or virtual-crystal atoms representing a statistical occupation of a\ngiven site by multiple chemical elements.",
    "nested": false,
    "repeats": true
  },
  "results.properties.geometry_optimization.structure_optimized.lattice_parameters": {
    "name": "lattice_parameters",
    "description": "\n        Lattice parameters of a cell.\n        ",
    "nested": false
  },
  "results.properties.geometry_optimization.structure_optimized.wyckoff_sets": {
    "name": "wyckoff_sets",
    "description": "\n        Section for storing Wyckoff set information. Only available for\n        conventional cells that have undergone symmetry analysis.\n        ",
    "nested": false,
    "repeats": true
  },
  "results.eln": {
    "name": "eln",
    "nested": false,
    "repeats": false
  }
}
